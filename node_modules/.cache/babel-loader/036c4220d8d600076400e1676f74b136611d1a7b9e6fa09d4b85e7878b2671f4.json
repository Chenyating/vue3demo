{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _ from \"lodash\";\nimport $router from \"../common/uni-router\";\nimport { Volcengine } from \"../common\";\nexport default class WebVolcengine extends Volcengine {\n  constructor(params) {\n    if (!params) {\n      params = {};\n    }\n    params.type = 1;\n    // 表示是web 端的SDK\n    super(params);\n    this.routerObject = null;\n    // web的vue-router 对象，默认为空\n    this.isCustomPageviewOpen = false;\n    // 是否触发了PC端 custom_pageview_open 乾坤框架下，只能采取这样的方式上报 custom_pageview_open\n    this.customPageviewOpenParam = null;\n    // PC端 custom_pageview_open 事件携带的参数\n    this.afterEachRouter = null;\n    this.isPC = false;\n    try {\n      // H5\n      this.routerInfo = UNI_ROUTES.pages;\n      this.tarBar = UNI_ROUTES.tarBar ? UNI_ROUTES.tarBar.list : [];\n      const pages = this.getCurrentPagesArr();\n      this.changeCurrentPage(pages);\n    } catch (e) {\n      // pc执行\n      this.routerInfo = [];\n      this.tarBar = [];\n      if (params.routerObject) {\n        const routerObject = params.routerObject;\n        const currentRouterObject = routerObject.history.current;\n        this.handelRouterObject(currentRouterObject);\n        this.routerObject = routerObject;\n      }\n      this.isPC = true;\n    }\n  }\n  start() {\n    this.init(this.routerInfo, this.tarBar);\n  }\n\n  /**\n   * 初始化滚动上报的相关参数\n   */\n  initScroll() {\n    // y轴滚动条是否开始滚动\n    this.scrollStart = false;\n    const scrollEventCache = this.getScrollEventCache();\n    let scrollParam;\n    if (_.isEmpty(scrollEventCache) || !scrollEventCache.isInited) {\n      scrollParam = {\n        scrollTime: new Date().getTime(),\n        scrollTop: 0,\n        anchorList: [],\n        isInited: true\n      };\n    }\n    const param = {\n      ...scrollEventCache,\n      ...scrollParam\n    };\n    this.scrollTimeClear = null; // 滚动事件的定时器\n    this.setScrollEventCache(param);\n  }\n\n  /**\n   * 监听路由的变化\n   * @param {*} param 开发者自定义上报的参数\n   * @returns\n   */\n  listenRouter(param) {\n    if (this.isPC) {\n      if (!this.routerObject) {\n        return;\n      }\n      this.routerObject.afterEach((to, from) => {\n        if (this.isCustomPageviewOpen) {\n          this.setCacheOldRouterTitle(document.title);\n          this.afterGetWebPath(to);\n          // 处理 custom_pageview_open 事件\n        }\n\n        const scrollEventCache = this.getScrollEventCache();\n        if (!_.isEmpty(scrollEventCache) && scrollEventCache.isInited) {\n          const that = this;\n          setTimeout(() => {\n            that.reportScrollEvent();\n            scrollEventCache.scrollTime = new Date().getTime();\n            scrollEventCache.initAnchor = {};\n            that.setScrollEventCache(scrollEventCache);\n            that.scrollStart = false;\n            that.setAnchorList();\n          }, 1000);\n        }\n        const routerInfo = {\n          path: to.path,\n          meta: to.meta,\n          query: to.query,\n          params: to.params\n        };\n        this.setCurrentRouterInfo(routerInfo);\n        this.reportPageView(param, from, to);\n        this.setCacheOldRouterTitle(document.title);\n      });\n    } else {\n      const isEmptyObject = !_.isObject(param);\n      if (isEmptyObject) {\n        param = {};\n      }\n      $router.onchange = (now, old) => {\n        this.reportPageView(param, old, now);\n      };\n    }\n    // 监听页面隐藏事件 页面关闭的时候同样也会触发\n    this.listenVisibilityChange(param);\n  }\n\n  /**\n   * 监听滚动的变化\n   * @param {*} param 开发者自定义上报的参数\n   */\n  listenScroll(param) {\n    try {\n      const isValid = this.checkScrollInitParams(param);\n      if (!isValid) {\n        return;\n      }\n      this.initScroll();\n      document.body.onscroll = () => {\n        // 监听浏览器滚动事件( onscroll )\n        // 事件触发的时候获取当前的scrollTop( this.scrollTop )，执行onScrollEnd函数(延迟500 )\n        // 在执行onScrollEnd函数的时候再获取当前的scrollTop( nowScrollTop )\n        // 拿当前的scrollTop与延时500毫秒之前的scrollTop进行比较，看是否相等，相等的话说明滚动条停止了滚动\n        if (!this.scrollStart) {\n          this.handleFirstSrcoll(); // 滚动开始之前调用方法\n          const extraParams = param.extraParams ? param.extraParams : {};\n          this.reportScrollEvent(extraParams);\n          const scrollCache = this.getScrollEventCache();\n          scrollCache.scrollTime = 0; // 上报完成之后重置时间，下次记录的时间为：滚动结束之后\n          scrollCache.anchorList = []; // 上报完成之后重置经过的锚点 下次记录的时间为：滚动结束之后\n          this.setScrollEventCache(scrollCache);\n        }\n        if (this.scrollTimeClear) {\n          clearTimeout(this.scrollTimeClear);\n        }\n        const scrollEventCache = this.getScrollEventCache();\n        scrollEventCache.scrollTop = document.documentElement.scrollTop;\n        this.setScrollEventCache(scrollEventCache);\n        this.scrollTimeClear = setTimeout(() => {\n          this.onScrollEnd();\n        }, 500);\n      };\n    } catch (e) {}\n  }\n\n  /**\n   *\n   * @param {*} param 自定义参数\n   * @param {*} olderRouter 之前的旧路由\n   * @param {*} nowRouter 当前路由\n   * @returns\n   */\n  reportPageView(param, olderRouter, nowRouter) {\n    try {\n      const lastVisitUrl = this.getCacheVisitUrl();\n      let nowPath = nowRouter.fullPath;\n      let oldPath = olderRouter.fullPath;\n      if (this.routerObject) {\n        nowPath = nowRouter.path;\n        oldPath = olderRouter.path;\n      }\n      if (lastVisitUrl === nowPath) {\n        return;\n      }\n      if (!this.volcengineProps[oldPath]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const finalParam = this.getEventParam(param, oldPath, true, olderRouter);\n      window.collectEvent(\"custom_pageview\", finalParam);\n      this.setCacheVisitUrl(nowPath);\n      this.setCacheVisitWebUrl(window.location.href);\n    } catch (e) {}\n  }\n\n  /**\n   * 监听用户进入页面的事件\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewOpen(param) {\n    if (this.routerObject) {\n      this.customPageviewOpenParam = param;\n      this.isCustomPageviewOpen = true;\n      return;\n    }\n    if (!_.isObject(param)) {\n      param = {};\n    }\n    try {\n      const currentUrl = this.getCurrentUrl(); // 获取当前的页面路径\n      const nowTime = new Date().getTime();\n      this.setCacheTime(nowTime); // 重新记录页面停留时间\n      this.setCacheVisitUrl(currentUrl);\n      this.setCacheVisitWebUrl(window.location.href);\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const finalParam = this.getEventParam(param, currentUrl, false, {});\n      window.collectEvent(\"custom_pageview_open\", finalParam);\n    } catch (e) {}\n  }\n\n  /**\n   * 监听H5用户隐藏页面的事件 (PC端通过对 visibilityChange 事件的监听来实现)\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewHide(param) {\n    if (this.routerObject) {\n      return;\n    }\n    if (!_.isObject(param)) {\n      param = {};\n    }\n    // 如果是iOS的webview 则不触发\n    try {\n      const agent = window.navigator.userAgent;\n      const isIOS = agent.match(/(iphone os)/i); // iOS终端\n      if (plus && isIOS) {\n        return;\n      }\n    } catch (e) {}\n    try {\n      const pages = this.getCurrentPagesArr();\n      this.changeCurrentPage(pages);\n      const currentUrl = this.getCurrentUrl();\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const commonAttr = this.getEventParam(param, currentUrl, false, {});\n      window.collectEvent(\"custom_pageview_hide\", commonAttr);\n      // 上报当前页面的停留时间，然后onShow的时候会重新改写当前页面访问时间\n      this.setCacheVisitUrl(currentUrl);\n      this.setCacheVisitWebUrl(window.location.href);\n      const pageviewParam = this.getEventParam(param, currentUrl, true, {});\n      window.collectEvent(\"custom_pageview\", pageviewParam);\n    } catch (e) {}\n  }\n  afterGetWebPath(router) {\n    try {\n      const nowTime = new Date().getTime();\n      this.setCacheTime(nowTime); // 重新记录页面停留时间\n      this.setCacheVisitUrl(router.path);\n      this.setCacheVisitWebUrl(window.location.href);\n      const currentUrl = router.path;\n      const commonAttr = this.getEventParam(this.customPageviewOpenParam, currentUrl, false, router);\n      window.collectEvent(\"custom_pageview_open\", commonAttr);\n      this.customPageviewOpenParam = null;\n      this.isCustomPageviewOpen = false;\n      const routerInfo = {\n        path: router.path,\n        meta: router.meta,\n        query: router.query,\n        params: router.params\n      };\n      this.setCurrentRouterInfo(routerInfo);\n      const scrollEventCache = this.getScrollEventCache();\n      if (!_.isEmpty(scrollEventCache)) {\n        const that = this;\n        setTimeout(function () {\n          that.recordScrollParam();\n        }, 1000);\n      }\n    } catch (e) {}\n  }\n  afterReportEvent(reportEventName, reportEventParam) {\n    try {\n      const router = this.getCurrentRouterInfo();\n      const meta = router.meta;\n      const title = meta ? meta.pageName || document.title : document.title;\n      const commonAttr = this.getEventParam(reportEventParam, router.path, false, router);\n      commonAttr['custom_page_url'] = window.location.href;\n      commonAttr['custom_page_url_path'] = router.path;\n      if (!reportEventParam['custom_page_title']) {\n        commonAttr['custom_page_title'] = reportEventName === 'sidebar_item_click' ? this.getCacheOldRouterTitle() : title;\n      }\n      window.collectEvent(reportEventName, commonAttr);\n    } catch (e) {}\n  }\n\n  // 设置用户Id\n\n  setUserUniqueId(paramUserUniqueId) {\n    const userUniqueId = paramUserUniqueId || this.nullProp;\n    try {\n      window.collectEvent(\"config\", {\n        user_unique_id: userUniqueId\n      });\n    } catch (e) {}\n  }\n  collectApi(param) {\n    const that = this;\n    setTimeout(() => {\n      that.collectApiTask(param);\n    }, 500);\n  }\n  // 接口请求上报\n  collectApiTask(param) {\n    try {\n      const routeInfo = this.getCurrentRouterInfo();\n      const meta = routeInfo.meta;\n      const title = meta ? meta.pageName || document.title : document.title;\n      const currentUrl = this.getCurrentUrl();\n      this.setCacheVisitUrl(currentUrl);\n      const apiRequestParam = {\n        api_name: param.apiName,\n        is_success: param.isSuccess,\n        api_time_cost: param.apiTimeCost,\n        custom_page_title: title,\n        custom_page_url: window.location.href\n      };\n      const commonAttr = this.getEventParam(apiRequestParam, currentUrl, false, routeInfo);\n      delete param.apiName;\n      delete param.isSuccess;\n      delete param.apiTimeCost;\n      const finalParam = {\n        ...commonAttr,\n        ...param\n      };\n      window.collectEvent(\"api_request\", finalParam);\n    } catch (e) {}\n  }\n  reportEvent(name, param) {\n    if (this.routerObject) {\n      this.afterReportEvent(name, param);\n      return;\n    }\n    const currentUrl = this.getCurrentUrl();\n    this.setCacheVisitUrl(currentUrl);\n    const finalParam = this.getEventParam(param, currentUrl, false, {});\n    try {\n      window.collectEvent(name, finalParam);\n    } catch (e) {}\n  }\n\n  /**\n   * 上报用户属性\n   * @param {*} profileParam 用户属性组成的对象\n   */\n  profileSet(profileParam) {\n    try {\n      window.collectEvent(\"profileSet\", profileParam);\n    } catch (e) {}\n  }\n  sdkVersionProfileSet(param) {\n    try {\n      const sdkVersion = this.getSdkVersion();\n      const finalParam = {\n        ...param,\n        ...sdkVersion\n      };\n      this.profileSet(finalParam);\n    } catch (e) {}\n  }\n  appVersionProfileSet(param) {\n    try {\n      const appVersion = this.getAppVersion();\n      const finalParam = {\n        ...param,\n        ...appVersion\n      };\n      this.profileSet(finalParam);\n    } catch (e) {}\n  }\n  handelRouterObject(routerObject) {\n    try {\n      const route = routerObject.path;\n      const meta = routerObject.meta;\n      const path = route.substring(1, route.length);\n      this.routerInfo = [{\n        path,\n        meta\n      }];\n      this.changeCurrentPage([route]);\n    } catch (e) {}\n  }\n  /**\n   * 滚动结束的时候触发\n   */\n  onScrollEnd() {\n    const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    const scrollEventCache = this.getScrollEventCache();\n    const isScrollEnd = nowScrollTop === scrollEventCache.scrollTop;\n    // 是否滚动结束了\n    if (isScrollEnd) {\n      this.recordScrollParam();\n    }\n  }\n  listenVisibilityChange(param) {\n    const that = this;\n    try {\n      window.addEventListener(\"visibilitychange\", event => {\n        const isHidden = document.visibilityState === \"hidden\";\n        if (that.routerObject) {\n          if (isHidden) {\n            const router = that.getCurrentRouterInfo();\n            that.handlePageViewCloseByWeb(router, param);\n            that.handlePageViewHideByWeb(router, param);\n            that.handleReportScrollEvent();\n          } else {\n            const nowTime = new Date().getTime();\n            this.setCacheTime(nowTime);\n            // 重置滚动条停留时间\n            this.resetScrollDurationTime(nowTime);\n          }\n        }\n      });\n    } catch (e) {}\n  }\n\n  // 上报滚动条页面停留事件\n  handleReportScrollEvent() {\n    const scrollEventCache = this.getScrollEventCache();\n    if (!_.isEmpty(scrollEventCache)) {\n      this.reportScrollEvent();\n      this.scrollStart = false;\n      // 滚动没有开始，只是隐藏的时候上报停留事件\n    }\n  }\n\n  // 重置滚动条的开始停留时间\n  resetScrollDurationTime(nowTime) {\n    const scrollEventCache = this.getScrollEventCache();\n    if (!_.isEmpty(scrollEventCache)) {\n      scrollEventCache.scrollTime = nowTime;\n      this.setScrollEventCache(scrollEventCache);\n    }\n  }\n  handlePageViewCloseByWeb(router, param) {\n    this.setCacheVisitUrl(router.path);\n    this.setCacheVisitWebUrl(window.location.href);\n    const commonAttr = this.getEventParam(param, router.path, true, router);\n    window.collectEvent(\"custom_pageview\", commonAttr);\n  }\n  handlePageViewHideByWeb(router, param) {\n    const pageviewHideParam = this.getEventParam(param, router.path, false, router);\n    window.collectEvent(\"custom_pageview_hide\", pageviewHideParam);\n  }\n  recordScrollParam() {\n    this.scrollStart = false; // 此次滚动属于结束状态\n    const scrollEventCache = this.getScrollEventCache();\n    scrollEventCache.scrollTime = new Date().getTime();\n    this.setScrollEventCache(scrollEventCache);\n    this.setAnchorList();\n  }\n  setAnchorList() {\n    const scrollEventCache = this.getScrollEventCache();\n    const initAnchor = scrollEventCache.initAnchor || {};\n    const isInitRecord = !initAnchor || _.isEmpty(initAnchor);\n    const initAnchorListData = {};\n    const clientHeight = document.documentElement.clientHeight;\n    // 浏览器可视区域高度\n    const clientWidth = document.documentElement.clientWidth;\n    // 浏览器可视区域宽度\n    const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    const anchorWrapper = this.getElement(scrollEventCache.anchorWrapper);\n    const anchorList = anchorWrapper.querySelectorAll(\"[id]\");\n    scrollEventCache.anchorList = [];\n    anchorList.forEach(item => {\n      // 获取元素相对于视口的位置\n      const rect = item.getBoundingClientRect();\n      if (isInitRecord) {\n        initAnchorListData[item.getAttribute(\"id\")] = {\n          top: rect.top,\n          bottom: rect.bottom\n        };\n      }\n      const targetItem = isInitRecord ? rect : initAnchor[item.getAttribute(\"id\")];\n      if (targetItem) {\n        // 是否满足上报条件\n        const reportCondition = rect.top < clientHeight && rect.bottom > 1 && rect.left < clientWidth && rect.right > 0;\n        const distanceCondition = Math.abs(nowScrollTop - targetItem.top) <= scrollEventCache.scrollDistance || Math.abs(nowScrollTop - targetItem.bottom) <= scrollEventCache.scrollDistance;\n        if (reportCondition && distanceCondition) {\n          // 滚动到两个锚点之间，超过这个距离就上报\n          scrollEventCache.anchorList.push(item.getAttribute(\"id\"));\n        }\n      }\n    });\n    if (isInitRecord) {\n      scrollEventCache.initAnchor = initAnchorListData;\n    }\n    this.setScrollEventCache(scrollEventCache);\n  }\n  reportScrollEvent(param) {\n    this.scrollStart = true;\n    const scrollEventCache = this.getScrollEventCache();\n    const duration = new Date().getTime() - scrollEventCache.scrollTime;\n    if (duration > scrollEventCache.scrollThreshold * 1000) {\n      const scrollParam = this.getScrollParam(duration, param);\n      window.collectEvent(\"scroll\", scrollParam);\n    }\n  }\n  getCurrentUrl() {\n    if (this.routerObject) {\n      const routeInfo = this.getCurrentRouterInfo();\n      let path = routeInfo.path;\n      if (!routeInfo.path) {\n        path = this.getNowPath(routeInfo);\n      }\n      return path;\n    }\n    const pages = this.getCurrentPagesArr();\n    this.changeCurrentPage(pages);\n    let currentUrl = this.getCacheVisitUrl();\n    if (this.pages.length > 0) {\n      currentUrl = this.pages[0];\n    } else {\n      //  如果currentPage 为空数组，那就去循环路由数组，是否部分路由是包含于完整路由的\n      const routerArr = this.routerInfo;\n      const nowFullPath = window.location.href;\n      routerArr.forEach(item => {\n        if (nowFullPath.indexOf(item.path) > -1) {\n          currentUrl = \"/\" + item.path;\n        }\n      });\n    }\n    // 如果没有任何匹配的，那就是首页\n    if (!currentUrl) {\n      currentUrl = \"/\" + this.routerInfo[0].path;\n    }\n    return currentUrl;\n  }\n\n  /**\n   * 获取上报y轴滚动的参数\n   */\n  getScrollParam(duration, extraParams) {\n    const scrollEventCache = this.getScrollEventCache();\n    const anchorList = scrollEventCache.anchorList;\n    const anchorName = [];\n    if (anchorList && anchorList.length) {\n      anchorList.map(item => {\n        const dom = document.getElementById(item);\n        if (dom) {\n          anchorName.push(dom.innerText);\n        }\n      });\n    }\n    const scrollParam = {\n      custom_page_duration: duration,\n      // 停留时长\n      scrollTop: scrollEventCache.scrollTop,\n      // y轴坐标\n      anchorName: anchorName,\n      // 经过的锚点\n      ...extraParams\n    };\n    const router = this.getCurrentRouterInfo();\n    const commonParam = this.getEventParam(scrollParam, router.path, false, router);\n    return commonParam;\n  }\n\n  /**\n   * 获取所有事件需要上报的参数\n   * @param {*} param 用户自定义参数\n   * @param {*} path 页面路径\n   * @param {*} isPageview 是否是要上报custom_pageview 事件\n   * @param {*} router 页面路由 仅限PC 端\n   * @returns\n   */\n  getEventParam(param, path, isPageview, router) {\n    const commonAttr = this.getCommonAttr(path);\n    let durationParam = {};\n    if (isPageview) {\n      const lastPageVisitTime = this.getCacheTime();\n      const nowTime = new Date().getTime();\n      durationParam = {\n        custom_page_duration: nowTime - lastPageVisitTime\n      };\n      this.setCacheTime(nowTime);\n    }\n    if (router && router.meta) {\n      commonAttr[\"custom_page_title\"] = router.meta.pageName;\n      commonAttr[\"sub_app_name\"] = router.meta.subAppName || this.nullProp;\n    }\n    commonAttr[\"custom_page_url\"] = this.getCacheVisitWebUrl();\n    if (!commonAttr[\"custom_page_title\"]) {\n      const htmlTitle = this.getCacheOldRouterTitle();\n      commonAttr[\"custom_page_title\"] = htmlTitle;\n    }\n    if (!commonAttr[\"custom_page_url_path\"]) {\n      commonAttr[\"custom_page_url_path\"] = path;\n    }\n    const versionInfo = this.getVersionInfo();\n    const webRouterMeta = {};\n    if (this.routerObject) {\n      const webRouterMetaKeys = Object.keys(router.meta);\n      webRouterMetaKeys.forEach(item => {\n        const volcengineFinalKey = item.replace(/[A-Z]/g, key => `_${key.toLowerCase()}`);\n        webRouterMeta[volcengineFinalKey] = router.meta[item];\n      });\n    }\n    const oldFullUrlPath = this.getCacheVisitWebUrl();\n    const sourceObject = this.getFromQueryNameContent(oldFullUrlPath);\n    const eventParams = {\n      ...commonAttr,\n      ...durationParam,\n      ...versionInfo,\n      ...sourceObject,\n      ...webRouterMeta,\n      ...param\n    };\n    try {\n      let plusCacheParam = {\n        ...commonAttr,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta\n      };\n      if (isPageview) {\n        plusCacheParam = {\n          ...plusCacheParam,\n          ...param\n        };\n      }\n      this.setWebviewCache(plusCacheParam);\n    } catch (e) {}\n    return eventParams;\n  }\n\n  /**\n   * 判断监听滚动的初始化参数是否符合要求\n   * @param {*} initParam  初始化参数\n   * @returns bool\n   */\n  checkScrollInitParams(initParam) {\n    let isValid = true;\n    if (!this.isPC) {\n      isValid = false;\n      console.warn(\"监听滚动失败，非PC端\");\n    }\n    const anchorWrapper = this.getElement(initParam.anchorWrapper);\n    if (!anchorWrapper) {\n      isValid = false;\n      console.warn(\"监听滚动失败，非HTMLElement\");\n    }\n    const orginThreshold = initParam.threshold || 0;\n    const threshold = typeof orginThreshold === \"string\" ? parseFloat(orginThreshold) : orginThreshold;\n    if (!_.isFinite(threshold)) {\n      isValid = false;\n      console.warn(\"监听滚动失败，秒数参数非Number类型\");\n    }\n    const originDistance = initParam.distance || 400;\n    const scrollDistance = typeof originDistance === \"string\" ? parseFloat(originDistance) : originDistance;\n    if (!_.isFinite(scrollDistance)) {\n      isValid = false;\n      console.warn(\"监听滚动失败，滚动阈值参数非Number类型\");\n    }\n    const extraParams = initParam.extraParams || {};\n    if (!_.isObject(extraParams)) {\n      isValid = false;\n      console.warn(\"监听滚动失败，额外参数非Object类型\");\n    }\n    if (isValid) {\n      const scrollEventCache = this.getScrollEventCache();\n      scrollEventCache.scrollDistance = scrollDistance;\n      scrollEventCache.anchorWrapper = initParam.anchorWrapper;\n      scrollEventCache.scrollThreshold = threshold;\n      this.setScrollEventCache(scrollEventCache);\n    }\n    return isValid;\n  }\n  /**\n   * 获取dom 元素\n   * @param {*} el dom 元素 或 css 选择器\n   * @returns dom 元素\n   */\n  getElement(el) {\n    if (el === \"\") {\n      return document.body; // 如果什么都不传的话，就是默认为body\n    }\n\n    const element = typeof el === \"string\" ? document.querySelector(el) : el;\n    return _.isElement(element) ? element : false;\n  }\n  handleFirstSrcoll() {\n    const scrollEventCache = this.getScrollEventCache();\n    if (!scrollEventCache.initAnchor || _.isEmpty(scrollEventCache.initAnchor)) {\n      this.recordScrollParam();\n    }\n  }\n}","map":{"version":3,"names":["_","$router","Volcengine","WebVolcengine","constructor","params","type","routerObject","isCustomPageviewOpen","customPageviewOpenParam","afterEachRouter","isPC","routerInfo","UNI_ROUTES","pages","tarBar","list","getCurrentPagesArr","changeCurrentPage","e","currentRouterObject","history","current","handelRouterObject","start","init","initScroll","scrollStart","scrollEventCache","getScrollEventCache","scrollParam","isEmpty","isInited","scrollTime","Date","getTime","scrollTop","anchorList","param","scrollTimeClear","setScrollEventCache","listenRouter","afterEach","to","from","setCacheOldRouterTitle","document","title","afterGetWebPath","that","setTimeout","reportScrollEvent","initAnchor","setAnchorList","path","meta","query","setCurrentRouterInfo","reportPageView","isEmptyObject","isObject","onchange","now","old","listenVisibilityChange","listenScroll","isValid","checkScrollInitParams","body","onscroll","handleFirstSrcoll","extraParams","scrollCache","clearTimeout","documentElement","onScrollEnd","olderRouter","nowRouter","lastVisitUrl","getCacheVisitUrl","nowPath","fullPath","oldPath","volcengineProps","updateRouter","finalParam","getEventParam","window","collectEvent","setCacheVisitUrl","setCacheVisitWebUrl","location","href","customPageviewOpen","currentUrl","getCurrentUrl","nowTime","setCacheTime","customPageviewHide","agent","navigator","userAgent","isIOS","match","plus","commonAttr","pageviewParam","router","recordScrollParam","afterReportEvent","reportEventName","reportEventParam","getCurrentRouterInfo","pageName","getCacheOldRouterTitle","setUserUniqueId","paramUserUniqueId","userUniqueId","nullProp","user_unique_id","collectApi","collectApiTask","routeInfo","apiRequestParam","api_name","apiName","is_success","isSuccess","api_time_cost","apiTimeCost","custom_page_title","custom_page_url","reportEvent","name","profileSet","profileParam","sdkVersionProfileSet","sdkVersion","getSdkVersion","appVersionProfileSet","appVersion","getAppVersion","route","substring","length","nowScrollTop","isScrollEnd","addEventListener","event","isHidden","visibilityState","handlePageViewCloseByWeb","handlePageViewHideByWeb","handleReportScrollEvent","resetScrollDurationTime","pageviewHideParam","isInitRecord","initAnchorListData","clientHeight","clientWidth","anchorWrapper","getElement","querySelectorAll","forEach","item","rect","getBoundingClientRect","getAttribute","top","bottom","targetItem","reportCondition","left","right","distanceCondition","Math","abs","scrollDistance","push","duration","scrollThreshold","getScrollParam","getNowPath","routerArr","nowFullPath","indexOf","anchorName","map","dom","getElementById","innerText","custom_page_duration","commonParam","isPageview","getCommonAttr","durationParam","lastPageVisitTime","getCacheTime","subAppName","getCacheVisitWebUrl","htmlTitle","versionInfo","getVersionInfo","webRouterMeta","webRouterMetaKeys","Object","keys","volcengineFinalKey","replace","key","toLowerCase","oldFullUrlPath","sourceObject","getFromQueryNameContent","eventParams","plusCacheParam","setWebviewCache","initParam","console","warn","orginThreshold","threshold","parseFloat","isFinite","originDistance","distance","el","element","querySelector","isElement"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/node_modules/@cndinfo/cube-analytics-sdk/web/index.js"],"sourcesContent":["import _ from \"lodash\"\nimport $router from \"../common/uni-router\"\nimport { Volcengine } from \"../common\"\nexport default class WebVolcengine extends Volcengine {\n  constructor(params) {\n    if (!params) {\n      params = {}\n    }\n    params.type = 1\n    // 表示是web 端的SDK\n    super(params)\n    this.routerObject = null\n    // web的vue-router 对象，默认为空\n    this.isCustomPageviewOpen = false\n    // 是否触发了PC端 custom_pageview_open 乾坤框架下，只能采取这样的方式上报 custom_pageview_open\n    this.customPageviewOpenParam = null\n    // PC端 custom_pageview_open 事件携带的参数\n    this.afterEachRouter = null\n    this.isPC = false\n\n    try {\n      // H5\n      this.routerInfo = UNI_ROUTES.pages\n      this.tarBar = UNI_ROUTES.tarBar ? UNI_ROUTES.tarBar.list : []\n      const pages = this.getCurrentPagesArr()\n      this.changeCurrentPage(pages)\n    } catch (e) {\n      // pc执行\n      this.routerInfo = []\n      this.tarBar = []\n      if (params.routerObject) {\n        const routerObject = params.routerObject\n        const currentRouterObject = routerObject.history.current\n        this.handelRouterObject(currentRouterObject)\n        this.routerObject = routerObject\n      }\n      this.isPC = true\n    }\n  }\n\n  start() {\n    this.init(this.routerInfo, this.tarBar)\n  }\n\n  /**\n   * 初始化滚动上报的相关参数\n   */\n  initScroll() {\n    // y轴滚动条是否开始滚动\n    this.scrollStart = false\n    const scrollEventCache = this.getScrollEventCache()\n    let scrollParam\n    if (_.isEmpty(scrollEventCache) || !scrollEventCache.isInited) {\n      scrollParam = {\n        scrollTime: new Date().getTime(),\n        scrollTop: 0,\n        anchorList: [],\n        isInited: true\n      }\n    }\n    const param = {\n      ...scrollEventCache,\n      ...scrollParam\n    }\n    this.scrollTimeClear = null // 滚动事件的定时器\n    this.setScrollEventCache(param)\n  }\n\n  /**\n   * 监听路由的变化\n   * @param {*} param 开发者自定义上报的参数\n   * @returns\n   */\n  listenRouter(param) {\n    if (this.isPC) {\n      if (!this.routerObject) {\n        return\n      }\n      this.routerObject.afterEach((to, from) => {\n        if (this.isCustomPageviewOpen) {\n          this.setCacheOldRouterTitle(document.title)\n          this.afterGetWebPath(to)\n          // 处理 custom_pageview_open 事件\n        }\n        const scrollEventCache = this.getScrollEventCache()\n        if (!_.isEmpty(scrollEventCache) && scrollEventCache.isInited) {\n          const that = this\n          setTimeout(() => {\n            that.reportScrollEvent()\n            scrollEventCache.scrollTime = new Date().getTime()\n            scrollEventCache.initAnchor = {}\n            that.setScrollEventCache(scrollEventCache)\n            that.scrollStart = false\n            that.setAnchorList()\n          }, 1000)\n        }\n        const routerInfo = {\n          path: to.path,\n          meta: to.meta,\n          query: to.query,\n          params: to.params\n        }\n        this.setCurrentRouterInfo(routerInfo)\n        this.reportPageView(param, from, to)\n        this.setCacheOldRouterTitle(document.title)\n      })\n    } else {\n      const isEmptyObject = !_.isObject(param)\n      if (isEmptyObject) {\n        param = {}\n      }\n      $router.onchange = (now, old) => {\n        this.reportPageView(param, old, now)\n      }\n    }\n    // 监听页面隐藏事件 页面关闭的时候同样也会触发\n    this.listenVisibilityChange(param)\n  }\n\n  /**\n   * 监听滚动的变化\n   * @param {*} param 开发者自定义上报的参数\n   */\n  listenScroll(param) {\n    try {\n      const isValid = this.checkScrollInitParams(param)\n      if (!isValid) {\n        return\n      }\n      this.initScroll()\n      document.body.onscroll = () => {\n        // 监听浏览器滚动事件( onscroll )\n        // 事件触发的时候获取当前的scrollTop( this.scrollTop )，执行onScrollEnd函数(延迟500 )\n        // 在执行onScrollEnd函数的时候再获取当前的scrollTop( nowScrollTop )\n        // 拿当前的scrollTop与延时500毫秒之前的scrollTop进行比较，看是否相等，相等的话说明滚动条停止了滚动\n        if (!this.scrollStart) {\n          this.handleFirstSrcoll() // 滚动开始之前调用方法\n          const extraParams = param.extraParams ? param.extraParams : {}\n          this.reportScrollEvent(extraParams)\n          const scrollCache = this.getScrollEventCache()\n          scrollCache.scrollTime = 0 // 上报完成之后重置时间，下次记录的时间为：滚动结束之后\n          scrollCache.anchorList = [] // 上报完成之后重置经过的锚点 下次记录的时间为：滚动结束之后\n          this.setScrollEventCache(scrollCache)\n        }\n        if (this.scrollTimeClear) {\n          clearTimeout(this.scrollTimeClear)\n        }\n        const scrollEventCache = this.getScrollEventCache()\n        scrollEventCache.scrollTop = document.documentElement.scrollTop\n        this.setScrollEventCache(scrollEventCache)\n        this.scrollTimeClear = setTimeout(() => {\n          this.onScrollEnd()\n        }, 500)\n      }\n    } catch (e) {\n\n    }\n  }\n\n  /**\n   *\n   * @param {*} param 自定义参数\n   * @param {*} olderRouter 之前的旧路由\n   * @param {*} nowRouter 当前路由\n   * @returns\n   */\n  reportPageView(param, olderRouter, nowRouter) {\n    try {\n      const lastVisitUrl = this.getCacheVisitUrl()\n      let nowPath = nowRouter.fullPath\n      let oldPath = olderRouter.fullPath\n      if (this.routerObject) {\n        nowPath = nowRouter.path\n        oldPath = olderRouter.path\n      }\n      if (lastVisitUrl === nowPath) {\n        return\n      }\n      if (!this.volcengineProps[oldPath]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const finalParam = this.getEventParam(param, oldPath, true, olderRouter)\n      window.collectEvent(\"custom_pageview\", finalParam)\n      this.setCacheVisitUrl(nowPath)\n      this.setCacheVisitWebUrl(window.location.href)\n    } catch (e) {}\n  }\n\n  /**\n   * 监听用户进入页面的事件\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewOpen(param) {\n    if (this.routerObject) {\n      this.customPageviewOpenParam = param\n      this.isCustomPageviewOpen = true\n      return\n    }\n    if (!_.isObject(param)) {\n      param = {}\n    }\n    try {\n      const currentUrl = this.getCurrentUrl() // 获取当前的页面路径\n      const nowTime = new Date().getTime()\n      this.setCacheTime(nowTime) // 重新记录页面停留时间\n      this.setCacheVisitUrl(currentUrl)\n      this.setCacheVisitWebUrl(window.location.href)\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const finalParam = this.getEventParam(param, currentUrl, false, {})\n      window.collectEvent(\"custom_pageview_open\", finalParam)\n    } catch (e) {\n    }\n  }\n\n  /**\n   * 监听H5用户隐藏页面的事件 (PC端通过对 visibilityChange 事件的监听来实现)\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewHide(param) {\n    if (this.routerObject) {\n      return\n    }\n    if (!_.isObject(param)) {\n      param = {}\n    }\n    // 如果是iOS的webview 则不触发\n    try {\n      const agent = window.navigator.userAgent\n      const isIOS = agent.match(/(iphone os)/i) // iOS终端\n      if (plus && isIOS) {\n        return\n      }\n    } catch (e) {\n    }\n    try {\n      const pages = this.getCurrentPagesArr()\n      this.changeCurrentPage(pages)\n      const currentUrl = this.getCurrentUrl()\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const commonAttr = this.getEventParam(param, currentUrl, false, {})\n      window.collectEvent(\"custom_pageview_hide\", commonAttr)\n      // 上报当前页面的停留时间，然后onShow的时候会重新改写当前页面访问时间\n      this.setCacheVisitUrl(currentUrl)\n      this.setCacheVisitWebUrl(window.location.href)\n      const pageviewParam = this.getEventParam(param, currentUrl, true, {})\n      window.collectEvent(\"custom_pageview\", pageviewParam)\n    } catch (e) {\n    }\n  }\n\n  afterGetWebPath(router) {\n    try {\n      const nowTime = new Date().getTime()\n      this.setCacheTime(nowTime) // 重新记录页面停留时间\n      this.setCacheVisitUrl(router.path)\n      this.setCacheVisitWebUrl(window.location.href)\n      const currentUrl = router.path\n      const commonAttr = this.getEventParam(\n        this.customPageviewOpenParam,\n        currentUrl,\n        false,\n        router\n      )\n      window.collectEvent(\"custom_pageview_open\", commonAttr)\n      this.customPageviewOpenParam = null\n      this.isCustomPageviewOpen = false\n      const routerInfo = {\n        path: router.path,\n        meta: router.meta,\n        query: router.query,\n        params: router.params\n      }\n      this.setCurrentRouterInfo(routerInfo)\n      const scrollEventCache = this.getScrollEventCache()\n      if (!_.isEmpty(scrollEventCache)) {\n        const that = this\n        setTimeout(\n          function() {\n            that.recordScrollParam()\n          }, 1000)\n      }\n    } catch (e) {}\n  }\n\n  afterReportEvent(reportEventName, reportEventParam) {\n    try {\n      const router = this.getCurrentRouterInfo()\n      const meta = router.meta\n      const title = meta ? meta.pageName || document.title : document.title\n      const commonAttr = this.getEventParam(\n        reportEventParam,\n        router.path,\n        false,\n        router\n      )\n      commonAttr['custom_page_url'] = window.location.href\n      commonAttr['custom_page_url_path'] = router.path\n      if(!reportEventParam['custom_page_title']) {\n        commonAttr['custom_page_title'] = reportEventName === 'sidebar_item_click'? this.getCacheOldRouterTitle():title\n      }\n      window.collectEvent(reportEventName, commonAttr)\n    } catch (e) {}\n  }\n\n  // 设置用户Id\n\n  setUserUniqueId(paramUserUniqueId) {\n    const userUniqueId = paramUserUniqueId || this.nullProp\n    try {\n      window.collectEvent(\"config\", {\n        user_unique_id: userUniqueId\n      })\n    } catch (e) {}\n  }\n  collectApi(param) {\n    const that = this\n    setTimeout(() => {\n      that.collectApiTask(param)\n    }, 500)\n  }\n  // 接口请求上报\n  collectApiTask(param) {\n    try {\n      const routeInfo = this.getCurrentRouterInfo()\n      const meta = routeInfo.meta\n      const title = meta ? meta.pageName || document.title : document.title\n      const currentUrl = this.getCurrentUrl()\n      this.setCacheVisitUrl(currentUrl)\n\n      const apiRequestParam = {\n        api_name: param.apiName,\n        is_success: param.isSuccess,\n        api_time_cost: param.apiTimeCost,\n        custom_page_title: title,\n        custom_page_url: window.location.href\n      }\n\n      const commonAttr = this.getEventParam(\n        apiRequestParam,\n        currentUrl,\n        false,\n        routeInfo\n      )\n      delete param.apiName\n      delete param.isSuccess\n      delete param.apiTimeCost\n\n      const finalParam = {\n        ...commonAttr,\n        ...param\n      }\n      window.collectEvent(\"api_request\", finalParam)\n    } catch (e) {}\n  }\n\n  reportEvent(name, param) {\n    if (this.routerObject) {\n      this.afterReportEvent(name, param)\n      return\n    }\n    const currentUrl = this.getCurrentUrl()\n    this.setCacheVisitUrl(currentUrl)\n    const finalParam = this.getEventParam(param, currentUrl, false, {})\n    try {\n      window.collectEvent(name, finalParam)\n    } catch (e) {}\n  }\n\n  /**\n   * 上报用户属性\n   * @param {*} profileParam 用户属性组成的对象\n   */\n  profileSet(profileParam) {\n    try {\n      window.collectEvent(\"profileSet\", profileParam)\n    } catch (e) {}\n  }\n\n  sdkVersionProfileSet(param) {\n    try {\n      const sdkVersion = this.getSdkVersion()\n      const finalParam = {\n        ...param,\n        ...sdkVersion\n      }\n      this.profileSet(finalParam)\n    } catch (e) {}\n  }\n\n  appVersionProfileSet(param) {\n    try {\n      const appVersion = this.getAppVersion()\n      const finalParam = {\n        ...param,\n        ...appVersion\n      }\n      this.profileSet(finalParam)\n    } catch (e) {}\n  }\n\n  handelRouterObject(routerObject) {\n    try {\n      const route = routerObject.path\n      const meta = routerObject.meta\n      const path = route.substring(1, route.length)\n      this.routerInfo = [\n        {\n          path,\n          meta\n        }\n      ]\n      this.changeCurrentPage([route])\n    } catch (e) {}\n  }\n  /**\n   * 滚动结束的时候触发\n   */\n  onScrollEnd() {\n    const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop\n    const scrollEventCache = this.getScrollEventCache()\n    const isScrollEnd = nowScrollTop === scrollEventCache.scrollTop\n    // 是否滚动结束了\n    if (isScrollEnd) {\n      this.recordScrollParam()\n    }\n  }\n\n  listenVisibilityChange(param) {\n    const that = this\n    try {\n      window.addEventListener(\"visibilitychange\", (event) => {\n        const isHidden = document.visibilityState === \"hidden\"\n        if (that.routerObject) {\n          if (isHidden) {\n            const router = that.getCurrentRouterInfo()\n            that.handlePageViewCloseByWeb(router, param)\n            that.handlePageViewHideByWeb(router, param)\n            that.handleReportScrollEvent()\n          } else {\n            const nowTime = new Date().getTime()\n            this.setCacheTime(nowTime)\n            // 重置滚动条停留时间\n            this.resetScrollDurationTime(nowTime)\n          }\n        }\n      })\n    } catch (e) {}\n  }\n\n  // 上报滚动条页面停留事件\n  handleReportScrollEvent() {\n    const scrollEventCache = this.getScrollEventCache()\n    if (!_.isEmpty(scrollEventCache)) {\n      this.reportScrollEvent()\n      this.scrollStart = false\n    // 滚动没有开始，只是隐藏的时候上报停留事件\n    }\n  }\n\n  // 重置滚动条的开始停留时间\n  resetScrollDurationTime(nowTime) {\n    const scrollEventCache = this.getScrollEventCache()\n    if (!_.isEmpty(scrollEventCache)) {\n      scrollEventCache.scrollTime = nowTime\n      this.setScrollEventCache(scrollEventCache)\n    }\n  }\n\n  handlePageViewCloseByWeb(router, param) {\n    this.setCacheVisitUrl(router.path)\n    this.setCacheVisitWebUrl(window.location.href)\n    const commonAttr = this.getEventParam(param, router.path, true, router)\n    window.collectEvent(\"custom_pageview\", commonAttr)\n  }\n\n  handlePageViewHideByWeb(router, param) {\n    const pageviewHideParam = this.getEventParam(\n      param,\n      router.path,\n      false,\n      router\n    )\n    window.collectEvent(\"custom_pageview_hide\", pageviewHideParam)\n  }\n\n  recordScrollParam() {\n    this.scrollStart = false // 此次滚动属于结束状态\n    const scrollEventCache = this.getScrollEventCache()\n    scrollEventCache.scrollTime = new Date().getTime()\n    this.setScrollEventCache(scrollEventCache)\n    this.setAnchorList()\n  }\n\n  setAnchorList() {\n    const scrollEventCache = this.getScrollEventCache()\n    const initAnchor = scrollEventCache.initAnchor || {}\n    const isInitRecord = (!initAnchor || _.isEmpty(initAnchor))\n    const initAnchorListData = {}\n    const clientHeight = document.documentElement.clientHeight\n    // 浏览器可视区域高度\n    const clientWidth = document.documentElement.clientWidth\n    // 浏览器可视区域宽度\n    const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop\n    const anchorWrapper = this.getElement(scrollEventCache.anchorWrapper)\n    const anchorList = anchorWrapper.querySelectorAll(\"[id]\")\n    scrollEventCache.anchorList = []\n    anchorList.forEach((item) => {\n      // 获取元素相对于视口的位置\n      const rect = item.getBoundingClientRect()\n      if (isInitRecord) {\n        initAnchorListData[item.getAttribute(\"id\")] = {\n          top: rect.top,\n          bottom: rect.bottom\n        }\n      }\n      const targetItem = isInitRecord ? rect : initAnchor[item.getAttribute(\"id\")]\n      if (targetItem) {\n        // 是否满足上报条件\n        const reportCondition = (rect.top < clientHeight && rect.bottom > 1 && rect.left < clientWidth && rect.right > 0)\n        const distanceCondition = Math.abs(nowScrollTop - targetItem.top) <= scrollEventCache.scrollDistance || Math.abs(nowScrollTop - targetItem.bottom) <= scrollEventCache.scrollDistance\n        if (reportCondition && distanceCondition) {\n        // 滚动到两个锚点之间，超过这个距离就上报\n          scrollEventCache.anchorList.push(item.getAttribute(\"id\"))\n        }\n      }\n    })\n    if (isInitRecord) {\n      scrollEventCache.initAnchor = initAnchorListData\n    }\n    this.setScrollEventCache(scrollEventCache)\n  }\n\n  reportScrollEvent(param) {\n    this.scrollStart = true\n    const scrollEventCache = this.getScrollEventCache()\n    const duration = new Date().getTime() - scrollEventCache.scrollTime\n    if (duration > scrollEventCache.scrollThreshold * 1000) {\n      const scrollParam = this.getScrollParam(duration, param)\n      window.collectEvent(\"scroll\", scrollParam)\n    }\n  }\n\n  getCurrentUrl() {\n    if (this.routerObject) {\n      const routeInfo = this.getCurrentRouterInfo()\n      let path = routeInfo.path\n      if (!routeInfo.path) {\n        path = this.getNowPath(routeInfo)\n      }\n      return path\n    }\n    const pages = this.getCurrentPagesArr()\n    this.changeCurrentPage(pages)\n    let currentUrl = this.getCacheVisitUrl()\n    if (this.pages.length > 0) {\n      currentUrl = this.pages[0]\n    } else {\n      //  如果currentPage 为空数组，那就去循环路由数组，是否部分路由是包含于完整路由的\n      const routerArr = this.routerInfo\n      const nowFullPath = window.location.href\n      routerArr.forEach((item) => {\n        if (nowFullPath.indexOf(item.path) > -1) {\n          currentUrl = \"/\" + item.path\n        }\n      })\n    }\n    // 如果没有任何匹配的，那就是首页\n    if (!currentUrl) {\n      currentUrl = \"/\" + this.routerInfo[0].path\n    }\n    return currentUrl\n  }\n\n  /**\n   * 获取上报y轴滚动的参数\n   */\n  getScrollParam(duration, extraParams) {\n    const scrollEventCache = this.getScrollEventCache()\n    const anchorList = scrollEventCache.anchorList\n    const anchorName = []\n    if (anchorList && anchorList.length) {\n      anchorList.map((item) => {\n        const dom = document.getElementById(item)\n        if (dom) {\n          anchorName.push(dom.innerText)\n        }\n      })\n    }\n    const scrollParam = {\n      custom_page_duration: duration, // 停留时长\n      scrollTop: scrollEventCache.scrollTop, // y轴坐标\n      anchorName: anchorName, // 经过的锚点\n      ...extraParams\n    }\n    const router = this.getCurrentRouterInfo()\n    const commonParam = this.getEventParam(scrollParam, router.path, false, router)\n    return commonParam\n  }\n\n  /**\n   * 获取所有事件需要上报的参数\n   * @param {*} param 用户自定义参数\n   * @param {*} path 页面路径\n   * @param {*} isPageview 是否是要上报custom_pageview 事件\n   * @param {*} router 页面路由 仅限PC 端\n   * @returns\n   */\n  getEventParam(param, path, isPageview, router) {\n    const commonAttr = this.getCommonAttr(path)\n    let durationParam = {}\n    if (isPageview) {\n      const lastPageVisitTime = this.getCacheTime()\n      const nowTime = new Date().getTime()\n      durationParam = {\n        custom_page_duration: nowTime - lastPageVisitTime\n      }\n      this.setCacheTime(nowTime)\n    }\n    if (router && router.meta) {\n      commonAttr[\"custom_page_title\"] = router.meta.pageName\n\n      commonAttr[\"sub_app_name\"] = router.meta.subAppName || this.nullProp\n    }\n    commonAttr[\"custom_page_url\"] = this.getCacheVisitWebUrl()\n    if (!commonAttr[\"custom_page_title\"]) {\n      const htmlTitle = this.getCacheOldRouterTitle()\n      commonAttr[\"custom_page_title\"] = htmlTitle\n    }\n    if (!commonAttr[\"custom_page_url_path\"]) {\n      commonAttr[\"custom_page_url_path\"] = path\n    }\n    const versionInfo = this.getVersionInfo()\n    const webRouterMeta = {}\n    if (this.routerObject) {\n      const webRouterMetaKeys = Object.keys(router.meta)\n      webRouterMetaKeys.forEach((item) => {\n        const volcengineFinalKey = item.replace(\n          /[A-Z]/g,\n          (key) => `_${key.toLowerCase()}`\n        )\n        webRouterMeta[volcengineFinalKey] = router.meta[item]\n      })\n    }\n    const oldFullUrlPath = this.getCacheVisitWebUrl()\n    const sourceObject = this.getFromQueryNameContent(oldFullUrlPath)\n    const eventParams = {\n      ...commonAttr,\n      ...durationParam,\n      ...versionInfo,\n      ...sourceObject,\n      ...webRouterMeta,\n      ...param\n    }\n    try {\n      let plusCacheParam = {\n        ...commonAttr,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta\n      }\n      if (isPageview) {\n        plusCacheParam = {\n          ...plusCacheParam,\n          ...param\n        }\n      }\n      this.setWebviewCache(plusCacheParam)\n    } catch (e) {\n    }\n    return eventParams\n  }\n\n  /**\n   * 判断监听滚动的初始化参数是否符合要求\n   * @param {*} initParam  初始化参数\n   * @returns bool\n   */\n  checkScrollInitParams(initParam) {\n    let isValid = true\n    if (!this.isPC) {\n      isValid = false\n      console.warn(\"监听滚动失败，非PC端\")\n    }\n    const anchorWrapper = this.getElement(initParam.anchorWrapper)\n    if (!anchorWrapper) {\n      isValid = false\n      console.warn(\"监听滚动失败，非HTMLElement\")\n    }\n    const orginThreshold = initParam.threshold || 0\n    const threshold = typeof orginThreshold === \"string\" ? parseFloat(orginThreshold) : orginThreshold\n    if (!_.isFinite(threshold)) {\n      isValid = false\n      console.warn(\"监听滚动失败，秒数参数非Number类型\")\n    }\n    const originDistance = initParam.distance || 400\n    const scrollDistance = typeof originDistance === \"string\" ? parseFloat(originDistance) : originDistance\n    if (!_.isFinite(scrollDistance)) {\n      isValid = false\n      console.warn(\"监听滚动失败，滚动阈值参数非Number类型\")\n    }\n    const extraParams = initParam.extraParams || {}\n    if (!_.isObject(extraParams)) {\n      isValid = false\n      console.warn(\"监听滚动失败，额外参数非Object类型\")\n    }\n    if (isValid) {\n      const scrollEventCache = this.getScrollEventCache()\n      scrollEventCache.scrollDistance = scrollDistance\n      scrollEventCache.anchorWrapper = initParam.anchorWrapper\n      scrollEventCache.scrollThreshold = threshold\n      this.setScrollEventCache(scrollEventCache)\n    }\n    return isValid\n  }\n  /**\n   * 获取dom 元素\n   * @param {*} el dom 元素 或 css 选择器\n   * @returns dom 元素\n   */\n  getElement(el) {\n    if (el === \"\") {\n      return document.body // 如果什么都不传的话，就是默认为body\n    }\n    const element = typeof el === \"string\" ? document.querySelector(el) : el\n    return _.isElement(element) ? element : false\n  }\n\n  handleFirstSrcoll() {\n    const scrollEventCache = this.getScrollEventCache()\n    if (!scrollEventCache.initAnchor || _.isEmpty(scrollEventCache.initAnchor)) {\n      this.recordScrollParam()\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}