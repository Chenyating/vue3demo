{"ast":null,"code":"// // 弹框拖拽：移动、缩放\n// const drag = {\n//   bind: function(el, binding) {\n//     // console.log('el--', el)\n//     // console.log('binding.value--', binding.value)\n//     // console.log('binding.arg--', binding.arg)\n//     const dragType = binding.value || 'all'\n//     const dragDom = el.querySelector('.el-dialog')\n//     if (dragType === 'all') {\n//       move(dragDom, el)\n//       zoom(dragDom, el)\n//     } else if (dragType === 'move') {\n//       move(dragDom, el)\n//     } else if (dragType === 'zoom') {\n//       zoom(dragDom, el)\n//     }\n//   }\n// }\n\n// // 弹框移动\n// const move = function(dragDom, el) {\n//   // 移动\n//   const dialogHeaderEl = el.querySelector('.el-dialog__header')\n//   dialogHeaderEl.style.cssText += ';cursor:move;'\n//   dragDom.style.cssText += ';top:0px;'\n\n//   // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n//   const getStyle = (function() {\n//     if (window.document.currentStyle) {\n//       return (dom, attr) => dom.currentStyle[attr]\n//     } else {\n//       return (dom, attr) => getComputedStyle(dom, false)[attr]\n//     }\n//   })()\n\n//   dialogHeaderEl.onmousedown = (e) => {\n//     // 鼠标按下，计算当前元素距离可视区的距离\n//     const disX = e.clientX - dialogHeaderEl.offsetLeft\n//     const disY = e.clientY - dialogHeaderEl.offsetTop\n\n//     const dragDomWidth = dragDom.offsetWidth\n//     const dragDomHeight = dragDom.offsetHeight\n\n//     const screenWidth = document.body.clientWidth\n//     const screenHeight = document.body.clientHeight\n\n//     const minDragDomLeft = dragDom.offsetLeft\n//     const maxDragDomLeft = screenWidth - dragDom.offsetLeft - dragDomWidth\n\n//     const minDragDomTop = dragDom.offsetTop\n//     const maxDragDomTop = screenHeight - dragDom.offsetTop - dragDomHeight\n\n//     // 获取到的值带px 正则匹配替换\n//     let styL = getStyle(dragDom, 'left')\n//     let styT = getStyle(dragDom, 'top')\n\n//     if (styL.includes('%')) {\n//       styL = +document.body.clientWidth * (+styL.replace(/\\%/g, '') / 100)\n//       styT = +document.body.clientHeight * (+styT.replace(/\\%/g, '') / 100)\n//     } else {\n//       styL = +styL.replace(/\\px/g, '')\n//       styT = +styT.replace(/\\px/g, '')\n//     }\n\n//     document.onmousemove = function(e) {\n//       // 通过事件委托，计算移动的距离\n//       let left = e.clientX - disX\n//       let top = e.clientY - disY\n\n//       // 边界处理\n//       if (-(left) > minDragDomLeft) {\n//         left = -minDragDomLeft\n//       } else if (left > maxDragDomLeft) {\n//         left = maxDragDomLeft\n//       }\n\n//       if (-(top) > minDragDomTop) {\n//         top = -minDragDomTop\n//       } else if (top > maxDragDomTop) {\n//         top = maxDragDomTop\n//       }\n\n//       // 移动当前元素\n//       dragDom.style.cssText += `;left:${left + styL}px;top:${top + styT}px;`\n\n//       // emit onDrag event\n//       // vnode.child.$emit('dragDialog')\n//     }\n\n//     document.onmouseup = function(e) {\n//       document.onmousemove = null\n//       document.onmouseup = null\n//     }\n//   }\n// }\n\n// // 弹框缩放\n// const zoom = function(dragDom, el) {\n//   // 缩放\n//   // 弹框可拉伸最小宽高\n//   const minWidth = 50\n//   const minHeight = 50\n//   const resizeEl = document.createElement('div')\n//   dragDom.appendChild(resizeEl)\n//   // 在弹窗右下角加上一个10-10px的控制块\n//   resizeEl.style.cursor = 'se-resize'\n//   resizeEl.style.position = 'absolute'\n//   resizeEl.style.height = '10px'\n//   resizeEl.style.width = '10px'\n//   resizeEl.style.right = '0px'\n//   resizeEl.style.bottom = '0px'\n//   // 鼠标拉伸弹窗\n//   resizeEl.onmousedown = (e) => {\n//     // 记录初始x位置\n//     const clientX = e.clientX\n//     const clientY = e.clientY\n//     // 鼠标按下，计算当前元素距离可视区的距离\n//     const disX = e.clientX - resizeEl.offsetLeft\n//     const disY = e.clientY - resizeEl.offsetTop\n//     document.onmousemove = function(e) {\n//       e.preventDefault() // 移动时禁用默\n//       // 通过事件委托，计算移动的距离\n//       const x = e.clientX - disX + (e.clientX - clientX) / 2 // 这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\n//       const y = e.clientY - disY + (e.clientY - clientY) / 2\n//       // 比较是否小于最小宽高\n//       dragDom.style.width = x > minWidth ? `${x}px` : minWidth + 'px'\n//       dragDom.style.height = y > minHeight ? `${y}px` : minHeight + 'px'\n//       // 触发弹框resize事件\n//       const myEvent = new CustomEvent('dialogResize', {\n//         detail: {},\n//         bubbles: true,\n//         cancelable: false\n//       })\n//       window.dispatchEvent(myEvent)\n//     }\n//     // 拉伸结束\n//     document.onmouseup = function(e) {\n//       document.onmousemove = null\n//       document.onmouseup = null\n//     }\n//   }\n// }\n\n// export default drag\n\nexport default {\n  bind(el, binding, vnode, oldVnode) {\n    // 弹框可拉伸最小宽高\n    const minWidth = 50;\n    const minHeight = 50;\n    // 初始非全屏\n    let isFullScreen = false;\n    // 当前宽高\n    let nowWidth = 0;\n    // let nowHight = 0\n    // 当前顶部高度\n    let nowMarginTop = 0;\n    // 获取弹框头部（这部分可双击全屏）\n    const dialogHeaderEl = el.querySelector('.el-dialog__header');\n    const dialogHeaderBtnEl = el.querySelector('.el-dialog__headerbtn');\n    if (dialogHeaderBtnEl) {\n      dialogHeaderBtnEl.ondblclick = e => {\n        // 关闭按钮阻止双击冒泡事件\n        e.stopPropagation();\n      };\n    }\n    const dialogFooterEl = el.querySelector('.el-dialog__footer');\n    // const dialogBodyEl = el.querySelector('.el-dialog__body')\n    let hasSetBodyHight = false;\n    // 弹窗\n    const dragDom = el.querySelector('.el-dialog');\n    // 给弹窗加上overflow auto；不然缩小时框内的标签可能超出dialog；\n    // dragDom.style.overflow = \"auto\";\n    // 清除选择头部文字效果\n    dialogHeaderEl.onselectstart = new Function('return false');\n    // 头部加上可拖动cursor\n    dialogHeaderEl.style.cursor = 'move';\n\n    // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n    const sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);\n\n    // 头部插入最大化最小化元素\n    const maxMin = document.createElement('button');\n    maxMin.className += ' el-dialog__headerbtn el-dialog__minmax';\n    maxMin.style.right = '40px';\n    maxMin.style.color = '#909399';\n    maxMin.title = '最大化';\n    maxMin.innerHTML = '<i class=\"el-icon-full-screen\" onMouseOver=\"this.style.color=\\'#409EFF\\'\" onMouseOut=\"this.style.color=\\'inherit\\'\"></i>';\n    // dialogHeaderEl.insertBefore(maxMin,dialogHeaderEl.childNodes[1]);\n\n    const moveDown = e => {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      const disX = e.clientX - dialogHeaderEl.offsetLeft;\n      const disY = e.clientY - dialogHeaderEl.offsetTop;\n\n      // 获取到的值带px 正则匹配替换\n      let styL, styT;\n\n      // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n      if (sty.left.includes('%')) {\n        styL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);\n        styT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);\n      } else {\n        styL = +sty.left.replace(/\\px/g, '');\n        styT = +sty.top.replace(/\\px/g, '');\n      }\n      document.onmousemove = function (e) {\n        // 通过事件委托，计算移动的距离\n        const l = e.clientX - disX;\n        const t = e.clientY - disY;\n\n        // 移动当前元素\n        dragDom.style.left = `${l + styL}px`;\n        dragDom.style.top = `${t + styT}px`;\n\n        // 将此时的位置传出去\n        // binding.value({x:e.pageX,y:e.pageY})\n      };\n\n      document.onmouseup = function (e) {\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n    dialogHeaderEl.onmousedown = moveDown;\n    let bodyHeight = 'auto';\n    let moreHeight = 0;\n    function setMaxMin() {\n      if (isFullScreen === false) {\n        const i = maxMin.querySelector('.el-icon-full-screen');\n        i.classList.remove('el-icon-full-screen');\n        i.classList.add('el-icon-crop');\n        maxMin.title = '还原';\n        bodyHeight = `${dragDom.querySelector('.el-dialog__body').offsetHeight}px`;\n        // nowHight = dragDom.clientHeight\n        nowWidth = dragDom.clientWidth;\n        nowMarginTop = dragDom.style.marginTop;\n        dragDom.style.left = 0;\n        dragDom.style.top = 0;\n        dragDom.style.height = '100VH';\n        dragDom.style.width = '100VW';\n        dragDom.style.marginTop = 0;\n        isFullScreen = true;\n        dialogHeaderEl.style.cursor = 'initial';\n        dialogHeaderEl.onmousedown = null;\n        if (!hasSetBodyHight) {\n          moreHeight = Number(dialogHeaderEl.offsetHeight) + Number(dialogFooterEl ? dialogFooterEl.offsetHeight : 0);\n          dragDom.querySelector('.el-dialog__body').style.height = `calc(100% - ${moreHeight}px)`;\n          hasSetBodyHight = true;\n        }\n      } else {\n        const i = maxMin.querySelector('.el-icon-crop');\n        i.classList.remove('el-icon-crop');\n        i.classList.add('el-icon-full-screen');\n        maxMin.innerHTML = '<i class=\"el-icon-full-screen\"></i>';\n        maxMin.title = '最大化';\n        dragDom.style.height = 'auto';\n        dragDom.style.width = `${nowWidth}px`;\n        dragDom.style.marginTop = nowMarginTop;\n        isFullScreen = false;\n        dialogHeaderEl.style.cursor = 'move';\n        dialogHeaderEl.onmousedown = moveDown;\n        dragDom.querySelector('.el-dialog__body').style.height = bodyHeight;\n        hasSetBodyHight = false;\n      }\n    }\n    // 点击放大缩小效果\n    maxMin.onclick = setMaxMin;\n    // 双击头部效果\n    dialogHeaderEl.ondblclick = setMaxMin;\n\n    // 拉伸\n    const resizeEl = document.createElement('div');\n    dragDom.appendChild(resizeEl);\n    // 在弹窗右下角加上一个10-10px的控制块\n    resizeEl.style.cursor = 'se-resize';\n    resizeEl.style.position = 'absolute';\n    resizeEl.style.height = '10px';\n    resizeEl.style.width = '10px';\n    resizeEl.style.right = '0px';\n    resizeEl.style.bottom = '0px';\n    // 鼠标拉伸弹窗\n    resizeEl.onmousedown = e => {\n      // 记录初始x位置\n      const clientX = e.clientX;\n      // 鼠标按下，计算当前元素距离可视区的距离\n      const disX = e.clientX - resizeEl.offsetLeft;\n      const disY = e.clientY - resizeEl.offsetTop;\n      document.onmousemove = function (e) {\n        e.preventDefault(); // 移动时禁用默认事件\n        // 通过事件委托，计算移动的距离\n        const x = e.clientX - disX + (e.clientX - clientX); // 这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\n        const y = e.clientY - disY;\n        // 比较是否小于最小宽高\n        dragDom.style.width = x > minWidth ? `${x}px` : `${minWidth}px`;\n        dragDom.style.height = y > minHeight ? `${y}px` : `${minHeight}px`;\n        if (!hasSetBodyHight) {\n          moreHeight = Number(dialogHeaderEl.offsetHeight) + Number(dialogFooterEl ? dialogFooterEl.offsetHeight : 0);\n          dragDom.querySelector('.el-dialog__body').style.height = `calc(100% - ${moreHeight}px)`;\n          dragDom.querySelector('.el-dialog__body>div').style.height = '100%';\n          hasSetBodyHight = true;\n        }\n        // 触发弹框resize事件\n        const myEvent = new CustomEvent('dialogResize', {\n          detail: {},\n          bubbles: true,\n          cancelable: false,\n          e_target: e.target\n        });\n        window.dispatchEvent(myEvent);\n      };\n      // 拉伸结束\n      document.onmouseup = function (e) {\n        // 触发弹框拉伸结束\n        // const myEvent = new CustomEvent('dialogOnmouseup', {\n        //   detail: {},\n        //   bubbles: true,\n        //   cancelable: false,\n        //   e_target:e.target\n        // })\n        // window.dispatchEvent(myEvent)\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n  }\n};","map":{"version":3,"names":["bind","el","binding","vnode","oldVnode","minWidth","minHeight","isFullScreen","nowWidth","nowMarginTop","dialogHeaderEl","querySelector","dialogHeaderBtnEl","ondblclick","e","stopPropagation","dialogFooterEl","hasSetBodyHight","dragDom","onselectstart","Function","style","cursor","sty","currentStyle","window","getComputedStyle","maxMin","document","createElement","className","right","color","title","innerHTML","moveDown","disX","clientX","offsetLeft","disY","clientY","offsetTop","styL","styT","left","includes","body","clientWidth","replace","clientHeight","top","onmousemove","l","t","onmouseup","onmousedown","bodyHeight","moreHeight","setMaxMin","i","classList","remove","add","offsetHeight","marginTop","height","width","Number","onclick","resizeEl","appendChild","position","bottom","preventDefault","x","y","myEvent","CustomEvent","detail","bubbles","cancelable","e_target","target","dispatchEvent"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/src/directives/drag/drag.js"],"sourcesContent":["// // 弹框拖拽：移动、缩放\n// const drag = {\n//   bind: function(el, binding) {\n//     // console.log('el--', el)\n//     // console.log('binding.value--', binding.value)\n//     // console.log('binding.arg--', binding.arg)\n//     const dragType = binding.value || 'all'\n//     const dragDom = el.querySelector('.el-dialog')\n//     if (dragType === 'all') {\n//       move(dragDom, el)\n//       zoom(dragDom, el)\n//     } else if (dragType === 'move') {\n//       move(dragDom, el)\n//     } else if (dragType === 'zoom') {\n//       zoom(dragDom, el)\n//     }\n//   }\n// }\n\n// // 弹框移动\n// const move = function(dragDom, el) {\n//   // 移动\n//   const dialogHeaderEl = el.querySelector('.el-dialog__header')\n//   dialogHeaderEl.style.cssText += ';cursor:move;'\n//   dragDom.style.cssText += ';top:0px;'\n\n//   // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n//   const getStyle = (function() {\n//     if (window.document.currentStyle) {\n//       return (dom, attr) => dom.currentStyle[attr]\n//     } else {\n//       return (dom, attr) => getComputedStyle(dom, false)[attr]\n//     }\n//   })()\n\n//   dialogHeaderEl.onmousedown = (e) => {\n//     // 鼠标按下，计算当前元素距离可视区的距离\n//     const disX = e.clientX - dialogHeaderEl.offsetLeft\n//     const disY = e.clientY - dialogHeaderEl.offsetTop\n\n//     const dragDomWidth = dragDom.offsetWidth\n//     const dragDomHeight = dragDom.offsetHeight\n\n//     const screenWidth = document.body.clientWidth\n//     const screenHeight = document.body.clientHeight\n\n//     const minDragDomLeft = dragDom.offsetLeft\n//     const maxDragDomLeft = screenWidth - dragDom.offsetLeft - dragDomWidth\n\n//     const minDragDomTop = dragDom.offsetTop\n//     const maxDragDomTop = screenHeight - dragDom.offsetTop - dragDomHeight\n\n//     // 获取到的值带px 正则匹配替换\n//     let styL = getStyle(dragDom, 'left')\n//     let styT = getStyle(dragDom, 'top')\n\n//     if (styL.includes('%')) {\n//       styL = +document.body.clientWidth * (+styL.replace(/\\%/g, '') / 100)\n//       styT = +document.body.clientHeight * (+styT.replace(/\\%/g, '') / 100)\n//     } else {\n//       styL = +styL.replace(/\\px/g, '')\n//       styT = +styT.replace(/\\px/g, '')\n//     }\n\n//     document.onmousemove = function(e) {\n//       // 通过事件委托，计算移动的距离\n//       let left = e.clientX - disX\n//       let top = e.clientY - disY\n\n//       // 边界处理\n//       if (-(left) > minDragDomLeft) {\n//         left = -minDragDomLeft\n//       } else if (left > maxDragDomLeft) {\n//         left = maxDragDomLeft\n//       }\n\n//       if (-(top) > minDragDomTop) {\n//         top = -minDragDomTop\n//       } else if (top > maxDragDomTop) {\n//         top = maxDragDomTop\n//       }\n\n//       // 移动当前元素\n//       dragDom.style.cssText += `;left:${left + styL}px;top:${top + styT}px;`\n\n//       // emit onDrag event\n//       // vnode.child.$emit('dragDialog')\n//     }\n\n//     document.onmouseup = function(e) {\n//       document.onmousemove = null\n//       document.onmouseup = null\n//     }\n//   }\n// }\n\n// // 弹框缩放\n// const zoom = function(dragDom, el) {\n//   // 缩放\n//   // 弹框可拉伸最小宽高\n//   const minWidth = 50\n//   const minHeight = 50\n//   const resizeEl = document.createElement('div')\n//   dragDom.appendChild(resizeEl)\n//   // 在弹窗右下角加上一个10-10px的控制块\n//   resizeEl.style.cursor = 'se-resize'\n//   resizeEl.style.position = 'absolute'\n//   resizeEl.style.height = '10px'\n//   resizeEl.style.width = '10px'\n//   resizeEl.style.right = '0px'\n//   resizeEl.style.bottom = '0px'\n//   // 鼠标拉伸弹窗\n//   resizeEl.onmousedown = (e) => {\n//     // 记录初始x位置\n//     const clientX = e.clientX\n//     const clientY = e.clientY\n//     // 鼠标按下，计算当前元素距离可视区的距离\n//     const disX = e.clientX - resizeEl.offsetLeft\n//     const disY = e.clientY - resizeEl.offsetTop\n//     document.onmousemove = function(e) {\n//       e.preventDefault() // 移动时禁用默\n//       // 通过事件委托，计算移动的距离\n//       const x = e.clientX - disX + (e.clientX - clientX) / 2 // 这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\n//       const y = e.clientY - disY + (e.clientY - clientY) / 2\n//       // 比较是否小于最小宽高\n//       dragDom.style.width = x > minWidth ? `${x}px` : minWidth + 'px'\n//       dragDom.style.height = y > minHeight ? `${y}px` : minHeight + 'px'\n//       // 触发弹框resize事件\n//       const myEvent = new CustomEvent('dialogResize', {\n//         detail: {},\n//         bubbles: true,\n//         cancelable: false\n//       })\n//       window.dispatchEvent(myEvent)\n//     }\n//     // 拉伸结束\n//     document.onmouseup = function(e) {\n//       document.onmousemove = null\n//       document.onmouseup = null\n//     }\n//   }\n// }\n\n// export default drag\n\nexport default {\n  bind(el, binding, vnode, oldVnode) {\n    // 弹框可拉伸最小宽高\n    const minWidth = 50\n    const minHeight = 50\n    // 初始非全屏\n    let isFullScreen = false\n    // 当前宽高\n    let nowWidth = 0\n    // let nowHight = 0\n    // 当前顶部高度\n    let nowMarginTop = 0\n    // 获取弹框头部（这部分可双击全屏）\n    const dialogHeaderEl = el.querySelector('.el-dialog__header')\n    const dialogHeaderBtnEl = el.querySelector('.el-dialog__headerbtn')\n    if(dialogHeaderBtnEl){\n      dialogHeaderBtnEl.ondblclick = (e) => {\n        // 关闭按钮阻止双击冒泡事件\n        e.stopPropagation()\n      }\n    }\n    const dialogFooterEl = el.querySelector('.el-dialog__footer')\n    // const dialogBodyEl = el.querySelector('.el-dialog__body')\n    let hasSetBodyHight = false\n    // 弹窗\n    const dragDom = el.querySelector('.el-dialog')\n    // 给弹窗加上overflow auto；不然缩小时框内的标签可能超出dialog；\n    // dragDom.style.overflow = \"auto\";\n    // 清除选择头部文字效果\n    dialogHeaderEl.onselectstart = new Function('return false')\n    // 头部加上可拖动cursor\n    dialogHeaderEl.style.cursor = 'move'\n\n    // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n    const sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null)\n\n    // 头部插入最大化最小化元素\n    const maxMin = document.createElement('button')\n    maxMin.className += ' el-dialog__headerbtn el-dialog__minmax'\n    maxMin.style.right = '40px'\n    maxMin.style.color = '#909399'\n    maxMin.title = '最大化'\n    maxMin.innerHTML = '<i class=\"el-icon-full-screen\" onMouseOver=\"this.style.color=\\'#409EFF\\'\" onMouseOut=\"this.style.color=\\'inherit\\'\"></i>'\n    // dialogHeaderEl.insertBefore(maxMin,dialogHeaderEl.childNodes[1]);\n\n    const moveDown = (e) => {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      const disX = e.clientX - dialogHeaderEl.offsetLeft\n      const disY = e.clientY - dialogHeaderEl.offsetTop\n\n      // 获取到的值带px 正则匹配替换\n      let styL, styT\n\n      // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n      if (sty.left.includes('%')) {\n        styL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100)\n        styT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100)\n      } else {\n        styL = +sty.left.replace(/\\px/g, '')\n        styT = +sty.top.replace(/\\px/g, '')\n      }\n\n      document.onmousemove = function(e) {\n        // 通过事件委托，计算移动的距离\n        const l = e.clientX - disX\n        const t = e.clientY - disY\n\n        // 移动当前元素\n        dragDom.style.left = `${l + styL}px`\n        dragDom.style.top = `${t + styT}px`\n\n        // 将此时的位置传出去\n        // binding.value({x:e.pageX,y:e.pageY})\n      }\n\n      document.onmouseup = function(e) {\n        document.onmousemove = null\n        document.onmouseup = null\n      }\n    }\n    dialogHeaderEl.onmousedown = moveDown\n    let bodyHeight = 'auto'\n    let moreHeight = 0\n    function setMaxMin() {\n      if (isFullScreen === false) {\n        const i = maxMin.querySelector('.el-icon-full-screen')\n        i.classList.remove('el-icon-full-screen')\n        i.classList.add('el-icon-crop')\n        maxMin.title = '还原'\n        bodyHeight = `${dragDom.querySelector('.el-dialog__body').offsetHeight}px`\n        // nowHight = dragDom.clientHeight\n        nowWidth = dragDom.clientWidth\n        nowMarginTop = dragDom.style.marginTop\n        dragDom.style.left = 0\n        dragDom.style.top = 0\n        dragDom.style.height = '100VH'\n        dragDom.style.width = '100VW'\n        dragDom.style.marginTop = 0\n        isFullScreen = true\n        dialogHeaderEl.style.cursor = 'initial'\n        dialogHeaderEl.onmousedown = null\n        if (!hasSetBodyHight) {\n          moreHeight = Number(dialogHeaderEl.offsetHeight) + Number(dialogFooterEl ? dialogFooterEl.offsetHeight : 0)\n          dragDom.querySelector('.el-dialog__body').style.height = `calc(100% - ${moreHeight}px)`\n          hasSetBodyHight = true\n        }\n      } else {\n        const i = maxMin.querySelector('.el-icon-crop')\n        i.classList.remove('el-icon-crop')\n        i.classList.add('el-icon-full-screen')\n        maxMin.innerHTML = '<i class=\"el-icon-full-screen\"></i>'\n        maxMin.title = '最大化'\n        dragDom.style.height = 'auto'\n        dragDom.style.width = `${nowWidth}px`\n        dragDom.style.marginTop = nowMarginTop\n        isFullScreen = false\n        dialogHeaderEl.style.cursor = 'move'\n        dialogHeaderEl.onmousedown = moveDown\n        dragDom.querySelector('.el-dialog__body').style.height = bodyHeight\n        hasSetBodyHight = false\n      }\n    }\n    // 点击放大缩小效果\n    maxMin.onclick = setMaxMin\n    // 双击头部效果\n    dialogHeaderEl.ondblclick = setMaxMin\n\n    // 拉伸\n    const resizeEl = document.createElement('div')\n    dragDom.appendChild(resizeEl)\n    // 在弹窗右下角加上一个10-10px的控制块\n    resizeEl.style.cursor = 'se-resize'\n    resizeEl.style.position = 'absolute'\n    resizeEl.style.height = '10px'\n    resizeEl.style.width = '10px'\n    resizeEl.style.right = '0px'\n    resizeEl.style.bottom = '0px'\n    // 鼠标拉伸弹窗\n    resizeEl.onmousedown = (e) => {\n      // 记录初始x位置\n      const clientX = e.clientX\n      // 鼠标按下，计算当前元素距离可视区的距离\n      const disX = e.clientX - resizeEl.offsetLeft\n      const disY = e.clientY - resizeEl.offsetTop\n      document.onmousemove = function(e) {\n        e.preventDefault() // 移动时禁用默认事件\n        // 通过事件委托，计算移动的距离\n        const x = e.clientX - disX + (e.clientX - clientX)// 这里 由于elementUI的dialog控制居中的，所以水平拉伸效果是双倍\n        const y = e.clientY - disY\n        // 比较是否小于最小宽高\n        dragDom.style.width = x > minWidth ? `${x}px` : `${minWidth}px`\n        dragDom.style.height = y > minHeight ? `${y}px` : `${minHeight}px`\n        if (!hasSetBodyHight) {\n          moreHeight = Number(dialogHeaderEl.offsetHeight) + Number(dialogFooterEl ? dialogFooterEl.offsetHeight : 0)\n          dragDom.querySelector('.el-dialog__body').style.height = `calc(100% - ${moreHeight}px)`\n          dragDom.querySelector('.el-dialog__body>div').style.height = '100%'\n          hasSetBodyHight = true\n        }\n        // 触发弹框resize事件\n        const myEvent = new CustomEvent('dialogResize', {\n          detail: {},\n          bubbles: true,\n          cancelable: false,\n          e_target: e.target\n        })\n        window.dispatchEvent(myEvent)\n      }\n      // 拉伸结束\n      document.onmouseup = function(e) {\n        // 触发弹框拉伸结束\n        // const myEvent = new CustomEvent('dialogOnmouseup', {\n        //   detail: {},\n        //   bubbles: true,\n        //   cancelable: false,\n        //   e_target:e.target\n        // })\n        // window.dispatchEvent(myEvent)\n        document.onmousemove = null\n        document.onmouseup = null\n      }\n    }\n  }\n}\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}