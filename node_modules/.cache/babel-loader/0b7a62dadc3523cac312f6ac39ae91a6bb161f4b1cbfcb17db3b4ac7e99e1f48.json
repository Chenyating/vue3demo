{"ast":null,"code":"import agEditorMixins from './ag-editor-mixins';\nexport default {\n  name: 'AgGridSelect',\n  mixins: [agEditorMixins],\n  data() {\n    return {\n      options: []\n    };\n  },\n  computed: {\n    optionKey() {\n      const {\n        config\n      } = this.componentProps;\n      const {\n        value\n      } = config || {};\n      return value || 'sCodeValue';\n    },\n    componentProps() {\n      return Object.assign({}, {\n        placeholder: this.$t('components.pleaseEnter'),\n        size: 'mini',\n        hasInitChange: true\n      }, this.params?.cellEditorComponentProps || {});\n    }\n  },\n  created() {\n    const {\n      queryMethod,\n      hasInitChange,\n      autoFocus\n    } = this.componentProps;\n    queryMethod?.(this.params).then(options => {\n      this.options = options;\n      this.$nextTick(() => {\n        this.agValue = this.params.value;\n        if (autoFocus) {\n          this.focus();\n        }\n        if (hasInitChange) {\n          this.handleChange(this.agValue, 'init');\n        }\n      });\n    });\n  },\n  methods: {\n    triggerChange(records, type) {\n      const {\n        cellEditorComponentProps,\n        ...restAgParams\n      } = this.params;\n      const {\n        change\n      } = cellEditorComponentProps || {};\n      change?.(this.agValue, records, {\n        agParams: restAgParams\n      }, type);\n    },\n    getOptionsProps(record) {\n      const {\n        config,\n        getSelectOptionProps\n      } = this.componentProps;\n      const {\n        label,\n        value\n      } = config || {};\n      const textLabel = record[label || 'sCodeName'];\n      const textValue = record[value || 'sCodeValue'];\n      return {\n        ...record,\n        label: textLabel,\n        value: textValue,\n        ...getSelectOptionProps?.(record)\n      };\n    },\n    focus() {\n      this.$refs.agSelect.focus();\n    },\n    // 聚焦事件触发\n    handleFocus(e) {\n      this.triggerFocus(e);\n    },\n    // 失焦事件触发\n    handleBlur(e) {\n      this.triggerBlur(e);\n    },\n    handleChange(val, type) {\n      const {\n        multiple\n      } = this.componentProps;\n      if (multiple) {\n        const valArr = Array.isArray(val) ? val : [val];\n        const records = valArr.length ? this.options.filter(item => {\n          const {\n            value\n          } = this.getOptionsProps(item);\n          return valArr.includes(value);\n        }) : [];\n        this.triggerChange(records, type);\n      } else {\n        const record = this.options.find(item => {\n          const {\n            value\n          } = this.getOptionsProps(item);\n          return val === value;\n        });\n        this.triggerChange(record, type);\n      }\n    }\n  }\n};","map":{"version":3,"names":["agEditorMixins","name","mixins","data","options","computed","optionKey","config","componentProps","value","Object","assign","placeholder","$t","size","hasInitChange","params","cellEditorComponentProps","created","queryMethod","autoFocus","then","$nextTick","agValue","focus","handleChange","methods","triggerChange","records","type","restAgParams","change","agParams","getOptionsProps","record","getSelectOptionProps","label","textLabel","textValue","$refs","agSelect","handleFocus","e","triggerFocus","handleBlur","triggerBlur","val","multiple","valArr","Array","isArray","length","filter","item","includes","find"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/ForGridComponents/cell-editor/AgGridSelect.vue"],"sourcesContent":["<template>\n  <div>\n    <el-select\n      ref=\"agSelect\"\n      v-model=\"agValue\"\n      v-bind=\"componentProps\"\n      @change=\"handleChange\"\n      @focus=\"handleFocus\"\n      @blur=\"handleBlur\"\n    >\n      <el-option v-for=\"item in options\" :key=\"item[optionKey]\" v-bind=\"getOptionsProps(item)\" />\n    </el-select>\n  </div>\n</template>\n\n<script>\n\nimport agEditorMixins from './ag-editor-mixins'\nexport default {\n  name: 'AgGridSelect',\n  mixins: [agEditorMixins],\n  data() {\n    return {\n      options: []\n    }\n  },\n  computed: {\n    optionKey() {\n      const { config } = this.componentProps\n      const { value } = config || {}\n\n      return value || 'sCodeValue'\n    },\n    componentProps() {\n      return Object.assign(\n        {},\n        {\n          placeholder: this.$t('components.pleaseEnter'),\n          size: 'mini',\n          hasInitChange: true\n        },\n        this.params?.cellEditorComponentProps || {}\n      )\n    }\n  },\n  created() {\n    const { queryMethod, hasInitChange, autoFocus } = this.componentProps\n\n    queryMethod?.(this.params).then((options) => {\n      this.options = options\n      this.$nextTick(() => {\n        this.agValue = this.params.value\n        if (autoFocus) {\n          this.focus()\n        }\n        if (hasInitChange) {\n          this.handleChange(this.agValue, 'init')\n        }\n      })\n    })\n  },\n  methods: {\n    triggerChange(records, type) {\n      const { cellEditorComponentProps, ...restAgParams } = this.params\n\n      const { change } = cellEditorComponentProps || {}\n      change?.(this.agValue, records, { agParams: restAgParams }, type)\n    },\n    getOptionsProps(record) {\n      const { config, getSelectOptionProps } = this.componentProps\n\n      const { label, value } = config || {}\n\n      const textLabel = record[label || 'sCodeName']\n      const textValue = record[value || 'sCodeValue']\n\n      return {\n        ...record,\n        label: textLabel,\n        value: textValue,\n        ...getSelectOptionProps?.(record)\n      }\n    },\n    focus() {\n      this.$refs.agSelect.focus()\n    },\n    // 聚焦事件触发\n    handleFocus(e) {\n      this.triggerFocus(e)\n    },\n    // 失焦事件触发\n    handleBlur(e) {\n      this.triggerBlur(e)\n    },\n    handleChange(val, type) {\n      const { multiple } = this.componentProps\n\n      if (multiple) {\n        const valArr = Array.isArray(val) ? val : [val]\n\n        const records = valArr.length ? this.options.filter(item => {\n          const { value } = this.getOptionsProps(item)\n\n          return valArr.includes(value)\n        }) : []\n\n        this.triggerChange(records, type)\n      } else {\n        const record = this.options.find(item => {\n          const { value } = this.getOptionsProps(item)\n          return val === value\n        })\n        this.triggerChange(record, type)\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"AAiBA,OAAAA,cAAA;AACA;EACAC,IAAA;EACAC,MAAA,GAAAF,cAAA;EACAG,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA;QAAAC;MAAA,SAAAC,cAAA;MACA;QAAAC;MAAA,IAAAF,MAAA;MAEA,OAAAE,KAAA;IACA;IACAD,eAAA;MACA,OAAAE,MAAA,CAAAC,MAAA,CACA,IACA;QACAC,WAAA,OAAAC,EAAA;QACAC,IAAA;QACAC,aAAA;MACA,GACA,KAAAC,MAAA,EAAAC,wBAAA,MACA;IACA;EACA;EACAC,QAAA;IACA;MAAAC,WAAA;MAAAJ,aAAA;MAAAK;IAAA,SAAAZ,cAAA;IAEAW,WAAA,QAAAH,MAAA,EAAAK,IAAA,CAAAjB,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;MACA,KAAAkB,SAAA;QACA,KAAAC,OAAA,QAAAP,MAAA,CAAAP,KAAA;QACA,IAAAW,SAAA;UACA,KAAAI,KAAA;QACA;QACA,IAAAT,aAAA;UACA,KAAAU,YAAA,MAAAF,OAAA;QACA;MACA;IACA;EACA;EACAG,OAAA;IACAC,cAAAC,OAAA,EAAAC,IAAA;MACA;QAAAZ,wBAAA;QAAA,GAAAa;MAAA,SAAAd,MAAA;MAEA;QAAAe;MAAA,IAAAd,wBAAA;MACAc,MAAA,QAAAR,OAAA,EAAAK,OAAA;QAAAI,QAAA,EAAAF;MAAA,GAAAD,IAAA;IACA;IACAI,gBAAAC,MAAA;MACA;QAAA3B,MAAA;QAAA4B;MAAA,SAAA3B,cAAA;MAEA;QAAA4B,KAAA;QAAA3B;MAAA,IAAAF,MAAA;MAEA,MAAA8B,SAAA,GAAAH,MAAA,CAAAE,KAAA;MACA,MAAAE,SAAA,GAAAJ,MAAA,CAAAzB,KAAA;MAEA;QACA,GAAAyB,MAAA;QACAE,KAAA,EAAAC,SAAA;QACA5B,KAAA,EAAA6B,SAAA;QACA,GAAAH,oBAAA,GAAAD,MAAA;MACA;IACA;IACAV,MAAA;MACA,KAAAe,KAAA,CAAAC,QAAA,CAAAhB,KAAA;IACA;IACA;IACAiB,YAAAC,CAAA;MACA,KAAAC,YAAA,CAAAD,CAAA;IACA;IACA;IACAE,WAAAF,CAAA;MACA,KAAAG,WAAA,CAAAH,CAAA;IACA;IACAjB,aAAAqB,GAAA,EAAAjB,IAAA;MACA;QAAAkB;MAAA,SAAAvC,cAAA;MAEA,IAAAuC,QAAA;QACA,MAAAC,MAAA,GAAAC,KAAA,CAAAC,OAAA,CAAAJ,GAAA,IAAAA,GAAA,IAAAA,GAAA;QAEA,MAAAlB,OAAA,GAAAoB,MAAA,CAAAG,MAAA,QAAA/C,OAAA,CAAAgD,MAAA,CAAAC,IAAA;UACA;YAAA5C;UAAA,SAAAwB,eAAA,CAAAoB,IAAA;UAEA,OAAAL,MAAA,CAAAM,QAAA,CAAA7C,KAAA;QACA;QAEA,KAAAkB,aAAA,CAAAC,OAAA,EAAAC,IAAA;MACA;QACA,MAAAK,MAAA,QAAA9B,OAAA,CAAAmD,IAAA,CAAAF,IAAA;UACA;YAAA5C;UAAA,SAAAwB,eAAA,CAAAoB,IAAA;UACA,OAAAP,GAAA,KAAArC,KAAA;QACA;QACA,KAAAkB,aAAA,CAAAO,MAAA,EAAAL,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}