{"ast":null,"code":"import '../../../../lib/styles/components/Layout.scss';\nexport default {\n  name: 'Layout',\n  props: {\n    height: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    // 间距\n    gutter: {\n      type: Number,\n      default: 0\n    },\n    // 布局方向：horizontal/vertical\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    // 左边 content的百分比\n    leftWidth: {\n      type: String,\n      default: '30%'\n    },\n    // 右边 content的百分比(默认铺满剩下空间)\n    rightWidth: {\n      type: String,\n      default: ''\n    },\n    // 上边 content的百分比\n    topHeight: {\n      type: String,\n      default: '30%'\n    },\n    // 下边 content的百分比(默认铺满剩下空间)\n    bottomHeight: {\n      type: String,\n      default: ''\n    },\n    // 左边标题\n    leftTitle: {\n      type: String,\n      default: ''\n    },\n    // 上边标题\n    topTitle: {\n      type: String,\n      default: ''\n    },\n    // 右边标题\n    rightTitle: {\n      type: String,\n      default: ''\n    },\n    // 下边标题\n    bottomTitle: {\n      type: String,\n      default: ''\n    },\n    // 左边背景色\n    leftBgColor: {\n      type: String,\n      default: ''\n    },\n    // 上边背景色\n    topBgColor: {\n      type: String,\n      default: ''\n    },\n    // 右边背景色\n    rightBgColor: {\n      type: String,\n      default: ''\n    },\n    // 下边背景色\n    bottomBgColor: {\n      type: String,\n      default: ''\n    },\n    // 左边border\n    leftBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 上边border\n    topBorder: {\n      type: Boolean,\n      default: false\n    },\n    topLeftBorder: {\n      type: Boolean,\n      default: false\n    },\n    topRightBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 右边border\n    rightBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 下边border\n    bottomBorder: {\n      type: Boolean,\n      default: false\n    },\n    leftPadding: {\n      type: String,\n      default: '0px'\n    },\n    rightPadding: {\n      type: String,\n      default: '0px'\n    },\n    topPadding: {\n      type: String,\n      default: '0px'\n    },\n    bottomPadding: {\n      type: String,\n      default: '0px'\n    }\n  },\n  computed: {\n    // 左标题、上标题\n    titleSt() {\n      switch (this.direction) {\n        case 'horizontal':\n          return this.leftTitle;\n        case 'vertical':\n          return this.topTitle;\n        default:\n          return '';\n      }\n    },\n    // 右标题、下标题\n    titleNd() {\n      switch (this.direction) {\n        case 'horizontal':\n          return this.rightTitle;\n        case 'vertical':\n          return this.bottomTitle;\n        default:\n          return '';\n      }\n    },\n    styleSt() {\n      const style = this.firstProportion;\n      style['background'] = this.functionSt('BgColor');\n      if (this.gutter) {\n        switch (this.direction) {\n          case 'horizontal':\n            style['margin-right'] = `${this.gutter / 2}px`;\n            break;\n          case 'vertical':\n            style['margin-bottom'] = `${this.gutter / 2}px`;\n            break;\n          default:\n            return false;\n        }\n      }\n      return style;\n    },\n    styleNd() {\n      const style = this.secondProportion;\n      style['background'] = this.functionNd('BgColor');\n      if (this.gutter) {\n        switch (this.direction) {\n          case 'horizontal':\n            style['margin-left'] = `${this.gutter / 2}px`;\n            break;\n          case 'vertical':\n            style['margin-top'] = `${this.gutter / 2}px`;\n            break;\n          default:\n            return false;\n        }\n      }\n      return style;\n    },\n    contentStyleSt() {\n      const padding = this.functionSt('Padding');\n      return {\n        'padding': padding\n      };\n    },\n    contentStyleNd() {\n      const padding = this.functionNd('Padding');\n      return {\n        'padding': padding\n      };\n    },\n    contentClassSt() {\n      const result = {\n        left: this.direction === 'horizontal',\n        top: this.direction === 'vertical'\n      };\n      // 水平模式下 若同时拥有左右边框 则去掉容器左的右边框和容器右的右边框\n      result['no-border-right'] = this.leftBorder && this.rightBorder && this.direction === 'horizontal';\n      // 垂直模式下 若同时存在上下边框 则去掉容器上的下边框和容器下的上边框\n      result['no-border-bottom'] = this.topBorder && this.bottomBorder && this.direction !== 'horizontal';\n      const r = {\n        ...this.hanlderBorderProps\n      };\n      // 合并边框class\n      Object.assign(result, r);\n      if (this.rightBorder && this.direction === 'horizontal') {\n        if (this.leftBorder) {\n          // 同时有左右，保留一侧\n          result['border-right'] = true;\n          result['no-border-right'] = false;\n        } else {\n          result['border-right'] = false;\n        }\n      }\n      if (this.bottomBorder && this.direction !== 'horizontal') {\n        result['border-bottom'] = false;\n      }\n      // 水平模式下 左侧容器顶部线\n      if (!this.topBorder && this.direction === 'horizontal' && this.topLeftBorder) {\n        result['border-top'] = true;\n      }\n      return result;\n    },\n    contentClassNd() {\n      const result = {};\n      // 水平模式下 若同时拥有左右边框 则去掉容器左的右边框和容器右的右边框\n      result['no-border-left'] = this.leftBorder && this.rightBorder && this.direction === 'horizontal';\n      // 垂直模式下 若同时存在上下边框 则去掉容器上的下边框和容器下的上边框\n      result['no-border-top'] = this.topBorder && this.bottomBorder && this.direction !== 'horizontal';\n      // 合并边框class\n      const r = {\n        ...this.hanlderBorderProps\n      };\n      Object.assign(result, r);\n      if (this.leftBorder && this.direction === 'horizontal') {\n        result['border-left'] = false;\n      }\n      if (this.topBorder && this.direction !== 'horizontal') {\n        result['border-top'] = false;\n      }\n      // 水平模式下 右侧容器顶部线\n      if (!this.topBorder && this.direction === 'horizontal' && this.topRightBorder) {\n        result['border-top'] = true;\n      }\n      return result;\n    },\n    firstProportion() {\n      if (this.direction === 'horizontal') {\n        return this.judgeFirstStyle(this.leftWidth, this.rightWidth);\n      } else if (this.direction === 'vertical') {\n        return this.judgeFirstStyle(this.topHeight, this.bottomHeight);\n      }\n      return '';\n    },\n    secondProportion() {\n      if (this.direction === 'horizontal') {\n        return this.judgeSecondStyle(this.rightWidth, this.leftWidth);\n      } else if (this.direction === 'vertical') {\n        return this.judgeSecondStyle(this.bottomHeight, this.topHeight);\n      }\n      return '';\n    },\n    hanlderBorderProps() {\n      const o = {};\n      o['border-top'] = this.topBorder;\n      o['border-left'] = this.leftBorder;\n      o['border-right'] = this.rightBorder;\n      o['border-bottom'] = this.bottomBorder;\n      return o;\n    },\n    handleHeight() {\n      const type = typeof this.height;\n      if (type === 'string') {\n        return this.height;\n      } else if (type === 'number') {\n        return this.height + 'px';\n      }\n      return this.height;\n    }\n  },\n  methods: {\n    // BgColor、Padding、Title\n    functionSt(v) {\n      switch (this.direction) {\n        case 'horizontal':\n          return this['left' + v];\n        case 'vertical':\n          return this['top' + v];\n        default:\n          return false;\n      }\n    },\n    // BgColor、Padding、Title\n    functionNd(v) {\n      switch (this.direction) {\n        case 'horizontal':\n          return this['right' + v];\n        case 'vertical':\n          return this['bottom' + v];\n        default:\n          return false;\n      }\n    },\n    handleResize(weight) {\n      this.$emit('handleResize', weight);\n    },\n    // 百分比转小数\n    toDecimal(percent) {\n      let str = percent.replace('%', '');\n      str = str / 100;\n      return str;\n    },\n    // 字符串是否包含px、rem、em等字母\n    includeWord(str) {\n      const reg = /[A-Za-z]/;\n      return reg.test(str);\n    },\n    // 判断左/上宽/高度样式值\n    judgeFirstStyle(value1, value2) {\n      if (this.includeWord(value1)) {\n        return {\n          width: value1\n        };\n      }\n      if (this.includeWord(value2)) {\n        return {\n          flex: 1\n        };\n      }\n      return {\n        flex: this.toDecimal(value1)\n      };\n    },\n    // 判断右/下宽/高度样式值\n    judgeSecondStyle(value1, value2) {\n      if (value1) {\n        if (this.includeWord(value1)) {\n          return {\n            width: value1\n          };\n        }\n        if (this.includeWord(value2)) {\n          return {\n            flex: 1\n          };\n        }\n        return {\n          flex: this.toDecimal(value1)\n        };\n      } else {\n        if (this.includeWord(value2)) {\n          return {\n            flex: 1\n          };\n        }\n        return {\n          flex: 1 - this.toDecimal(value2)\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","height","type","String","Number","default","gutter","direction","leftWidth","rightWidth","topHeight","bottomHeight","leftTitle","topTitle","rightTitle","bottomTitle","leftBgColor","topBgColor","rightBgColor","bottomBgColor","leftBorder","Boolean","topBorder","topLeftBorder","topRightBorder","rightBorder","bottomBorder","leftPadding","rightPadding","topPadding","bottomPadding","computed","titleSt","titleNd","styleSt","style","firstProportion","functionSt","styleNd","secondProportion","functionNd","contentStyleSt","padding","contentStyleNd","contentClassSt","result","left","top","r","hanlderBorderProps","Object","assign","contentClassNd","judgeFirstStyle","judgeSecondStyle","o","handleHeight","methods","v","handleResize","weight","$emit","toDecimal","percent","str","replace","includeWord","reg","test","value1","value2","width","flex"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Layout/src/index.vue"],"sourcesContent":["<template>\n  <div\n    v-resizable=\"direction\"\n    class=\"layout-container resizable-container\"\n    :style=\"{\n      height: handleHeight,\n      'flex-direction': direction === 'horizontal' ? 'row' : 'column',\n    }\"\n  >\n    <div\n      :class=\"['content', 'flexV', { 'wrapper': styleSt.flex }]\"\n      :style=\"styleSt\"\n      :weight=\"styleSt.flex\"\n    >\n      <p v-if=\"titleSt\" class=\"title\">{{ titleSt }}</p>\n      <div\n        class=\"h100 overflow-scroll\"\n        :style=\"contentStyleSt\"\n        :class=\"contentClassSt\"\n      >\n        <slot :name=\"direction === 'horizontal' ? 'leftContent' : 'topContent'\" />\n      </div>\n    </div>\n    <div\n      :class=\"['content', 'flexV', { 'wrapper': styleNd.flex }]\"\n      :style=\"styleNd\"\n      :weight=\"styleNd.flex\"\n    >\n      <div v-if=\"titleNd\" class=\"title\">{{ titleNd }}</div>\n      <div\n        class=\"h100 overflow-scroll\"\n        :style=\"contentStyleNd\"\n        :class=\"contentClassNd\"\n      >\n        <slot :name=\"direction === 'horizontal' ? 'rightContent' : 'bottomContent'\"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '../../../../lib/styles/components/Layout.scss'\nexport default {\n  name: 'Layout',\n  props: {\n    height: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    // 间距\n    gutter: {\n      type: Number,\n      default: 0\n    },\n    // 布局方向：horizontal/vertical\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    // 左边 content的百分比\n    leftWidth: {\n      type: String,\n      default: '30%'\n    },\n    // 右边 content的百分比(默认铺满剩下空间)\n    rightWidth: {\n      type: String,\n      default: ''\n    },\n    // 上边 content的百分比\n    topHeight: {\n      type: String,\n      default: '30%'\n    },\n    // 下边 content的百分比(默认铺满剩下空间)\n    bottomHeight: {\n      type: String,\n      default: ''\n    },\n    // 左边标题\n    leftTitle: {\n      type: String,\n      default: ''\n    },\n    // 上边标题\n    topTitle: {\n      type: String,\n      default: ''\n    },\n    // 右边标题\n    rightTitle: {\n      type: String,\n      default: ''\n    },\n    // 下边标题\n    bottomTitle: {\n      type: String,\n      default: ''\n    },\n    // 左边背景色\n    leftBgColor: {\n      type: String,\n      default: ''\n    },\n    // 上边背景色\n    topBgColor: {\n      type: String,\n      default: ''\n    },\n    // 右边背景色\n    rightBgColor: {\n      type: String,\n      default: ''\n    },\n    // 下边背景色\n    bottomBgColor: {\n      type: String,\n      default: ''\n    },\n    // 左边border\n    leftBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 上边border\n    topBorder: {\n      type: Boolean,\n      default: false\n    },\n    topLeftBorder: {\n      type: Boolean,\n      default: false\n    },\n    topRightBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 右边border\n    rightBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 下边border\n    bottomBorder: {\n      type: Boolean,\n      default: false\n    },\n    leftPadding: {\n      type: String,\n      default: '0px'\n    },\n    rightPadding: {\n      type: String,\n      default: '0px'\n    },\n    topPadding: {\n      type: String,\n      default: '0px'\n    },\n    bottomPadding: {\n      type: String,\n      default: '0px'\n    }\n  },\n  computed: {\n    // 左标题、上标题\n    titleSt() {\n      switch (this.direction) {\n        case 'horizontal':\n          return this.leftTitle\n        case 'vertical':\n          return this.topTitle\n        default:\n          return ''\n      }\n    },\n    // 右标题、下标题\n    titleNd() {\n      switch (this.direction) {\n        case 'horizontal':\n          return this.rightTitle\n        case 'vertical':\n          return this.bottomTitle\n        default:\n          return ''\n      }\n    },\n    styleSt() {\n      const style = this.firstProportion\n      style['background'] = this.functionSt('BgColor')\n      if (this.gutter) {\n        switch (this.direction) {\n          case 'horizontal':\n            style['margin-right'] = `${this.gutter / 2}px`\n            break\n          case 'vertical':\n            style['margin-bottom'] = `${this.gutter / 2}px`\n            break\n          default:\n            return false\n        }\n      }\n      return style\n    },\n    styleNd() {\n      const style = this.secondProportion\n      style['background'] = this.functionNd('BgColor')\n      if (this.gutter) {\n        switch (this.direction) {\n          case 'horizontal':\n            style['margin-left'] = `${this.gutter / 2}px`\n            break\n          case 'vertical':\n            style['margin-top'] = `${this.gutter / 2}px`\n            break\n          default:\n            return false\n        }\n      }\n      return style\n    },\n    contentStyleSt() {\n      const padding = this.functionSt('Padding')\n      return { 'padding': padding }\n    },\n    contentStyleNd() {\n      const padding = this.functionNd('Padding')\n      return { 'padding': padding }\n    },\n    contentClassSt() {\n      const result = {\n        left: this.direction === 'horizontal',\n        top: this.direction === 'vertical'\n      }\n      // 水平模式下 若同时拥有左右边框 则去掉容器左的右边框和容器右的右边框\n      result['no-border-right'] =\n        this.leftBorder && this.rightBorder && this.direction === 'horizontal'\n      // 垂直模式下 若同时存在上下边框 则去掉容器上的下边框和容器下的上边框\n      result['no-border-bottom'] =\n        this.topBorder && this.bottomBorder && this.direction !== 'horizontal'\n      const r = { ...this.hanlderBorderProps }\n      // 合并边框class\n      Object.assign(result, r)\n      if (this.rightBorder && this.direction === 'horizontal') {\n        if (this.leftBorder) {\n          // 同时有左右，保留一侧\n          result['border-right'] = true\n          result['no-border-right'] = false\n        } else {\n          result['border-right'] = false\n        }\n      }\n      if (this.bottomBorder && this.direction !== 'horizontal') {\n        result['border-bottom'] = false\n      }\n      // 水平模式下 左侧容器顶部线\n      if (\n        !this.topBorder &&\n        this.direction === 'horizontal' &&\n        this.topLeftBorder\n      ) {\n        result['border-top'] = true\n      }\n      return result\n    },\n    contentClassNd() {\n      const result = {}\n      // 水平模式下 若同时拥有左右边框 则去掉容器左的右边框和容器右的右边框\n      result['no-border-left'] =\n        this.leftBorder && this.rightBorder && this.direction === 'horizontal'\n      // 垂直模式下 若同时存在上下边框 则去掉容器上的下边框和容器下的上边框\n      result['no-border-top'] =\n        this.topBorder && this.bottomBorder && this.direction !== 'horizontal'\n      // 合并边框class\n      const r = { ...this.hanlderBorderProps }\n      Object.assign(result, r)\n      if (this.leftBorder && this.direction === 'horizontal') {\n        result['border-left'] = false\n      }\n      if (this.topBorder && this.direction !== 'horizontal') {\n        result['border-top'] = false\n      }\n      // 水平模式下 右侧容器顶部线\n      if (\n        !this.topBorder &&\n        this.direction === 'horizontal' &&\n        this.topRightBorder\n      ) {\n        result['border-top'] = true\n      }\n\n      return result\n    },\n    firstProportion() {\n      if (this.direction === 'horizontal') {\n        return this.judgeFirstStyle(this.leftWidth, this.rightWidth)\n      } else if (this.direction === 'vertical') {\n        return this.judgeFirstStyle(this.topHeight, this.bottomHeight)\n      }\n      return ''\n    },\n    secondProportion() {\n      if (this.direction === 'horizontal') {\n        return this.judgeSecondStyle(this.rightWidth, this.leftWidth)\n      } else if (this.direction === 'vertical') {\n        return this.judgeSecondStyle(this.bottomHeight, this.topHeight)\n      }\n      return ''\n    },\n    hanlderBorderProps() {\n      const o = {}\n      o['border-top'] = this.topBorder\n      o['border-left'] = this.leftBorder\n      o['border-right'] = this.rightBorder\n      o['border-bottom'] = this.bottomBorder\n      return o\n    },\n    handleHeight() {\n      const type = typeof this.height\n      if (type === 'string') {\n        return this.height\n      } else if (type === 'number') {\n        return this.height + 'px'\n      }\n      return this.height\n    }\n  },\n  methods: {\n    // BgColor、Padding、Title\n    functionSt(v) {\n      switch (this.direction) {\n        case 'horizontal':\n          return this['left' + v]\n        case 'vertical':\n          return this['top' + v]\n        default:\n          return false\n      }\n    },\n    // BgColor、Padding、Title\n    functionNd(v) {\n      switch (this.direction) {\n        case 'horizontal':\n          return this['right' + v]\n        case 'vertical':\n          return this['bottom' + v]\n        default:\n          return false\n      }\n    },\n    handleResize(weight) {\n      this.$emit('handleResize', weight)\n    },\n    // 百分比转小数\n    toDecimal(percent) {\n      let str = percent.replace('%', '')\n      str = str / 100\n      return str\n    },\n    // 字符串是否包含px、rem、em等字母\n    includeWord(str) {\n      const reg = /[A-Za-z]/\n      return reg.test(str)\n    },\n    // 判断左/上宽/高度样式值\n    judgeFirstStyle(value1, value2) {\n      if (this.includeWord(value1)) {\n        return { width: value1 }\n      }\n      if (this.includeWord(value2)) {\n        return { flex: 1 }\n      }\n      return { flex: this.toDecimal(value1) }\n    },\n    // 判断右/下宽/高度样式值\n    judgeSecondStyle(value1, value2) {\n      if (value1) {\n        if (this.includeWord(value1)) {\n          return { width: value1 }\n        }\n        if (this.includeWord(value2)) {\n          return { flex: 1 }\n        }\n        return { flex: this.toDecimal(value1) }\n      } else {\n        if (this.includeWord(value2)) {\n          return { flex: 1 }\n        }\n        return { flex: 1 - this.toDecimal(value2) }\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}