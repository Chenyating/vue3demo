{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport { AgGridVue } from 'ag-grid-vue';\nimport { AllModules } from 'ag-grid-enterprise';\nimport { AG_GRID_LOCALE_CN } from '../../../../lib/lang/ag-grid.zh.js';\nimport childHeaderSelect from '../../AgGridExtend/childHeaderSelect';\nimport childSelect from '../../AgGridExtend/childSelect';\nimport headerSelect from '../../AgGridExtend/headerSelect';\nimport parentSelect from '../../AgGridExtend/parentSelect';\nimport headerDefSelect from '../../AgGridExtend/headerDefSelect';\nimport defSelect from '../../AgGridExtend/defSelect';\nimport TableInput from './TableInput.vue';\nimport imageViewer from './imageViewer.vue';\nimport gridTotal from './gridTotal';\nimport localPagination from '../../Pagination/index.js';\nimport { handleGridColumnDefs, handleGridChildColumnDefs } from './columnDefs';\nimport { deepClone } from './utils.js';\nimport '../../../../lib/styles/components/CommonAgGrid.scss';\nexport default {\n  name: 'CommonAgGrid',\n  components: {\n    AgGridVue,\n    gridTotal,\n    imageViewer,\n    localPagination\n  },\n  props: {\n    // 是否需要分页\n    paginationinif: {\n      type: Boolean,\n      default: true\n    },\n    // 默认页数\n    defaultPage: {\n      type: [Number, String],\n      default: 0\n    },\n    // 默认页码\n    defaultPageSize: {\n      type: [Number, String],\n      default: 30\n    },\n    // heightinif 表格高度\n    heightinif: {\n      type: [Number, String],\n      default: 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: false\n    },\n    // autoHeight为true时，minHeight生效\n    minHeight: {\n      type: [Number, String],\n      default: 100\n    },\n    // 主标列配置\n    columnDefs: {\n      type: Array,\n      default: () => []\n    },\n    frameworkComponents: {\n      type: Object,\n      default: () => {}\n    },\n    // 表格数据\n    rowData: {\n      type: Array,\n      default: () => []\n    },\n    // 选择模式\n    tableSelection: {\n      type: String,\n      default: null,\n      validator: function (value) {\n        return ['single', 'multiple', null].indexOf(value) !== -1;\n      }\n    },\n    // 自适应\n    isSizeColumnsToFit: {\n      type: Boolean,\n      default: false\n    },\n    // 自动加载数据\n    autoLoadData: {\n      type: Boolean,\n      default: true\n    },\n    // 行唯一键值\n    rowKey: {\n      type: String,\n      required: true\n    },\n    // 加载事件用于翻页\n    loadData: {\n      type: Function,\n      default: null\n    },\n    // 是否主子表\n    isSubtable: {\n      type: Boolean,\n      default: false\n    },\n    // 子表列配置\n    childColumnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 子表数据存放属性\n    childrenListKey: {\n      type: String,\n      default: '_details'\n    },\n    // 子表键值\n    childRowKey: {\n      type: String,\n      default: ''\n    },\n    // 子表是否可以全选\n    childAllSelect: {\n      type: Boolean,\n      default: false\n    },\n    // 懒加载子表方法\n    loadDetail: {\n      type: Function,\n      default: null\n    },\n    handleDetailCount: {\n      type: [Function, Object],\n      default: null\n    },\n    // 头部合计\n    headerTotal: {\n      type: Array,\n      default: null\n    },\n    // 底部合计\n    footerTotal: {\n      type: Array,\n      default: null\n    },\n    // 是否全行编辑 all parent child\n    fullRowType: {\n      type: String,\n      default: null\n    },\n    // 是否禁用黏贴 all parent child\n    disablePaste: {\n      type: String,\n      default: null\n    },\n    // 重新设置表头 恢复排序\n    applyColumnDefOrder: {\n      type: Boolean,\n      default: true\n    },\n    additionalOptions: {\n      type: Object,\n      default: () => {}\n    },\n    detailOptions: {\n      type: Object,\n      default: () => {}\n    },\n    showLoading: {\n      type: Boolean,\n      default: true\n    },\n    isAutoSizeColumns: {\n      type: Boolean,\n      default: false\n    },\n    isAutoSizeColumnsHeader: {\n      type: Boolean,\n      default: false\n    },\n    enableZeroValue: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      initClass1: '',\n      initClass2: '',\n      initStyle1: '',\n      initStyle2: '',\n      AllModules,\n      gridShow: true,\n      gridApi: null,\n      columnApi: null,\n      gridOptions: null,\n      gridColumnDefs: [],\n      gridChildColumnDefs: [],\n      childColumnDefs_: [],\n      columnWidth: 0,\n      gridHeight: 0,\n      pagination: {\n        total: 0,\n        page: 0,\n        limit: 30\n      },\n      onHeaderDefSelect: selected => {\n        this.$emit('headerSelected', selected);\n      },\n      onDefSelect: (params, selected) => {\n        this.$emit('rowSelected', params, selected);\n      }\n    };\n  },\n  computed: {\n    gridStyle() {\n      const style = {};\n      const gridHeight = +this.gridHeight;\n      if (gridHeight > 0) {\n        style.height = `${gridHeight}px`;\n      }\n      return style;\n    },\n    scrollStyle() {\n      const userAgent = navigator.userAgent.toLowerCase();\n      const preg = new RegExp('windows|win32|win64|wow32|wow64', 'g');\n      return preg.test(userAgent) ? 'scroll-style' : '';\n    }\n  },\n  watch: {\n    fullRowType(newVal, oldVal) {\n      this.gridShow = false;\n      this.initGridOptions();\n      this.$nextTick(() => {\n        this.gridShow = true;\n      });\n    },\n    rowData: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (this.gridApi) {\n          this.$nextTick(() => {\n            this.gridApi.forEachNode(v => {\n              const _selectedKeys = v.data._selectedKeys || [];\n              const _selected = v.data._selected || _selectedKeys.length > 0;\n              v.selected = !_selected;\n              v.setSelected(_selected, true, true);\n              if (v.detailNode && v.detailNode.detailGridInfo) {\n                v.detailNode.detailGridInfo.api.forEachNode(o => {\n                  const oState = _selectedKeys.indexOf(o.data[this.childRowKey]) !== -1;\n                  o.selected = !oState;\n                  o.setSelected(oState, true, true);\n                });\n              }\n            });\n          });\n        }\n        this.$emit('selectedChange', newValue);\n        if (newValue.length <= 1) {\n          this.handleGridHeight(newValue.length);\n        }\n        this.handlePinnedBottomRowData(newValue);\n      }\n    }\n  },\n  created() {\n    this.pagination.page = this.defaultPage;\n    this.pagination.limit = this.defaultPageSize;\n    this.gridChildColumnDefs = this.childColumnDefs;\n    if (!this.autoHeight) {\n      this.gridHeight = this.heightinif;\n    }\n    const initClass1 = localStorage.getItem('spaceClass');\n    const initClass2 = localStorage.getItem('themeClass');\n    const initStyle1 = localStorage.getItem('agColorStyle');\n    const initStyle2 = localStorage.getItem('agSpaceStyle');\n    this.initClass1 = initClass1 != null ? initClass1 : 'spacing-default';\n    this.initClass2 = initClass2 != null ? initClass2 : 'spacing-default';\n    this.initStyle1 = initStyle1 != null ? initStyle1 : '';\n    this.initStyle2 = initStyle2 != null ? initStyle2 : '';\n    this.initGridOptions();\n  },\n  methods: {\n    initGridOptions() {\n      let columnCount = 0;\n      let fillWidth = 0;\n      let _fill = 0;\n      const _this = this;\n      const fullRowType = this.fullRowType;\n      const hasSecMeter = this.columnDefs.some(item => item.children);\n      const disablePaste = this.disablePaste;\n      const gridOptions = {\n        suppressClipboardPaste: !!(disablePaste === 'all' || disablePaste === 'parent'),\n        embedFullWidthRows: true,\n        frameworkComponents: {\n          TableInput: Vue.extend(TableInput),\n          headerSelect: Vue.extend(headerSelect),\n          parentSelect: Vue.extend(parentSelect),\n          headerDefSelect: Vue.extend(headerDefSelect),\n          defSelect: Vue.extend(defSelect),\n          imageViewer: Vue.extend(imageViewer),\n          ...this.frameworkComponents\n        },\n        context: {\n          componentParent: this,\n          rowKey: this.rowKey,\n          childRowKey: this.childRowKey,\n          childrenListKey: this.childrenListKey,\n          tableSelection: this.tableSelection,\n          onHeaderDefSelect: this.onHeaderDefSelect,\n          onDefSelect: this.onDefSelect,\n          loadDetail: this.loadDetail,\n          enableZeroValue: this.enableZeroValue\n        },\n        rowHeight: 36,\n        headerHeight: 32,\n        defaultColDef: {\n          cellStyle: {\n            'line-height': '36px'\n          },\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        editType: fullRowType === 'all' || fullRowType === 'parent' ? 'fullRow' : null,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.dataLoading')}...</span>`,\n        overlayNoRowsTemplate: `<span><span>`,\n        localeText: AG_GRID_LOCALE_CN,\n        rowSelection: this.tableSelection,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        masterDetail: this.isSubtable,\n        //* *************设置固定行样式**********\n        // 公共样式已统一配置\n        // getRowStyle: (params) => {\n        //   if (params.node.rowPinned) {\n        //     return { 'color': '#3e8ddc', 'border-top': '2px solid #3e8ddc !important', 'font-weight': '600', 'border-bottom': '0' }\n        //   }\n        // },\n        isRowMaster: dataItem => {\n          const hasLoadDetail = typeof this.loadDetail === 'function';\n          return this.isSubtable && dataItem[this.childrenListKey] && dataItem[this.childrenListKey].length || hasLoadDetail;\n        },\n        onRowClicked: params => {\n          this.stopChildEditing();\n          this.$emit('rowClicked', params);\n        },\n        onRowDoubleClicked: params => {\n          const path = params.event.path || [];\n          const el = path.length ? path[0] : null;\n          if (el && el.className.includes('ag-icon')) {\n            return;\n          }\n          this.$emit('rowDoubleClicked', params);\n        },\n        onCellValueChanged: params => {\n          this.refreshTable();\n          this.$emit('cellValueChanged', params);\n        },\n        onCellEditingStopped: params => {\n          this.$emit('cellEditingStopped', params);\n        },\n        onRowValueChanged: params => {\n          this.$emit('rowValueChanged', params);\n        },\n        onRowGroupOpened: params => {\n          params.expanded ? columnCount++ : columnCount--;\n          if (_fill === 0) {\n            fillWidth = params.columnApi.getColumnState()[params.columnApi.getColumnState().length - 1].width;\n            _fill = 1;\n          }\n          columnCount === 0 && gridOptions.columnApi.setColumnWidth('fill', fillWidth, true);\n          this.$emit('rowGroupOpened', params);\n        },\n        onColumnResized: params => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode(node => {\n              const detailNode = node.detailNode;\n              detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.sizeColumnsToFit();\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi.getColumnState().filter((item, index) => {\n                  _this.gridChildColumnDefs[index].width = item.width;\n                });\n              }\n            });\n          }\n        },\n        ...this.additionalOptions\n      };\n      this.gridColumnDefs = handleGridColumnDefs(this.isSubtable, hasSecMeter, this.tableSelection, this.columnDefs, this.childAllSelect);\n      if (this.isSubtable) {\n        gridOptions.masterDetail = true;\n        // 子表配置\n        gridOptions.detailCellRendererParams = {\n          detailGridOptions: {\n            suppressClipboardPaste: !!(disablePaste === 'all' || disablePaste === 'child'),\n            suppressHorizontalScroll: false,\n            frameworkComponents: {\n              childHeaderSelect: Vue.extend(childHeaderSelect),\n              TableInput: Vue.extend(TableInput),\n              childSelect: Vue.extend(childSelect),\n              imageViewer: Vue.extend(imageViewer),\n              ..._this.frameworkComponents\n            },\n            columnDefs: handleGridChildColumnDefs(hasSecMeter, this.tableSelection, this.gridChildColumnDefs, this.childAllSelect),\n            context: gridOptions.context,\n            rowHeight: 36,\n            headerHeight: 33,\n            defaultColDef: {\n              cellStyle: {\n                'line-height': '36px'\n              },\n              filter: true,\n              sortable: true,\n              resizable: true,\n              suppressMenu: true // 子表不显示头部菜单\n            },\n\n            editType: fullRowType === 'all' || fullRowType === 'child' ? 'fullRow' : null,\n            overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.dataLoading')}...</span>`,\n            overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.noData')}<span>`,\n            localeText: AG_GRID_LOCALE_CN,\n            rowSelection: 'multiple',\n            suppressRowClickSelection: true,\n            enableRangeSelection: true,\n            onRowClicked: params => {\n              this.$emit('childRowClicked', params);\n            },\n            onRowDoubleClicked: params => {\n              this.$emit('childRowDoubleClicked', params);\n            },\n            onCellEditingStarted: params => {\n              // 清空其他子级编辑 全行编辑 不执行\n              if (!(fullRowType === 'all' || fullRowType === 'child')) {\n                _this.stopChildEditing(params.data.parentId);\n              }\n            },\n            onCellEditingStopped: params => {\n              this.$emit('childCellEditingStopped', params);\n            },\n            onCellValueChanged: params => {\n              this.refreshTable();\n              this.$emit('childCellValueChanged', params);\n            },\n            onRowEditingStarted: params => {\n              // 清空其他子级编辑\n              _this.stopChildEditing(params.data.parentId);\n            },\n            onRowValueChanged: params => {\n              this.$emit('childRowValueChanged', params);\n            },\n            onGridReady: function (params) {\n              if (this.isSizeColumnsToFit) {\n                params.columnApi.sizeColumnsToFit();\n              } else {\n                columnCount === 1 && setTimeout(() => {\n                  _this.columnWidth = fillWidth + params.columnApi.columnModel.bodyWidth - params.columnApi.columnModel.scrollWidth;\n                  gridOptions.columnApi.setColumnWidth('fill', _this.columnWidth, true);\n                  params.columnApi.getColumnState().filter((item, index) => {\n                    _this.gridChildColumnDefs[index] && (_this.gridChildColumnDefs[index].width = params.columnApi.getColumnState()[index + 1].width);\n                  });\n                }, 300);\n              }\n              _this.$emit('childReady');\n            },\n            onColumnResized: function (params) {\n              if (params.source === 'uiColumnDragged' && params.finished) {\n                _this.columnWidth = _this.columnWidth + params.columnApi.columnController.bodyWidth - params.columnApi.columnController.scrollWidth;\n                gridOptions.columnApi.setColumnWidth('fill', _this.columnWidth, true);\n                gridOptions.api.forEachNode(node => {\n                  const detailNode = node.detailNode;\n                  detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.columnApi.setColumnWidth(params.columns[0].colId, params.columns[0].actualWidth, true);\n                });\n                _this.childColumnDefs_.filter((item, index) => {\n                  if (item.field === params.columns[0].colId) {\n                    _this.childColumnDefs_[index].width = params.columns[0].actualWidth;\n                  }\n                });\n              }\n            },\n            ...this.detailOptions\n          },\n          getDetailRowData: async params => {\n            const {\n              childrenListKey,\n              childRowKey\n            } = this;\n            if (typeof this.loadDetail === 'function') {\n              params.data[childrenListKey] = await this.loadDetail(params.data);\n            }\n            if (params.data[childrenListKey]) {\n              const callRecords = params.data[childrenListKey].map(item => {\n                return {\n                  ...item,\n                  parentId: params.node.parent.id\n                };\n              });\n              if (params.data._selected) {\n                params.data._selectedKeys = params.data[childrenListKey].map(item => {\n                  if (!item._selectedDisabled) {\n                    return item[childRowKey];\n                  }\n                });\n              }\n              new Promise(r => {\n                params.successCallback(callRecords);\n                r(callRecords);\n              }).then(() => {\n                if (this.gridOptions.embedFullWidthRows) {\n                  this.handleDetailRow(params, callRecords, params.data._selectedKeys.length === callRecords.length);\n                }\n              });\n            } else {\n              params.successCallback([]);\n            }\n          }\n        };\n      }\n      this.gridOptions = gridOptions;\n    },\n    handleDetailRow(params, callRecords, isSelectAll) {\n      if (!callRecords.length) return;\n      const cLength = callRecords.length;\n      const parentRowIndex = params.node.parent.id;\n      this.$nextTick(() => {\n        const queryNode = '.ag-pinned-left-cols-container .ag-details-row';\n        const detail_row = document.querySelectorAll(queryNode);\n        if (!detail_row.length) return;\n        let el = null;\n        Array.from(detail_row).forEach(item => {\n          const row_id = item.parentElement.attributes['row-id'].value;\n          const parentId = `detail_${parentRowIndex}`;\n          el = row_id === parentId ? item : null;\n        });\n        if (!el) return;\n        this.insertDom(el, cLength, isSelectAll);\n      });\n    },\n    insertDom(el, cLength, isSelectAll) {\n      const commonClass = ['ag-row-no-focus', 'ag-row', 'ag-row-level-1', 'ag-row-position-absolute', 'ag-row-first', 'customer-dom'];\n      isSelectAll ? commonClass.push(...['ag-row-focus', 'ag-row-selected']) : null;\n      const createChildRowElement = (evenOdd, commonClass, style) => {\n        const div = document.createElement('div');\n        div.classList.add(...[...commonClass, evenOdd]);\n        div.style = style;\n        return div;\n      };\n      const firstTop = 34;\n      const perTop = 36;\n      const fragment = document.createDocumentFragment();\n      for (let i = 0; i < cLength; i++) {\n        let evenOdd = null;\n        evenOdd = (i & 1) === 0 ? 'ag-row-even' : 'ag-row-odd';\n        const top = firstTop + i * perTop + 'px';\n        const style = `top:${top}`;\n        fragment.appendChild(createChildRowElement(evenOdd, commonClass, style));\n      }\n      el.appendChild(fragment);\n    },\n    handlePinnedBottomRowData(newValue) {\n      if (typeof this.handleDetailCount === 'function') {\n        newValue.forEach((item, index) => {\n          const rowNode = this.gridApi.getDetailGridInfo(`detail_${index}`);\n          if (item._selectedKeys.length > 0) {\n            const childSelectedList = [];\n            for (const childRowKey of item._selectedKeys) {\n              const selectedItem = item[this.childrenListKey].find(el => {\n                return el[this.childRowKey] === childRowKey;\n              });\n              childSelectedList.push(selectedItem);\n            }\n            rowNode && rowNode.api.setPinnedBottomRowData([{\n              _childCount: this.handleDetailCount(childSelectedList)\n            }]);\n          } else {\n            rowNode && rowNode.api.setPinnedBottomRowData([]);\n          }\n        });\n      }\n    },\n    handlSelectionChange() {\n      const selectedNodes = this.gridApi.getSelectedNodes();\n      const selectedKeys = selectedNodes.map(item => item.data[this.rowKey]);\n      this.rowData.forEach(item => {\n        if (selectedKeys.includes(item[this.rowKey])) {\n          item._selected = true;\n        } else {\n          item._selected = false;\n        }\n      });\n    },\n    initDataSelectState(arr) {\n      return arr.map(item => {\n        item._selected = false;\n        item._selectedKeys = [];\n        return item;\n      });\n    },\n    getSelectedData(func, type = null) {\n      setTimeout(() => {\n        const newRowData = deepClone(this.rowData);\n        const filterSelectedData = newRowData.map((element, index) => {\n          return {\n            rowIndex: index + 1,\n            ...element\n          };\n        }).filter(item => {\n          return (item._selected || (item._selectedKeys ? item._selectedKeys.length : false)) && (this.childRowKey ? !!(item[this.childrenListKey] && item[this.childrenListKey].length) : true);\n        });\n        if (this.childRowKey) {\n          // 过滤子级\n          const rowData = filterSelectedData.map(item => {\n            item[this.childrenListKey] = item[this.childrenListKey].filter(child => item._selectedKeys.includes(child[this.childRowKey]));\n            return item;\n          });\n          // 返回子级合集\n          if (type === 'margeChild') {\n            return func(this.initDataSelectState(rowData.reduce((prev, next) => {\n              return prev.concat(next[this.childrenListKey]);\n            }, [])));\n          }\n          if (type === 'delete') {\n            const masterData = [];\n            const childData = [];\n            newRowData.forEach(item => {\n              if (item._selected) {\n                masterData.push(item);\n              } else if (item._selectedKeys ? item._selectedKeys.length : false) {\n                childData.push(item);\n              }\n            });\n            return func({\n              masterData: masterData,\n              childData: childData\n            });\n          }\n          return func(this.initDataSelectState(rowData));\n        }\n        func(this.tableSelection === 'single' ? this.initDataSelectState(filterSelectedData)[0] : this.initDataSelectState(filterSelectedData));\n      }, 0);\n    },\n    // 清空选中\n    clearSelection() {\n      this.rowData.forEach(item => {\n        item._selected = false;\n        item._selectedKeys = [];\n      });\n      this.refreshTable();\n    },\n    handleGridHeight(dataLength) {\n      // autoHeight=true\n      // 1、高度为自适应\n      // 2、没数据100\n      // 3、有高度 高于15条设为高度 heightinif\n      const gridHeight = this.heightinif;\n      if (this.autoHeight) {\n        if (+dataLength === 0) {\n          const headerHeight = this.headerTotal ? 34 : 0;\n          const footerHeight = this.footerTotal ? 32 : 0;\n          const paginationHeight = this.paginationinif ? 34 : 0;\n          this.gridHeight = 100 + headerHeight + footerHeight + paginationHeight;\n        } else if (+dataLength >= 15 && gridHeight) {\n          this.gridHeight = gridHeight;\n        } else {\n          this.gridHeight = 0;\n          this.$refs.stGrid.$el.style.height = 'auto';\n          this.gridApi.setDomLayout('autoHeight');\n        }\n      }\n    },\n    // 加载表格数据 不传参数从第一页\n    loadTableData(pagination = this.pagination) {\n      if (typeof this.loadData === 'function') {\n        if (this.showLoading) {\n          this.gridOptions.api.showLoadingOverlay();\n          this.gridOptions.overlayNoRowsTemplate = `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.noData')}<span>`;\n        }\n        this.loadData(pagination).then((data, heightCount) => {\n          let total = 0;\n          if (typeof data === 'number') {\n            total = data;\n          } else if (data && data.totalElements) {\n            total = data.totalElements;\n          } else if (data && data.length) {\n            total = data.length;\n          }\n          if (total === 0) {\n            this.gridApi.showNoRowsOverlay();\n          }\n          this.handleGridHeight(heightCount || total);\n          this.pagination.total = total;\n          this.pagination.page = pagination.page;\n          this.pagination.limit = pagination.limit;\n        }).catch(() => {\n          this.handleGridHeight(0);\n          this.gridApi.showNoRowsOverlay();\n          console.error(`请检查loadData`);\n        });\n      }\n    },\n    // 重新加载\n    reloadTableData() {\n      this.loadTableData(this.pagination);\n    },\n    // 刷新aggrid表格\n    refreshTable() {\n      this.gridApi.forEachNode(node => {\n        const detailNode = node.detailNode;\n        detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.refreshCells({\n          force: true\n        });\n      });\n      this.gridApi.refreshCells({\n        force: true\n      });\n    },\n    // 取消所有子表编辑状态\n    stopChildEditing(parentId = null) {\n      this.gridApi.forEachNode(node => {\n        const detailNode = node.detailNode;\n        if (node.id !== parentId) {\n          detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.stopEditing();\n        }\n      });\n    },\n    // isAutoSizeColumnsHeader\n    // isAutoSizeColumns\n    onGridReady(params) {\n      this.gridApi = params.api;\n      this.columnApi = params.columnApi;\n      if (this.isSizeColumnsToFit) {\n        this.gridApi.sizeColumnsToFit();\n      }\n      if (this.isAutoSizeColumns || this.isAutoSizeColumnsHeader) {\n        this.handleAutoSizeColumns();\n      }\n      if (this.autoLoadData) {\n        this.loadTableData();\n      }\n      this.$emit('gridReady', params);\n    },\n    getAutoSizeFnSkipHeaderParams() {\n      const c = this.isAutoSizeColumns;\n      const ch = this.isAutoSizeColumnsHeader;\n      // 两者设置则错误提示，默认不跳过header的自适应\n      if (c && ch) {\n        console.error('isAutoSizeColumns与isAutoSizeColumnsHeader属性仅能设置一个');\n        return false;\n      }\n      //   isAutoSizeColumns true  and isAutoSizeColumnsHeader false  skipheader = true\n      //   isAutoSizeColumns false  and isAutoSizeColumnsHeader true  skipheader = false\n      return !ch && c ? true : !(ch && !c);\n    },\n    handleAutoSizeColumns() {\n      const allColumnIds = [];\n      this.columnApi.getColumns().forEach(column => {\n        allColumnIds.push(column.getId());\n      });\n      // 获取 skipheader参数\n      this.columnApi.autoSizeColumns(allColumnIds, this.getAutoSizeFnSkipHeaderParams()); // 是否跳过header\n    },\n\n    pageChange(pagination) {\n      this.pagination.page = pagination.page;\n      this.pagination.limit = pagination.limit;\n      this.$emit('pageChange', pagination);\n      this.reloadTableData(pagination);\n    },\n    setAgContext(key, ctx) {\n      this.gridOptions.context[key] = ctx;\n    },\n    setAgDetailContext(key, ctx) {\n      this.gridOptions.detailCellRendererParams.detailGridOptions.context[key] = ctx;\n    }\n  }\n};","map":{"version":3,"names":["Vue","AgGridVue","AllModules","AG_GRID_LOCALE_CN","childHeaderSelect","childSelect","headerSelect","parentSelect","headerDefSelect","defSelect","TableInput","imageViewer","gridTotal","localPagination","handleGridColumnDefs","handleGridChildColumnDefs","deepClone","name","components","props","paginationinif","type","Boolean","default","defaultPage","Number","String","defaultPageSize","heightinif","autoHeight","minHeight","columnDefs","Array","frameworkComponents","Object","rowData","tableSelection","validator","value","indexOf","isSizeColumnsToFit","autoLoadData","rowKey","required","loadData","Function","isSubtable","childColumnDefs","childrenListKey","childRowKey","childAllSelect","loadDetail","handleDetailCount","headerTotal","footerTotal","fullRowType","disablePaste","applyColumnDefOrder","additionalOptions","detailOptions","showLoading","isAutoSizeColumns","isAutoSizeColumnsHeader","enableZeroValue","data","initClass1","initClass2","initStyle1","initStyle2","gridShow","gridApi","columnApi","gridOptions","gridColumnDefs","gridChildColumnDefs","childColumnDefs_","columnWidth","gridHeight","pagination","total","page","limit","onHeaderDefSelect","selected","$emit","onDefSelect","params","computed","gridStyle","style","height","scrollStyle","userAgent","navigator","toLowerCase","preg","RegExp","test","watch","newVal","oldVal","initGridOptions","$nextTick","deep","handler","newValue","oldValue","forEachNode","v","_selectedKeys","_selected","length","setSelected","detailNode","detailGridInfo","api","o","oState","handleGridHeight","handlePinnedBottomRowData","created","localStorage","getItem","methods","columnCount","fillWidth","_fill","_this","hasSecMeter","some","item","children","suppressClipboardPaste","embedFullWidthRows","extend","context","componentParent","rowHeight","headerHeight","defaultColDef","cellStyle","filter","sortable","resizable","editType","overlayLoadingTemplate","$t","overlayNoRowsTemplate","localeText","rowSelection","suppressRowClickSelection","enableRangeSelection","masterDetail","isRowMaster","dataItem","hasLoadDetail","onRowClicked","stopChildEditing","onRowDoubleClicked","path","event","el","className","includes","onCellValueChanged","refreshTable","onCellEditingStopped","onRowValueChanged","onRowGroupOpened","expanded","getColumnState","width","setColumnWidth","onColumnResized","source","finished","node","sizeColumnsToFit","index","detailCellRendererParams","detailGridOptions","suppressHorizontalScroll","suppressMenu","onCellEditingStarted","parentId","onRowEditingStarted","onGridReady","setTimeout","columnModel","bodyWidth","scrollWidth","columnController","columns","colId","actualWidth","field","getDetailRowData","callRecords","map","parent","id","_selectedDisabled","Promise","r","successCallback","then","handleDetailRow","isSelectAll","cLength","parentRowIndex","queryNode","detail_row","document","querySelectorAll","from","forEach","row_id","parentElement","attributes","insertDom","commonClass","push","createChildRowElement","evenOdd","div","createElement","classList","add","firstTop","perTop","fragment","createDocumentFragment","i","top","appendChild","rowNode","getDetailGridInfo","childSelectedList","selectedItem","find","setPinnedBottomRowData","_childCount","handlSelectionChange","selectedNodes","getSelectedNodes","selectedKeys","initDataSelectState","arr","getSelectedData","func","newRowData","filterSelectedData","element","rowIndex","child","reduce","prev","next","concat","masterData","childData","clearSelection","dataLength","footerHeight","paginationHeight","$refs","stGrid","$el","setDomLayout","loadTableData","showLoadingOverlay","heightCount","totalElements","showNoRowsOverlay","catch","console","error","reloadTableData","refreshCells","force","stopEditing","handleAutoSizeColumns","getAutoSizeFnSkipHeaderParams","c","ch","allColumnIds","getColumns","column","getId","autoSizeColumns","pageChange","setAgContext","key","ctx","setAgDetailContext"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/CommonAgGrid/src/index.vue"],"sourcesContent":["<!--\n    @component steelTradeAggrid 钢贸aggrid表格组件\n    @props\n        {Array} columnDefs - 主表列配置  []\n        {Array} rowData - 表格数据 []\n        {String} tableSelection 选择模式 null\n        {Boolean} autoLoadData 表格加载完成第一次自动加载数据\n        {String} rowKey 行唯一键值(例如sId) 必填\n        {Boolean} isSubtable 是否主子表 false\n        {Array} childColumnDefs 子表列配置 []\n        {String} childrenListKey 子表数据存在的key '_details'\n        {String} childRowKey 子表键值 若拥有子表必填 ''\n        {Boolean} childAllSelect 子表是否可以全选\n        {Function} loadDetail 懒加载子表方法 需要返回promise {}\n        {Array} headerTotal 头部合计数组 具体参考本文件夹gridTotal的countList参数\n        {Array} footerTotal 底部合计数组 具体参考本文件夹gridTotal的countList参数\n        {Funciton} handleDetailCount 子表合计方法 入参{detail object}详情对象 需要返回 Array\n          [{ count: 1,key:'count' },\n          { title: '已到票未到货数量', count: 3, unit: '吨' },\n          { title: '金额', count: 3, unit: '元' }]\n        {String} fullRowType 全行编辑配置 null 可配置all parent child\n    @events\n        {Object} rowClicked 主表点击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} rowDoubleClicked 主表双击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} childRowClicked 子表点击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} childRowDoubleClicked 子表双击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} selectedChange rowData watch\n            @param {Array} 选中数据\n    @methods\n        {Function} clearSelection 清空选中\n        {Function} refreshTable 刷新表格\n        {Function} pageChange 调用传入{page: 0, limit: 20}即初始化分页重新获取\n        {Function} getSelectedData 调用返回表格选中数据 若传入margeChild则返回所选所有子级的合集\n        {Function} stopChildEditing 取消所有子表编辑状态\n    @author 青木/KYUUTA\n    @date 2020-12-15 11:00:25\n    @update 2021-02-01 17:07:20\n-->\n<template>\n  <ag-grid-wrap\n    v-if=\"gridShow\"\n    ref=\"stGrid\"\n    class=\"steel-trade-aggrid\"\n    :style=\"gridStyle\"\n  >\n    <div\n      v-if=\"rowData.length > 0 && ($slots.header || headerTotal)\"\n      class=\"steel-trade-aggrid-row steel-trade-aggrid-header\"\n    >\n      <slot v-if=\"$slots.header\" name=\"header\" />\n      <gridTotal v-else flag=\"header\" :count-list=\"headerTotal\" />\n    </div>\n    <ag-grid-vue\n      :class=\"[\n        'table',\n        'ag-theme-balham',\n        'grid-class',\n        'master-detail',\n        scrollStyle,\n        initClass1,\n        initClass2\n      ]\"\n      :style=\"`height: 100%;${initStyle1};${initStyle2}`\"\n      :grid-options=\"gridOptions\"\n      :column-defs=\"gridColumnDefs\"\n      :row-data=\"rowData\"\n      :modules=\"AllModules\"\n      :detail-row-auto-height=\"isSubtable\"\n      :apply-column-def-order=\"applyColumnDefOrder\"\n      v-bind=\"$attrs\"\n      @grid-ready=\"onGridReady\"\n      @selection-changed=\"handlSelectionChange\"\n    />\n    <local-pagination\n      v-if=\"paginationinif\"\n      :total=\"pagination.total\"\n      :page=\"pagination.page\"\n      :limit=\"pagination.limit\"\n      :event=\"pageChange\"\n    >\n      <template slot=\"pagination-left\">\n        <div\n          v-if=\"$slots.footer || footerTotal\"\n          class=\"steel-trade-aggrid-row steel-trade-aggrid-footer\"\n        >\n          <slot v-if=\"$slots.footer\" name=\"footer\" />\n          <gridTotal v-else flag=\"footer\" :count-list=\"footerTotal\" />\n        </div>\n      </template>\n    </local-pagination>\n  </ag-grid-wrap>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { AgGridVue } from 'ag-grid-vue'\nimport { AllModules } from 'ag-grid-enterprise'\nimport { AG_GRID_LOCALE_CN } from '../../../../lib/lang/ag-grid.zh.js'\nimport childHeaderSelect from '../../AgGridExtend/childHeaderSelect'\nimport childSelect from '../../AgGridExtend/childSelect'\nimport headerSelect from '../../AgGridExtend/headerSelect'\nimport parentSelect from '../../AgGridExtend/parentSelect'\nimport headerDefSelect from '../../AgGridExtend/headerDefSelect'\nimport defSelect from '../../AgGridExtend/defSelect'\nimport TableInput from './TableInput.vue'\nimport imageViewer from './imageViewer.vue'\nimport gridTotal from './gridTotal'\nimport localPagination from '../../Pagination/index.js'\n\nimport { handleGridColumnDefs, handleGridChildColumnDefs } from './columnDefs'\n\nimport { deepClone } from './utils.js'\n\nimport '../../../../lib/styles/components/CommonAgGrid.scss'\nexport default {\n  name: 'CommonAgGrid',\n  components: { AgGridVue, gridTotal, imageViewer, localPagination },\n  props: {\n    // 是否需要分页\n    paginationinif: {\n      type: Boolean,\n      default: true\n    },\n    // 默认页数\n    defaultPage: {\n      type: [Number, String],\n      default: 0\n    },\n    // 默认页码\n    defaultPageSize: {\n      type: [Number, String],\n      default: 30\n    },\n    // heightinif 表格高度\n    heightinif: {\n      type: [Number, String],\n      default: 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: false\n    },\n    // autoHeight为true时，minHeight生效\n    minHeight: {\n      type: [Number, String],\n      default: 100\n    },\n    // 主标列配置\n    columnDefs: {\n      type: Array,\n      default: () => []\n    },\n    frameworkComponents: {\n      type: Object,\n      default: () => {}\n    },\n    // 表格数据\n    rowData: {\n      type: Array,\n      default: () => []\n    },\n    // 选择模式\n    tableSelection: {\n      type: String,\n      default: null,\n      validator: function(value) {\n        return ['single', 'multiple', null].indexOf(value) !== -1\n      }\n    },\n    // 自适应\n    isSizeColumnsToFit: {\n      type: Boolean,\n      default: false\n    },\n    // 自动加载数据\n    autoLoadData: {\n      type: Boolean,\n      default: true\n    },\n    // 行唯一键值\n    rowKey: {\n      type: String,\n      required: true\n    },\n    // 加载事件用于翻页\n    loadData: {\n      type: Function,\n      default: null\n    },\n    // 是否主子表\n    isSubtable: {\n      type: Boolean,\n      default: false\n    },\n    // 子表列配置\n    childColumnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 子表数据存放属性\n    childrenListKey: {\n      type: String,\n      default: '_details'\n    },\n    // 子表键值\n    childRowKey: {\n      type: String,\n      default: ''\n    },\n    // 子表是否可以全选\n    childAllSelect: {\n      type: Boolean,\n      default: false\n    },\n    // 懒加载子表方法\n    loadDetail: {\n      type: Function,\n      default: null\n    },\n    handleDetailCount: {\n      type: [Function, Object],\n      default: null\n    },\n    // 头部合计\n    headerTotal: {\n      type: Array,\n      default: null\n    },\n    // 底部合计\n    footerTotal: {\n      type: Array,\n      default: null\n    },\n    // 是否全行编辑 all parent child\n    fullRowType: {\n      type: String,\n      default: null\n    },\n    // 是否禁用黏贴 all parent child\n    disablePaste: {\n      type: String,\n      default: null\n    },\n    // 重新设置表头 恢复排序\n    applyColumnDefOrder: {\n      type: Boolean,\n      default: true\n    },\n    additionalOptions: {\n      type: Object,\n      default: () => {}\n    },\n    detailOptions: {\n      type: Object,\n      default: () => {}\n    },\n    showLoading: {\n      type: Boolean,\n      default: true\n    },\n    isAutoSizeColumns: {\n      type: Boolean,\n      default: false\n    },\n    isAutoSizeColumnsHeader: {\n      type: Boolean,\n      default: false\n    },\n    enableZeroValue: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      initClass1: '',\n      initClass2: '',\n      initStyle1: '',\n      initStyle2: '',\n      AllModules,\n      gridShow: true,\n      gridApi: null,\n      columnApi: null,\n      gridOptions: null,\n      gridColumnDefs: [],\n      gridChildColumnDefs: [],\n      childColumnDefs_: [],\n      columnWidth: 0,\n      gridHeight: 0,\n      pagination: {\n        total: 0,\n        page: 0,\n        limit: 30\n      },\n      onHeaderDefSelect: (selected) => {\n        this.$emit('headerSelected', selected)\n      },\n      onDefSelect: (params, selected) => {\n        this.$emit('rowSelected', params, selected)\n      }\n    }\n  },\n  computed: {\n    gridStyle() {\n      const style = {}\n      const gridHeight = +this.gridHeight\n      if (gridHeight > 0) {\n        style.height = `${gridHeight}px`\n      }\n      return style\n    },\n    scrollStyle() {\n      const userAgent = navigator.userAgent.toLowerCase()\n      const preg = new RegExp('windows|win32|win64|wow32|wow64', 'g')\n      return preg.test(userAgent) ? 'scroll-style' : ''\n    }\n  },\n  watch: {\n    fullRowType(newVal, oldVal) {\n      this.gridShow = false\n      this.initGridOptions()\n      this.$nextTick(() => {\n        this.gridShow = true\n      })\n    },\n    rowData: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (this.gridApi) {\n          this.$nextTick(() => {\n            this.gridApi.forEachNode((v) => {\n              const _selectedKeys = v.data._selectedKeys || []\n              const _selected = v.data._selected || _selectedKeys.length > 0\n              v.selected = !_selected\n              v.setSelected(_selected, true, true)\n              if (v.detailNode && v.detailNode.detailGridInfo) {\n                v.detailNode.detailGridInfo.api.forEachNode((o) => {\n                  const oState =\n                    _selectedKeys.indexOf(o.data[this.childRowKey]) !== -1\n                  o.selected = !oState\n                  o.setSelected(oState, true, true)\n                })\n              }\n            })\n          })\n        }\n        this.$emit('selectedChange', newValue)\n        if (newValue.length <= 1) {\n          this.handleGridHeight(newValue.length)\n        }\n        this.handlePinnedBottomRowData(newValue)\n      }\n    }\n  },\n  created() {\n    this.pagination.page = this.defaultPage\n    this.pagination.limit = this.defaultPageSize\n    this.gridChildColumnDefs = this.childColumnDefs\n    if (!this.autoHeight) {\n      this.gridHeight = this.heightinif\n    }\n    const initClass1 = localStorage.getItem('spaceClass')\n    const initClass2 = localStorage.getItem('themeClass')\n    const initStyle1 = localStorage.getItem('agColorStyle')\n    const initStyle2 = localStorage.getItem('agSpaceStyle')\n    this.initClass1 = initClass1 != null ? initClass1 : 'spacing-default'\n    this.initClass2 = initClass2 != null ? initClass2 : 'spacing-default'\n    this.initStyle1 = initStyle1 != null ? initStyle1 : ''\n    this.initStyle2 = initStyle2 != null ? initStyle2 : ''\n    this.initGridOptions()\n  },\n  methods: {\n    initGridOptions() {\n      let columnCount = 0\n      let fillWidth = 0\n      let _fill = 0\n      const _this = this\n      const fullRowType = this.fullRowType\n      const hasSecMeter = this.columnDefs.some((item) => item.children)\n      const disablePaste = this.disablePaste\n      const gridOptions = {\n        suppressClipboardPaste: !!(\n          disablePaste === 'all' || disablePaste === 'parent'\n        ),\n        embedFullWidthRows: true,\n        frameworkComponents: {\n          TableInput: Vue.extend(TableInput),\n          headerSelect: Vue.extend(headerSelect),\n          parentSelect: Vue.extend(parentSelect),\n          headerDefSelect: Vue.extend(headerDefSelect),\n          defSelect: Vue.extend(defSelect),\n          imageViewer: Vue.extend(imageViewer),\n          ...this.frameworkComponents\n        },\n        context: {\n          componentParent: this,\n          rowKey: this.rowKey,\n          childRowKey: this.childRowKey,\n          childrenListKey: this.childrenListKey,\n          tableSelection: this.tableSelection,\n          onHeaderDefSelect: this.onHeaderDefSelect,\n          onDefSelect: this.onDefSelect,\n          loadDetail: this.loadDetail,\n          enableZeroValue: this.enableZeroValue\n        },\n        rowHeight: 36,\n        headerHeight: 32,\n        defaultColDef: {\n          cellStyle: {\n            'line-height': '36px'\n          },\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        editType:\n          fullRowType === 'all' || fullRowType === 'parent' ? 'fullRow' : null,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t(\n          'grid.others.dataLoading'\n        )}...</span>`,\n        overlayNoRowsTemplate: `<span><span>`,\n        localeText: AG_GRID_LOCALE_CN,\n        rowSelection: this.tableSelection,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        masterDetail: this.isSubtable,\n        //* *************设置固定行样式**********\n        // 公共样式已统一配置\n        // getRowStyle: (params) => {\n        //   if (params.node.rowPinned) {\n        //     return { 'color': '#3e8ddc', 'border-top': '2px solid #3e8ddc !important', 'font-weight': '600', 'border-bottom': '0' }\n        //   }\n        // },\n        isRowMaster: (dataItem) => {\n          const hasLoadDetail = typeof this.loadDetail === 'function'\n          return (\n            (this.isSubtable &&\n              dataItem[this.childrenListKey] &&\n              dataItem[this.childrenListKey].length) ||\n            hasLoadDetail\n          )\n        },\n        onRowClicked: (params) => {\n          this.stopChildEditing()\n          this.$emit('rowClicked', params)\n        },\n        onRowDoubleClicked: (params) => {\n          const path = params.event.path || []\n          const el = path.length ? path[0] : null\n          if (el && el.className.includes('ag-icon')) {\n            return\n          }\n          this.$emit('rowDoubleClicked', params)\n        },\n        onCellValueChanged: (params) => {\n          this.refreshTable()\n          this.$emit('cellValueChanged', params)\n        },\n        onCellEditingStopped: (params) => {\n          this.$emit('cellEditingStopped', params)\n        },\n        onRowValueChanged: (params) => {\n          this.$emit('rowValueChanged', params)\n        },\n        onRowGroupOpened: (params) => {\n          params.expanded ? columnCount++ : columnCount--\n          if (_fill === 0) {\n            fillWidth =\n              params.columnApi.getColumnState()[\n                params.columnApi.getColumnState().length - 1\n              ].width\n            _fill = 1\n          }\n          columnCount === 0 &&\n            gridOptions.columnApi.setColumnWidth('fill', fillWidth, true)\n          this.$emit('rowGroupOpened', params)\n        },\n        onColumnResized: (params) => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode((node) => {\n              const detailNode = node.detailNode\n              detailNode &&\n                detailNode.detailGridInfo &&\n                detailNode.detailGridInfo.api.sizeColumnsToFit()\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi\n                  .getColumnState()\n                  .filter((item, index) => {\n                    _this.gridChildColumnDefs[index].width = item.width\n                  })\n              }\n            })\n          }\n        },\n        ...this.additionalOptions\n      }\n      this.gridColumnDefs = handleGridColumnDefs(\n        this.isSubtable,\n        hasSecMeter,\n        this.tableSelection,\n        this.columnDefs,\n        this.childAllSelect\n      )\n      if (this.isSubtable) {\n        gridOptions.masterDetail = true\n        // 子表配置\n        gridOptions.detailCellRendererParams = {\n          detailGridOptions: {\n            suppressClipboardPaste: !!(\n              disablePaste === 'all' || disablePaste === 'child'\n            ),\n            suppressHorizontalScroll: false,\n            frameworkComponents: {\n              childHeaderSelect: Vue.extend(childHeaderSelect),\n              TableInput: Vue.extend(TableInput),\n              childSelect: Vue.extend(childSelect),\n              imageViewer: Vue.extend(imageViewer),\n              ..._this.frameworkComponents\n            },\n            columnDefs: handleGridChildColumnDefs(\n              hasSecMeter,\n              this.tableSelection,\n              this.gridChildColumnDefs,\n              this.childAllSelect\n            ),\n            context: gridOptions.context,\n            rowHeight: 36,\n            headerHeight: 33,\n            defaultColDef: {\n              cellStyle: {\n                'line-height': '36px'\n              },\n              filter: true,\n              sortable: true,\n              resizable: true,\n              suppressMenu: true // 子表不显示头部菜单\n            },\n            editType:\n              fullRowType === 'all' || fullRowType === 'child'\n                ? 'fullRow'\n                : null,\n            overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t(\n              'grid.others.dataLoading'\n            )}...</span>`,\n            overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t(\n              'grid.others.noData'\n            )}<span>`,\n            localeText: AG_GRID_LOCALE_CN,\n            rowSelection: 'multiple',\n            suppressRowClickSelection: true,\n            enableRangeSelection: true,\n            onRowClicked: (params) => {\n              this.$emit('childRowClicked', params)\n            },\n            onRowDoubleClicked: (params) => {\n              this.$emit('childRowDoubleClicked', params)\n            },\n\n            onCellEditingStarted: (params) => {\n              // 清空其他子级编辑 全行编辑 不执行\n              if (!(fullRowType === 'all' || fullRowType === 'child')) {\n                _this.stopChildEditing(params.data.parentId)\n              }\n            },\n            onCellEditingStopped: (params) => {\n              this.$emit('childCellEditingStopped', params)\n            },\n            onCellValueChanged: (params) => {\n              this.refreshTable()\n              this.$emit('childCellValueChanged', params)\n            },\n            onRowEditingStarted: (params) => {\n              // 清空其他子级编辑\n              _this.stopChildEditing(params.data.parentId)\n            },\n            onRowValueChanged: (params) => {\n              this.$emit('childRowValueChanged', params)\n            },\n\n            onGridReady: function(params) {\n              if (this.isSizeColumnsToFit) {\n                params.columnApi.sizeColumnsToFit()\n              } else {\n                columnCount === 1 &&\n                  setTimeout(() => {\n                    _this.columnWidth =\n                      fillWidth +\n                      params.columnApi.columnModel.bodyWidth -\n                      params.columnApi.columnModel.scrollWidth\n\n                    gridOptions.columnApi.setColumnWidth(\n                      'fill',\n                      _this.columnWidth,\n                      true\n                    )\n                    params.columnApi.getColumnState().filter((item, index) => {\n                      _this.gridChildColumnDefs[index] &&\n                        (_this.gridChildColumnDefs[index].width =\n                          params.columnApi.getColumnState()[index + 1].width)\n                    })\n                  }, 300)\n              }\n              _this.$emit('childReady')\n            },\n            onColumnResized: function(params) {\n              if (params.source === 'uiColumnDragged' && params.finished) {\n                _this.columnWidth =\n                  _this.columnWidth +\n                  params.columnApi.columnController.bodyWidth -\n                  params.columnApi.columnController.scrollWidth\n                gridOptions.columnApi.setColumnWidth(\n                  'fill',\n                  _this.columnWidth,\n                  true\n                )\n                gridOptions.api.forEachNode((node) => {\n                  const detailNode = node.detailNode\n                  detailNode &&\n                    detailNode.detailGridInfo &&\n                    detailNode.detailGridInfo.columnApi.setColumnWidth(\n                      params.columns[0].colId,\n                      params.columns[0].actualWidth,\n                      true\n                    )\n                })\n                _this.childColumnDefs_.filter((item, index) => {\n                  if (item.field === params.columns[0].colId) {\n                    _this.childColumnDefs_[index].width =\n                      params.columns[0].actualWidth\n                  }\n                })\n              }\n            },\n            ...this.detailOptions\n          },\n          getDetailRowData: async(params) => {\n            const { childrenListKey, childRowKey } = this\n\n            if (typeof this.loadDetail === 'function') {\n              params.data[childrenListKey] = await this.loadDetail(params.data)\n            }\n\n            if (params.data[childrenListKey]) {\n              const callRecords = params.data[childrenListKey].map((item) => {\n                return {\n                  ...item,\n                  parentId: params.node.parent.id\n                }\n              })\n              if (params.data._selected) {\n                params.data._selectedKeys = params.data[childrenListKey].map(\n                  (item) => {\n                    if (!item._selectedDisabled) {\n                      return item[childRowKey]\n                    }\n                  }\n                )\n              }\n              new Promise((r) => {\n                params.successCallback(callRecords)\n                r(callRecords)\n              }).then(() => {\n                if (this.gridOptions.embedFullWidthRows) {\n                  this.handleDetailRow(\n                    params,\n                    callRecords,\n                    params.data._selectedKeys.length === callRecords.length\n                  )\n                }\n              })\n            } else {\n              params.successCallback([])\n            }\n          }\n        }\n      }\n      this.gridOptions = gridOptions\n    },\n    handleDetailRow(params, callRecords, isSelectAll) {\n      if (!callRecords.length) return\n      const cLength = callRecords.length\n      const parentRowIndex = params.node.parent.id\n      this.$nextTick(() => {\n        const queryNode = '.ag-pinned-left-cols-container .ag-details-row'\n        const detail_row = document.querySelectorAll(queryNode)\n        if (!detail_row.length) return\n        let el = null\n        Array.from(detail_row).forEach((item) => {\n          const row_id = item.parentElement.attributes['row-id'].value\n          const parentId = `detail_${parentRowIndex}`\n          el = row_id === parentId ? item : null\n        })\n        if (!el) return\n        this.insertDom(el, cLength, isSelectAll)\n      })\n    },\n    insertDom(el, cLength, isSelectAll) {\n      const commonClass = [\n        'ag-row-no-focus',\n        'ag-row',\n        'ag-row-level-1',\n        'ag-row-position-absolute',\n        'ag-row-first',\n        'customer-dom'\n      ]\n      isSelectAll\n        ? commonClass.push(...['ag-row-focus', 'ag-row-selected'])\n        : null\n      const createChildRowElement = (evenOdd, commonClass, style) => {\n        const div = document.createElement('div')\n        div.classList.add(...[...commonClass, evenOdd])\n        div.style = style\n        return div\n      }\n      const firstTop = 34\n      const perTop = 36\n      const fragment = document.createDocumentFragment()\n      for (let i = 0; i < cLength; i++) {\n        let evenOdd = null\n        evenOdd = (i & 1) === 0 ? 'ag-row-even' : 'ag-row-odd'\n        const top = firstTop + i * perTop + 'px'\n        const style = `top:${top}`\n        fragment.appendChild(createChildRowElement(evenOdd, commonClass, style))\n      }\n      el.appendChild(fragment)\n    },\n    handlePinnedBottomRowData(newValue) {\n      if (typeof this.handleDetailCount === 'function') {\n        newValue.forEach((item, index) => {\n          const rowNode = this.gridApi.getDetailGridInfo(`detail_${index}`)\n          if (item._selectedKeys.length > 0) {\n            const childSelectedList = []\n            for (const childRowKey of item._selectedKeys) {\n              const selectedItem = item[this.childrenListKey].find((el) => {\n                return el[this.childRowKey] === childRowKey\n              })\n              childSelectedList.push(selectedItem)\n            }\n            rowNode &&\n              rowNode.api.setPinnedBottomRowData([\n                { _childCount: this.handleDetailCount(childSelectedList) }\n              ])\n          } else {\n            rowNode && rowNode.api.setPinnedBottomRowData([])\n          }\n        })\n      }\n    },\n    handlSelectionChange() {\n      const selectedNodes = this.gridApi.getSelectedNodes()\n      const selectedKeys = selectedNodes.map((item) => item.data[this.rowKey])\n      this.rowData.forEach((item) => {\n        if (selectedKeys.includes(item[this.rowKey])) {\n          item._selected = true\n        } else {\n          item._selected = false\n        }\n      })\n    },\n    initDataSelectState(arr) {\n      return arr.map((item) => {\n        item._selected = false\n        item._selectedKeys = []\n        return item\n      })\n    },\n    getSelectedData(func, type = null) {\n      setTimeout(() => {\n        const newRowData = deepClone(this.rowData)\n        const filterSelectedData = newRowData\n          .map((element, index) => {\n            return {\n              rowIndex: index + 1,\n              ...element\n            }\n          })\n          .filter((item) => {\n            return (\n              (item._selected ||\n                (item._selectedKeys ? item._selectedKeys.length : false)) &&\n              (this.childRowKey\n                ? !!(\n                  item[this.childrenListKey] &&\n                    item[this.childrenListKey].length\n                )\n                : true)\n            )\n          })\n\n        if (this.childRowKey) {\n          // 过滤子级\n          const rowData = filterSelectedData.map((item) => {\n            item[this.childrenListKey] = item[this.childrenListKey].filter(\n              (child) => item._selectedKeys.includes(child[this.childRowKey])\n            )\n            return item\n          })\n          // 返回子级合集\n          if (type === 'margeChild') {\n            return func(\n              this.initDataSelectState(\n                rowData.reduce((prev, next) => {\n                  return prev.concat(next[this.childrenListKey])\n                }, [])\n              )\n            )\n          }\n          if (type === 'delete') {\n            const masterData = []\n            const childData = []\n\n            newRowData.forEach((item) => {\n              if (item._selected) {\n                masterData.push(item)\n              } else if (\n                item._selectedKeys ? item._selectedKeys.length : false\n              ) {\n                childData.push(item)\n              }\n            })\n\n            return func({\n              masterData: masterData,\n              childData: childData\n            })\n          }\n\n          return func(this.initDataSelectState(rowData))\n        }\n\n        func(\n          this.tableSelection === 'single'\n            ? this.initDataSelectState(filterSelectedData)[0]\n            : this.initDataSelectState(filterSelectedData)\n        )\n      }, 0)\n    },\n    // 清空选中\n    clearSelection() {\n      this.rowData.forEach((item) => {\n        item._selected = false\n        item._selectedKeys = []\n      })\n      this.refreshTable()\n    },\n    handleGridHeight(dataLength) {\n      // autoHeight=true\n      // 1、高度为自适应\n      // 2、没数据100\n      // 3、有高度 高于15条设为高度 heightinif\n      const gridHeight = this.heightinif\n      if (this.autoHeight) {\n        if (+dataLength === 0) {\n          const headerHeight = this.headerTotal ? 34 : 0\n          const footerHeight = this.footerTotal ? 32 : 0\n          const paginationHeight = this.paginationinif ? 34 : 0\n          this.gridHeight = 100 + headerHeight + footerHeight + paginationHeight\n        } else if (+dataLength >= 15 && gridHeight) {\n          this.gridHeight = gridHeight\n        } else {\n          this.gridHeight = 0\n          this.$refs.stGrid.$el.style.height = 'auto'\n          this.gridApi.setDomLayout('autoHeight')\n        }\n      }\n    },\n    // 加载表格数据 不传参数从第一页\n    loadTableData(\n      pagination = this.pagination\n    ) {\n      if (typeof this.loadData === 'function') {\n        if (this.showLoading) {\n          this.gridOptions.api.showLoadingOverlay()\n          this.gridOptions.overlayNoRowsTemplate = `<span class=\"ag-overlay-loading-center\">${this.$t(\n            'grid.others.noData'\n          )}<span>`\n        }\n        this.loadData(pagination)\n          .then((data, heightCount) => {\n            let total = 0\n            if (typeof data === 'number') {\n              total = data\n            } else if (data && data.totalElements) {\n              total = data.totalElements\n            } else if (data && data.length) {\n              total = data.length\n            }\n            if (total === 0) {\n              this.gridApi.showNoRowsOverlay()\n            }\n            this.handleGridHeight(heightCount || total)\n            this.pagination.total = total\n            this.pagination.page = pagination.page\n            this.pagination.limit = pagination.limit\n          })\n          .catch(() => {\n            this.handleGridHeight(0)\n            this.gridApi.showNoRowsOverlay()\n            console.error(`请检查loadData`)\n          })\n      }\n    },\n    // 重新加载\n    reloadTableData() {\n      this.loadTableData(this.pagination)\n    },\n    // 刷新aggrid表格\n    refreshTable() {\n      this.gridApi.forEachNode((node) => {\n        const detailNode = node.detailNode\n        detailNode &&\n          detailNode.detailGridInfo &&\n          detailNode.detailGridInfo.api.refreshCells({ force: true })\n      })\n      this.gridApi.refreshCells({ force: true })\n    },\n    // 取消所有子表编辑状态\n    stopChildEditing(parentId = null) {\n      this.gridApi.forEachNode((node) => {\n        const detailNode = node.detailNode\n        if (node.id !== parentId) {\n          detailNode &&\n            detailNode.detailGridInfo &&\n            detailNode.detailGridInfo.api.stopEditing()\n        }\n      })\n    },\n    // isAutoSizeColumnsHeader\n    // isAutoSizeColumns\n    onGridReady(params) {\n      this.gridApi = params.api\n      this.columnApi = params.columnApi\n      if (this.isSizeColumnsToFit) {\n        this.gridApi.sizeColumnsToFit()\n      }\n      if (this.isAutoSizeColumns || this.isAutoSizeColumnsHeader) {\n        this.handleAutoSizeColumns()\n      }\n      if (this.autoLoadData) {\n        this.loadTableData()\n      }\n      this.$emit('gridReady', params)\n    },\n    getAutoSizeFnSkipHeaderParams() {\n      const c = this.isAutoSizeColumns\n      const ch = this.isAutoSizeColumnsHeader\n      // 两者设置则错误提示，默认不跳过header的自适应\n      if (c && ch) {\n        console.error('isAutoSizeColumns与isAutoSizeColumnsHeader属性仅能设置一个')\n        return false\n      }\n      //   isAutoSizeColumns true  and isAutoSizeColumnsHeader false  skipheader = true\n      //   isAutoSizeColumns false  and isAutoSizeColumnsHeader true  skipheader = false\n      return (!ch && c) ? true : !((ch && !c))\n    },\n    handleAutoSizeColumns() {\n      const allColumnIds = []\n      this.columnApi.getColumns().forEach((column) => {\n        allColumnIds.push(column.getId())\n      })\n      // 获取 skipheader参数\n      this.columnApi.autoSizeColumns(allColumnIds, this.getAutoSizeFnSkipHeaderParams()) // 是否跳过header\n    },\n    pageChange(pagination) {\n      this.pagination.page = pagination.page\n      this.pagination.limit = pagination.limit\n      this.$emit('pageChange', pagination)\n      this.reloadTableData(pagination)\n    },\n    setAgContext(key, ctx) {\n      this.gridOptions.context[key] = ctx\n    },\n    setAgDetailContext(key, ctx) {\n      this.gridOptions.detailCellRendererParams.detailGridOptions.context[key] = ctx\n    }\n  }\n}\n</script>\n"],"mappings":";AAkGA,OAAAA,GAAA;AACA,SAAAC,SAAA;AACA,SAAAC,UAAA;AACA,SAAAC,iBAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,WAAA;AACA,OAAAC,YAAA;AACA,OAAAC,YAAA;AACA,OAAAC,eAAA;AACA,OAAAC,SAAA;AACA,OAAAC,UAAA;AACA,OAAAC,WAAA;AACA,OAAAC,SAAA;AACA,OAAAC,eAAA;AAEA,SAAAC,oBAAA,EAAAC,yBAAA;AAEA,SAAAC,SAAA;AAEA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAjB,SAAA;IAAAW,SAAA;IAAAD,WAAA;IAAAE;EAAA;EACAM,KAAA;IACA;IACAC,cAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAC,WAAA;MACAH,IAAA,GAAAI,MAAA,EAAAC,MAAA;MACAH,OAAA;IACA;IACA;IACAI,eAAA;MACAN,IAAA,GAAAI,MAAA,EAAAC,MAAA;MACAH,OAAA;IACA;IACA;IACAK,UAAA;MACAP,IAAA,GAAAI,MAAA,EAAAC,MAAA;MACAH,OAAA;IACA;IACAM,UAAA;MACAR,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAO,SAAA;MACAT,IAAA,GAAAI,MAAA,EAAAC,MAAA;MACAH,OAAA;IACA;IACA;IACAQ,UAAA;MACAV,IAAA,EAAAW,KAAA;MACAT,OAAA,EAAAA,CAAA;IACA;IACAU,mBAAA;MACAZ,IAAA,EAAAa,MAAA;MACAX,OAAA,EAAAA,CAAA;IACA;IACA;IACAY,OAAA;MACAd,IAAA,EAAAW,KAAA;MACAT,OAAA,EAAAA,CAAA;IACA;IACA;IACAa,cAAA;MACAf,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAc,SAAA,WAAAA,CAAAC,KAAA;QACA,oCAAAC,OAAA,CAAAD,KAAA;MACA;IACA;IACA;IACAE,kBAAA;MACAnB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAkB,YAAA;MACApB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAmB,MAAA;MACArB,IAAA,EAAAK,MAAA;MACAiB,QAAA;IACA;IACA;IACAC,QAAA;MACAvB,IAAA,EAAAwB,QAAA;MACAtB,OAAA;IACA;IACA;IACAuB,UAAA;MACAzB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAwB,eAAA;MACA1B,IAAA,EAAAW,KAAA;MACAT,OAAA,EAAAA,CAAA;IACA;IACA;IACAyB,eAAA;MACA3B,IAAA,EAAAK,MAAA;MACAH,OAAA;IACA;IACA;IACA0B,WAAA;MACA5B,IAAA,EAAAK,MAAA;MACAH,OAAA;IACA;IACA;IACA2B,cAAA;MACA7B,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACA4B,UAAA;MACA9B,IAAA,EAAAwB,QAAA;MACAtB,OAAA;IACA;IACA6B,iBAAA;MACA/B,IAAA,GAAAwB,QAAA,EAAAX,MAAA;MACAX,OAAA;IACA;IACA;IACA8B,WAAA;MACAhC,IAAA,EAAAW,KAAA;MACAT,OAAA;IACA;IACA;IACA+B,WAAA;MACAjC,IAAA,EAAAW,KAAA;MACAT,OAAA;IACA;IACA;IACAgC,WAAA;MACAlC,IAAA,EAAAK,MAAA;MACAH,OAAA;IACA;IACA;IACAiC,YAAA;MACAnC,IAAA,EAAAK,MAAA;MACAH,OAAA;IACA;IACA;IACAkC,mBAAA;MACApC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACAmC,iBAAA;MACArC,IAAA,EAAAa,MAAA;MACAX,OAAA,EAAAA,CAAA;IACA;IACAoC,aAAA;MACAtC,IAAA,EAAAa,MAAA;MACAX,OAAA,EAAAA,CAAA;IACA;IACAqC,WAAA;MACAvC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACAsC,iBAAA;MACAxC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACAuC,uBAAA;MACAzC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACAwC,eAAA;MACA1C,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAyC,KAAA;IACA;MACAC,UAAA;MACAC,UAAA;MACAC,UAAA;MACAC,UAAA;MACAlE,UAAA;MACAmE,QAAA;MACAC,OAAA;MACAC,SAAA;MACAC,WAAA;MACAC,cAAA;MACAC,mBAAA;MACAC,gBAAA;MACAC,WAAA;MACAC,UAAA;MACAC,UAAA;QACAC,KAAA;QACAC,IAAA;QACAC,KAAA;MACA;MACAC,iBAAA,EAAAC,QAAA;QACA,KAAAC,KAAA,mBAAAD,QAAA;MACA;MACAE,WAAA,EAAAA,CAAAC,MAAA,EAAAH,QAAA;QACA,KAAAC,KAAA,gBAAAE,MAAA,EAAAH,QAAA;MACA;IACA;EACA;EACAI,QAAA;IACAC,UAAA;MACA,MAAAC,KAAA;MACA,MAAAZ,UAAA,SAAAA,UAAA;MACA,IAAAA,UAAA;QACAY,KAAA,CAAAC,MAAA,MAAAb,UAAA;MACA;MACA,OAAAY,KAAA;IACA;IACAE,YAAA;MACA,MAAAC,SAAA,GAAAC,SAAA,CAAAD,SAAA,CAAAE,WAAA;MACA,MAAAC,IAAA,OAAAC,MAAA;MACA,OAAAD,IAAA,CAAAE,IAAA,CAAAL,SAAA;IACA;EACA;EACAM,KAAA;IACA3C,YAAA4C,MAAA,EAAAC,MAAA;MACA,KAAA/B,QAAA;MACA,KAAAgC,eAAA;MACA,KAAAC,SAAA;QACA,KAAAjC,QAAA;MACA;IACA;IACAlC,OAAA;MACAoE,IAAA;MACAC,QAAAC,QAAA,EAAAC,QAAA;QACA,SAAApC,OAAA;UACA,KAAAgC,SAAA;YACA,KAAAhC,OAAA,CAAAqC,WAAA,CAAAC,CAAA;cACA,MAAAC,aAAA,GAAAD,CAAA,CAAA5C,IAAA,CAAA6C,aAAA;cACA,MAAAC,SAAA,GAAAF,CAAA,CAAA5C,IAAA,CAAA8C,SAAA,IAAAD,aAAA,CAAAE,MAAA;cACAH,CAAA,CAAAzB,QAAA,IAAA2B,SAAA;cACAF,CAAA,CAAAI,WAAA,CAAAF,SAAA;cACA,IAAAF,CAAA,CAAAK,UAAA,IAAAL,CAAA,CAAAK,UAAA,CAAAC,cAAA;gBACAN,CAAA,CAAAK,UAAA,CAAAC,cAAA,CAAAC,GAAA,CAAAR,WAAA,CAAAS,CAAA;kBACA,MAAAC,MAAA,GACAR,aAAA,CAAAtE,OAAA,CAAA6E,CAAA,CAAApD,IAAA,MAAAf,WAAA;kBACAmE,CAAA,CAAAjC,QAAA,IAAAkC,MAAA;kBACAD,CAAA,CAAAJ,WAAA,CAAAK,MAAA;gBACA;cACA;YACA;UACA;QACA;QACA,KAAAjC,KAAA,mBAAAqB,QAAA;QACA,IAAAA,QAAA,CAAAM,MAAA;UACA,KAAAO,gBAAA,CAAAb,QAAA,CAAAM,MAAA;QACA;QACA,KAAAQ,yBAAA,CAAAd,QAAA;MACA;IACA;EACA;EACAe,QAAA;IACA,KAAA1C,UAAA,CAAAE,IAAA,QAAAxD,WAAA;IACA,KAAAsD,UAAA,CAAAG,KAAA,QAAAtD,eAAA;IACA,KAAA+C,mBAAA,QAAA3B,eAAA;IACA,UAAAlB,UAAA;MACA,KAAAgD,UAAA,QAAAjD,UAAA;IACA;IACA,MAAAqC,UAAA,GAAAwD,YAAA,CAAAC,OAAA;IACA,MAAAxD,UAAA,GAAAuD,YAAA,CAAAC,OAAA;IACA,MAAAvD,UAAA,GAAAsD,YAAA,CAAAC,OAAA;IACA,MAAAtD,UAAA,GAAAqD,YAAA,CAAAC,OAAA;IACA,KAAAzD,UAAA,GAAAA,UAAA,WAAAA,UAAA;IACA,KAAAC,UAAA,GAAAA,UAAA,WAAAA,UAAA;IACA,KAAAC,UAAA,GAAAA,UAAA,WAAAA,UAAA;IACA,KAAAC,UAAA,GAAAA,UAAA,WAAAA,UAAA;IACA,KAAAiC,eAAA;EACA;EACAsB,OAAA;IACAtB,gBAAA;MACA,IAAAuB,WAAA;MACA,IAAAC,SAAA;MACA,IAAAC,KAAA;MACA,MAAAC,KAAA;MACA,MAAAxE,WAAA,QAAAA,WAAA;MACA,MAAAyE,WAAA,QAAAjG,UAAA,CAAAkG,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,QAAA;MACA,MAAA3E,YAAA,QAAAA,YAAA;MACA,MAAAgB,WAAA;QACA4D,sBAAA,KACA5E,YAAA,cAAAA,YAAA,cACA;QACA6E,kBAAA;QACApG,mBAAA;UACAvB,UAAA,EAAAV,GAAA,CAAAsI,MAAA,CAAA5H,UAAA;UACAJ,YAAA,EAAAN,GAAA,CAAAsI,MAAA,CAAAhI,YAAA;UACAC,YAAA,EAAAP,GAAA,CAAAsI,MAAA,CAAA/H,YAAA;UACAC,eAAA,EAAAR,GAAA,CAAAsI,MAAA,CAAA9H,eAAA;UACAC,SAAA,EAAAT,GAAA,CAAAsI,MAAA,CAAA7H,SAAA;UACAE,WAAA,EAAAX,GAAA,CAAAsI,MAAA,CAAA3H,WAAA;UACA,QAAAsB;QACA;QACAsG,OAAA;UACAC,eAAA;UACA9F,MAAA,OAAAA,MAAA;UACAO,WAAA,OAAAA,WAAA;UACAD,eAAA,OAAAA,eAAA;UACAZ,cAAA,OAAAA,cAAA;UACA8C,iBAAA,OAAAA,iBAAA;UACAG,WAAA,OAAAA,WAAA;UACAlC,UAAA,OAAAA,UAAA;UACAY,eAAA,OAAAA;QACA;QACA0E,SAAA;QACAC,YAAA;QACAC,aAAA;UACAC,SAAA;YACA;UACA;UACAC,MAAA;UACAC,QAAA;UACAC,SAAA;QACA;QACAC,QAAA,EACAzF,WAAA,cAAAA,WAAA;QACA0F,sBAAA,kDAAAC,EAAA,CACA,yBACA;QACAC,qBAAA;QACAC,UAAA,EAAAjJ,iBAAA;QACAkJ,YAAA,OAAAjH,cAAA;QACAkH,yBAAA;QACAC,oBAAA;QACAC,YAAA,OAAA1G,UAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA2G,WAAA,EAAAC,QAAA;UACA,MAAAC,aAAA,eAAAxG,UAAA;UACA,OACA,KAAAL,UAAA,IACA4G,QAAA,MAAA1G,eAAA,KACA0G,QAAA,MAAA1G,eAAA,EAAA+D,MAAA,IACA4C,aAAA;QAEA;QACAC,YAAA,EAAAtE,MAAA;UACA,KAAAuE,gBAAA;UACA,KAAAzE,KAAA,eAAAE,MAAA;QACA;QACAwE,kBAAA,EAAAxE,MAAA;UACA,MAAAyE,IAAA,GAAAzE,MAAA,CAAA0E,KAAA,CAAAD,IAAA;UACA,MAAAE,EAAA,GAAAF,IAAA,CAAAhD,MAAA,GAAAgD,IAAA;UACA,IAAAE,EAAA,IAAAA,EAAA,CAAAC,SAAA,CAAAC,QAAA;YACA;UACA;UACA,KAAA/E,KAAA,qBAAAE,MAAA;QACA;QACA8E,kBAAA,EAAA9E,MAAA;UACA,KAAA+E,YAAA;UACA,KAAAjF,KAAA,qBAAAE,MAAA;QACA;QACAgF,oBAAA,EAAAhF,MAAA;UACA,KAAAF,KAAA,uBAAAE,MAAA;QACA;QACAiF,iBAAA,EAAAjF,MAAA;UACA,KAAAF,KAAA,oBAAAE,MAAA;QACA;QACAkF,gBAAA,EAAAlF,MAAA;UACAA,MAAA,CAAAmF,QAAA,GAAA7C,WAAA,KAAAA,WAAA;UACA,IAAAE,KAAA;YACAD,SAAA,GACAvC,MAAA,CAAAf,SAAA,CAAAmG,cAAA,GACApF,MAAA,CAAAf,SAAA,CAAAmG,cAAA,GAAA3D,MAAA,KACA,CAAA4D,KAAA;YACA7C,KAAA;UACA;UACAF,WAAA,UACApD,WAAA,CAAAD,SAAA,CAAAqG,cAAA,SAAA/C,SAAA;UACA,KAAAzC,KAAA,mBAAAE,MAAA;QACA;QACAuF,eAAA,EAAAvF,MAAA;UACA,IAAAA,MAAA,CAAAwF,MAAA,0BAAAxF,MAAA,CAAAyF,QAAA;YACAvG,WAAA,CAAA2C,GAAA,CAAAR,WAAA,CAAAqE,IAAA;cACA,MAAA/D,UAAA,GAAA+D,IAAA,CAAA/D,UAAA;cACAA,UAAA,IACAA,UAAA,CAAAC,cAAA,IACAD,UAAA,CAAAC,cAAA,CAAAC,GAAA,CAAA8D,gBAAA;cACA,IAAAhE,UAAA,IAAAA,UAAA,CAAAC,cAAA;gBACAD,UAAA,CAAAC,cAAA,CAAA3C,SAAA,CACAmG,cAAA,GACA7B,MAAA,EAAAX,IAAA,EAAAgD,KAAA;kBACAnD,KAAA,CAAArD,mBAAA,CAAAwG,KAAA,EAAAP,KAAA,GAAAzC,IAAA,CAAAyC,KAAA;gBACA;cACA;YACA;UACA;QACA;QACA,QAAAjH;MACA;MACA,KAAAe,cAAA,GAAA3D,oBAAA,CACA,KAAAgC,UAAA,EACAkF,WAAA,EACA,KAAA5F,cAAA,EACA,KAAAL,UAAA,EACA,KAAAmB,cACA;MACA,SAAAJ,UAAA;QACA0B,WAAA,CAAAgF,YAAA;QACA;QACAhF,WAAA,CAAA2G,wBAAA;UACAC,iBAAA;YACAhD,sBAAA,KACA5E,YAAA,cAAAA,YAAA,aACA;YACA6H,wBAAA;YACApJ,mBAAA;cACA7B,iBAAA,EAAAJ,GAAA,CAAAsI,MAAA,CAAAlI,iBAAA;cACAM,UAAA,EAAAV,GAAA,CAAAsI,MAAA,CAAA5H,UAAA;cACAL,WAAA,EAAAL,GAAA,CAAAsI,MAAA,CAAAjI,WAAA;cACAM,WAAA,EAAAX,GAAA,CAAAsI,MAAA,CAAA3H,WAAA;cACA,GAAAoH,KAAA,CAAA9F;YACA;YACAF,UAAA,EAAAhB,yBAAA,CACAiH,WAAA,EACA,KAAA5F,cAAA,EACA,KAAAsC,mBAAA,EACA,KAAAxB,cACA;YACAqF,OAAA,EAAA/D,WAAA,CAAA+D,OAAA;YACAE,SAAA;YACAC,YAAA;YACAC,aAAA;cACAC,SAAA;gBACA;cACA;cACAC,MAAA;cACAC,QAAA;cACAC,SAAA;cACAuC,YAAA;YACA;;YACAtC,QAAA,EACAzF,WAAA,cAAAA,WAAA,eACA,YACA;YACA0F,sBAAA,kDAAAC,EAAA,CACA,yBACA;YACAC,qBAAA,kDAAAD,EAAA,CACA,oBACA;YACAE,UAAA,EAAAjJ,iBAAA;YACAkJ,YAAA;YACAC,yBAAA;YACAC,oBAAA;YACAK,YAAA,EAAAtE,MAAA;cACA,KAAAF,KAAA,oBAAAE,MAAA;YACA;YACAwE,kBAAA,EAAAxE,MAAA;cACA,KAAAF,KAAA,0BAAAE,MAAA;YACA;YAEAiG,oBAAA,EAAAjG,MAAA;cACA;cACA,MAAA/B,WAAA,cAAAA,WAAA;gBACAwE,KAAA,CAAA8B,gBAAA,CAAAvE,MAAA,CAAAtB,IAAA,CAAAwH,QAAA;cACA;YACA;YACAlB,oBAAA,EAAAhF,MAAA;cACA,KAAAF,KAAA,4BAAAE,MAAA;YACA;YACA8E,kBAAA,EAAA9E,MAAA;cACA,KAAA+E,YAAA;cACA,KAAAjF,KAAA,0BAAAE,MAAA;YACA;YACAmG,mBAAA,EAAAnG,MAAA;cACA;cACAyC,KAAA,CAAA8B,gBAAA,CAAAvE,MAAA,CAAAtB,IAAA,CAAAwH,QAAA;YACA;YACAjB,iBAAA,EAAAjF,MAAA;cACA,KAAAF,KAAA,yBAAAE,MAAA;YACA;YAEAoG,WAAA,WAAAA,CAAApG,MAAA;cACA,SAAA9C,kBAAA;gBACA8C,MAAA,CAAAf,SAAA,CAAA0G,gBAAA;cACA;gBACArD,WAAA,UACA+D,UAAA;kBACA5D,KAAA,CAAAnD,WAAA,GACAiD,SAAA,GACAvC,MAAA,CAAAf,SAAA,CAAAqH,WAAA,CAAAC,SAAA,GACAvG,MAAA,CAAAf,SAAA,CAAAqH,WAAA,CAAAE,WAAA;kBAEAtH,WAAA,CAAAD,SAAA,CAAAqG,cAAA,CACA,QACA7C,KAAA,CAAAnD,WAAA,EACA,IACA;kBACAU,MAAA,CAAAf,SAAA,CAAAmG,cAAA,GAAA7B,MAAA,EAAAX,IAAA,EAAAgD,KAAA;oBACAnD,KAAA,CAAArD,mBAAA,CAAAwG,KAAA,MACAnD,KAAA,CAAArD,mBAAA,CAAAwG,KAAA,EAAAP,KAAA,GACArF,MAAA,CAAAf,SAAA,CAAAmG,cAAA,GAAAQ,KAAA,MAAAP,KAAA;kBACA;gBACA;cACA;cACA5C,KAAA,CAAA3C,KAAA;YACA;YACAyF,eAAA,WAAAA,CAAAvF,MAAA;cACA,IAAAA,MAAA,CAAAwF,MAAA,0BAAAxF,MAAA,CAAAyF,QAAA;gBACAhD,KAAA,CAAAnD,WAAA,GACAmD,KAAA,CAAAnD,WAAA,GACAU,MAAA,CAAAf,SAAA,CAAAwH,gBAAA,CAAAF,SAAA,GACAvG,MAAA,CAAAf,SAAA,CAAAwH,gBAAA,CAAAD,WAAA;gBACAtH,WAAA,CAAAD,SAAA,CAAAqG,cAAA,CACA,QACA7C,KAAA,CAAAnD,WAAA,EACA,IACA;gBACAJ,WAAA,CAAA2C,GAAA,CAAAR,WAAA,CAAAqE,IAAA;kBACA,MAAA/D,UAAA,GAAA+D,IAAA,CAAA/D,UAAA;kBACAA,UAAA,IACAA,UAAA,CAAAC,cAAA,IACAD,UAAA,CAAAC,cAAA,CAAA3C,SAAA,CAAAqG,cAAA,CACAtF,MAAA,CAAA0G,OAAA,IAAAC,KAAA,EACA3G,MAAA,CAAA0G,OAAA,IAAAE,WAAA,EACA,IACA;gBACA;gBACAnE,KAAA,CAAApD,gBAAA,CAAAkE,MAAA,EAAAX,IAAA,EAAAgD,KAAA;kBACA,IAAAhD,IAAA,CAAAiE,KAAA,KAAA7G,MAAA,CAAA0G,OAAA,IAAAC,KAAA;oBACAlE,KAAA,CAAApD,gBAAA,CAAAuG,KAAA,EAAAP,KAAA,GACArF,MAAA,CAAA0G,OAAA,IAAAE,WAAA;kBACA;gBACA;cACA;YACA;YACA,QAAAvI;UACA;UACAyI,gBAAA,QAAA9G,MAAA;YACA;cAAAtC,eAAA;cAAAC;YAAA;YAEA,gBAAAE,UAAA;cACAmC,MAAA,CAAAtB,IAAA,CAAAhB,eAAA,eAAAG,UAAA,CAAAmC,MAAA,CAAAtB,IAAA;YACA;YAEA,IAAAsB,MAAA,CAAAtB,IAAA,CAAAhB,eAAA;cACA,MAAAqJ,WAAA,GAAA/G,MAAA,CAAAtB,IAAA,CAAAhB,eAAA,EAAAsJ,GAAA,CAAApE,IAAA;gBACA;kBACA,GAAAA,IAAA;kBACAsD,QAAA,EAAAlG,MAAA,CAAA0F,IAAA,CAAAuB,MAAA,CAAAC;gBACA;cACA;cACA,IAAAlH,MAAA,CAAAtB,IAAA,CAAA8C,SAAA;gBACAxB,MAAA,CAAAtB,IAAA,CAAA6C,aAAA,GAAAvB,MAAA,CAAAtB,IAAA,CAAAhB,eAAA,EAAAsJ,GAAA,CACApE,IAAA;kBACA,KAAAA,IAAA,CAAAuE,iBAAA;oBACA,OAAAvE,IAAA,CAAAjF,WAAA;kBACA;gBACA,CACA;cACA;cACA,IAAAyJ,OAAA,CAAAC,CAAA;gBACArH,MAAA,CAAAsH,eAAA,CAAAP,WAAA;gBACAM,CAAA,CAAAN,WAAA;cACA,GAAAQ,IAAA;gBACA,SAAArI,WAAA,CAAA6D,kBAAA;kBACA,KAAAyE,eAAA,CACAxH,MAAA,EACA+G,WAAA,EACA/G,MAAA,CAAAtB,IAAA,CAAA6C,aAAA,CAAAE,MAAA,KAAAsF,WAAA,CAAAtF,MACA;gBACA;cACA;YACA;cACAzB,MAAA,CAAAsH,eAAA;YACA;UACA;QACA;MACA;MACA,KAAApI,WAAA,GAAAA,WAAA;IACA;IACAsI,gBAAAxH,MAAA,EAAA+G,WAAA,EAAAU,WAAA;MACA,KAAAV,WAAA,CAAAtF,MAAA;MACA,MAAAiG,OAAA,GAAAX,WAAA,CAAAtF,MAAA;MACA,MAAAkG,cAAA,GAAA3H,MAAA,CAAA0F,IAAA,CAAAuB,MAAA,CAAAC,EAAA;MACA,KAAAlG,SAAA;QACA,MAAA4G,SAAA;QACA,MAAAC,UAAA,GAAAC,QAAA,CAAAC,gBAAA,CAAAH,SAAA;QACA,KAAAC,UAAA,CAAApG,MAAA;QACA,IAAAkD,EAAA;QACAjI,KAAA,CAAAsL,IAAA,CAAAH,UAAA,EAAAI,OAAA,CAAArF,IAAA;UACA,MAAAsF,MAAA,GAAAtF,IAAA,CAAAuF,aAAA,CAAAC,UAAA,WAAApL,KAAA;UACA,MAAAkJ,QAAA,aAAAyB,cAAA;UACAhD,EAAA,GAAAuD,MAAA,KAAAhC,QAAA,GAAAtD,IAAA;QACA;QACA,KAAA+B,EAAA;QACA,KAAA0D,SAAA,CAAA1D,EAAA,EAAA+C,OAAA,EAAAD,WAAA;MACA;IACA;IACAY,UAAA1D,EAAA,EAAA+C,OAAA,EAAAD,WAAA;MACA,MAAAa,WAAA,IACA,mBACA,UACA,kBACA,4BACA,gBACA,eACA;MACAb,WAAA,GACAa,WAAA,CAAAC,IAAA,2CACA;MACA,MAAAC,qBAAA,GAAAA,CAAAC,OAAA,EAAAH,WAAA,EAAAnI,KAAA;QACA,MAAAuI,GAAA,GAAAZ,QAAA,CAAAa,aAAA;QACAD,GAAA,CAAAE,SAAA,CAAAC,GAAA,QAAAP,WAAA,EAAAG,OAAA;QACAC,GAAA,CAAAvI,KAAA,GAAAA,KAAA;QACA,OAAAuI,GAAA;MACA;MACA,MAAAI,QAAA;MACA,MAAAC,MAAA;MACA,MAAAC,QAAA,GAAAlB,QAAA,CAAAmB,sBAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAxB,OAAA,EAAAwB,CAAA;QACA,IAAAT,OAAA;QACAA,OAAA,IAAAS,CAAA;QACA,MAAAC,GAAA,GAAAL,QAAA,GAAAI,CAAA,GAAAH,MAAA;QACA,MAAA5I,KAAA,UAAAgJ,GAAA;QACAH,QAAA,CAAAI,WAAA,CAAAZ,qBAAA,CAAAC,OAAA,EAAAH,WAAA,EAAAnI,KAAA;MACA;MACAwE,EAAA,CAAAyE,WAAA,CAAAJ,QAAA;IACA;IACA/G,0BAAAd,QAAA;MACA,gBAAArD,iBAAA;QACAqD,QAAA,CAAA8G,OAAA,EAAArF,IAAA,EAAAgD,KAAA;UACA,MAAAyD,OAAA,QAAArK,OAAA,CAAAsK,iBAAA,WAAA1D,KAAA;UACA,IAAAhD,IAAA,CAAArB,aAAA,CAAAE,MAAA;YACA,MAAA8H,iBAAA;YACA,WAAA5L,WAAA,IAAAiF,IAAA,CAAArB,aAAA;cACA,MAAAiI,YAAA,GAAA5G,IAAA,MAAAlF,eAAA,EAAA+L,IAAA,CAAA9E,EAAA;gBACA,OAAAA,EAAA,MAAAhH,WAAA,MAAAA,WAAA;cACA;cACA4L,iBAAA,CAAAhB,IAAA,CAAAiB,YAAA;YACA;YACAH,OAAA,IACAA,OAAA,CAAAxH,GAAA,CAAA6H,sBAAA,EACA;cAAAC,WAAA,OAAA7L,iBAAA,CAAAyL,iBAAA;YAAA,EACA;UACA;YACAF,OAAA,IAAAA,OAAA,CAAAxH,GAAA,CAAA6H,sBAAA;UACA;QACA;MACA;IACA;IACAE,qBAAA;MACA,MAAAC,aAAA,QAAA7K,OAAA,CAAA8K,gBAAA;MACA,MAAAC,YAAA,GAAAF,aAAA,CAAA7C,GAAA,CAAApE,IAAA,IAAAA,IAAA,CAAAlE,IAAA,MAAAtB,MAAA;MACA,KAAAP,OAAA,CAAAoL,OAAA,CAAArF,IAAA;QACA,IAAAmH,YAAA,CAAAlF,QAAA,CAAAjC,IAAA,MAAAxF,MAAA;UACAwF,IAAA,CAAApB,SAAA;QACA;UACAoB,IAAA,CAAApB,SAAA;QACA;MACA;IACA;IACAwI,oBAAAC,GAAA;MACA,OAAAA,GAAA,CAAAjD,GAAA,CAAApE,IAAA;QACAA,IAAA,CAAApB,SAAA;QACAoB,IAAA,CAAArB,aAAA;QACA,OAAAqB,IAAA;MACA;IACA;IACAsH,gBAAAC,IAAA,EAAApO,IAAA;MACAsK,UAAA;QACA,MAAA+D,UAAA,GAAA1O,SAAA,MAAAmB,OAAA;QACA,MAAAwN,kBAAA,GAAAD,UAAA,CACApD,GAAA,EAAAsD,OAAA,EAAA1E,KAAA;UACA;YACA2E,QAAA,EAAA3E,KAAA;YACA,GAAA0E;UACA;QACA,GACA/G,MAAA,CAAAX,IAAA;UACA,OACA,CAAAA,IAAA,CAAApB,SAAA,KACAoB,IAAA,CAAArB,aAAA,GAAAqB,IAAA,CAAArB,aAAA,CAAAE,MAAA,eACA,KAAA9D,WAAA,GACA,GACAiF,IAAA,MAAAlF,eAAA,KACAkF,IAAA,MAAAlF,eAAA,EAAA+D,MAAA,CACA,GACA;QAEA;QAEA,SAAA9D,WAAA;UACA;UACA,MAAAd,OAAA,GAAAwN,kBAAA,CAAArD,GAAA,CAAApE,IAAA;YACAA,IAAA,MAAAlF,eAAA,IAAAkF,IAAA,MAAAlF,eAAA,EAAA6F,MAAA,CACAiH,KAAA,IAAA5H,IAAA,CAAArB,aAAA,CAAAsD,QAAA,CAAA2F,KAAA,MAAA7M,WAAA,EACA;YACA,OAAAiF,IAAA;UACA;UACA;UACA,IAAA7G,IAAA;YACA,OAAAoO,IAAA,CACA,KAAAH,mBAAA,CACAnN,OAAA,CAAA4N,MAAA,EAAAC,IAAA,EAAAC,IAAA;cACA,OAAAD,IAAA,CAAAE,MAAA,CAAAD,IAAA,MAAAjN,eAAA;YACA,MACA,CACA;UACA;UACA,IAAA3B,IAAA;YACA,MAAA8O,UAAA;YACA,MAAAC,SAAA;YAEAV,UAAA,CAAAnC,OAAA,CAAArF,IAAA;cACA,IAAAA,IAAA,CAAApB,SAAA;gBACAqJ,UAAA,CAAAtC,IAAA,CAAA3F,IAAA;cACA,WACAA,IAAA,CAAArB,aAAA,GAAAqB,IAAA,CAAArB,aAAA,CAAAE,MAAA,UACA;gBACAqJ,SAAA,CAAAvC,IAAA,CAAA3F,IAAA;cACA;YACA;YAEA,OAAAuH,IAAA;cACAU,UAAA,EAAAA,UAAA;cACAC,SAAA,EAAAA;YACA;UACA;UAEA,OAAAX,IAAA,MAAAH,mBAAA,CAAAnN,OAAA;QACA;QAEAsN,IAAA,CACA,KAAArN,cAAA,gBACA,KAAAkN,mBAAA,CAAAK,kBAAA,OACA,KAAAL,mBAAA,CAAAK,kBAAA,CACA;MACA;IACA;IACA;IACAU,eAAA;MACA,KAAAlO,OAAA,CAAAoL,OAAA,CAAArF,IAAA;QACAA,IAAA,CAAApB,SAAA;QACAoB,IAAA,CAAArB,aAAA;MACA;MACA,KAAAwD,YAAA;IACA;IACA/C,iBAAAgJ,UAAA;MACA;MACA;MACA;MACA;MACA,MAAAzL,UAAA,QAAAjD,UAAA;MACA,SAAAC,UAAA;QACA,KAAAyO,UAAA;UACA,MAAA5H,YAAA,QAAArF,WAAA;UACA,MAAAkN,YAAA,QAAAjN,WAAA;UACA,MAAAkN,gBAAA,QAAApP,cAAA;UACA,KAAAyD,UAAA,SAAA6D,YAAA,GAAA6H,YAAA,GAAAC,gBAAA;QACA,YAAAF,UAAA,UAAAzL,UAAA;UACA,KAAAA,UAAA,GAAAA,UAAA;QACA;UACA,KAAAA,UAAA;UACA,KAAA4L,KAAA,CAAAC,MAAA,CAAAC,GAAA,CAAAlL,KAAA,CAAAC,MAAA;UACA,KAAApB,OAAA,CAAAsM,YAAA;QACA;MACA;IACA;IACA;IACAC,cACA/L,UAAA,QAAAA,UAAA,EACA;MACA,gBAAAlC,QAAA;QACA,SAAAgB,WAAA;UACA,KAAAY,WAAA,CAAA2C,GAAA,CAAA2J,kBAAA;UACA,KAAAtM,WAAA,CAAA2E,qBAAA,mDAAAD,EAAA,CACA,oBACA;QACA;QACA,KAAAtG,QAAA,CAAAkC,UAAA,EACA+H,IAAA,EAAA7I,IAAA,EAAA+M,WAAA;UACA,IAAAhM,KAAA;UACA,WAAAf,IAAA;YACAe,KAAA,GAAAf,IAAA;UACA,WAAAA,IAAA,IAAAA,IAAA,CAAAgN,aAAA;YACAjM,KAAA,GAAAf,IAAA,CAAAgN,aAAA;UACA,WAAAhN,IAAA,IAAAA,IAAA,CAAA+C,MAAA;YACAhC,KAAA,GAAAf,IAAA,CAAA+C,MAAA;UACA;UACA,IAAAhC,KAAA;YACA,KAAAT,OAAA,CAAA2M,iBAAA;UACA;UACA,KAAA3J,gBAAA,CAAAyJ,WAAA,IAAAhM,KAAA;UACA,KAAAD,UAAA,CAAAC,KAAA,GAAAA,KAAA;UACA,KAAAD,UAAA,CAAAE,IAAA,GAAAF,UAAA,CAAAE,IAAA;UACA,KAAAF,UAAA,CAAAG,KAAA,GAAAH,UAAA,CAAAG,KAAA;QACA,GACAiM,KAAA;UACA,KAAA5J,gBAAA;UACA,KAAAhD,OAAA,CAAA2M,iBAAA;UACAE,OAAA,CAAAC,KAAA;QACA;MACA;IACA;IACA;IACAC,gBAAA;MACA,KAAAR,aAAA,MAAA/L,UAAA;IACA;IACA;IACAuF,aAAA;MACA,KAAA/F,OAAA,CAAAqC,WAAA,CAAAqE,IAAA;QACA,MAAA/D,UAAA,GAAA+D,IAAA,CAAA/D,UAAA;QACAA,UAAA,IACAA,UAAA,CAAAC,cAAA,IACAD,UAAA,CAAAC,cAAA,CAAAC,GAAA,CAAAmK,YAAA;UAAAC,KAAA;QAAA;MACA;MACA,KAAAjN,OAAA,CAAAgN,YAAA;QAAAC,KAAA;MAAA;IACA;IACA;IACA1H,iBAAA2B,QAAA;MACA,KAAAlH,OAAA,CAAAqC,WAAA,CAAAqE,IAAA;QACA,MAAA/D,UAAA,GAAA+D,IAAA,CAAA/D,UAAA;QACA,IAAA+D,IAAA,CAAAwB,EAAA,KAAAhB,QAAA;UACAvE,UAAA,IACAA,UAAA,CAAAC,cAAA,IACAD,UAAA,CAAAC,cAAA,CAAAC,GAAA,CAAAqK,WAAA;QACA;MACA;IACA;IACA;IACA;IACA9F,YAAApG,MAAA;MACA,KAAAhB,OAAA,GAAAgB,MAAA,CAAA6B,GAAA;MACA,KAAA5C,SAAA,GAAAe,MAAA,CAAAf,SAAA;MACA,SAAA/B,kBAAA;QACA,KAAA8B,OAAA,CAAA2G,gBAAA;MACA;MACA,SAAApH,iBAAA,SAAAC,uBAAA;QACA,KAAA2N,qBAAA;MACA;MACA,SAAAhP,YAAA;QACA,KAAAoO,aAAA;MACA;MACA,KAAAzL,KAAA,cAAAE,MAAA;IACA;IACAoM,8BAAA;MACA,MAAAC,CAAA,QAAA9N,iBAAA;MACA,MAAA+N,EAAA,QAAA9N,uBAAA;MACA;MACA,IAAA6N,CAAA,IAAAC,EAAA;QACAT,OAAA,CAAAC,KAAA;QACA;MACA;MACA;MACA;MACA,QAAAQ,EAAA,IAAAD,CAAA,YAAAC,EAAA,KAAAD,CAAA;IACA;IACAF,sBAAA;MACA,MAAAI,YAAA;MACA,KAAAtN,SAAA,CAAAuN,UAAA,GAAAvE,OAAA,CAAAwE,MAAA;QACAF,YAAA,CAAAhE,IAAA,CAAAkE,MAAA,CAAAC,KAAA;MACA;MACA;MACA,KAAAzN,SAAA,CAAA0N,eAAA,CAAAJ,YAAA,OAAAH,6BAAA;IACA;;IACAQ,WAAApN,UAAA;MACA,KAAAA,UAAA,CAAAE,IAAA,GAAAF,UAAA,CAAAE,IAAA;MACA,KAAAF,UAAA,CAAAG,KAAA,GAAAH,UAAA,CAAAG,KAAA;MACA,KAAAG,KAAA,eAAAN,UAAA;MACA,KAAAuM,eAAA,CAAAvM,UAAA;IACA;IACAqN,aAAAC,GAAA,EAAAC,GAAA;MACA,KAAA7N,WAAA,CAAA+D,OAAA,CAAA6J,GAAA,IAAAC,GAAA;IACA;IACAC,mBAAAF,GAAA,EAAAC,GAAA;MACA,KAAA7N,WAAA,CAAA2G,wBAAA,CAAAC,iBAAA,CAAA7C,OAAA,CAAA6J,GAAA,IAAAC,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}