{"ast":null,"code":"const tinycolor = require('tinycolor2');\nconst {\n  generate: generateAntDesignPalette\n} = require('@ant-design/colors');\nexport const zoom = () => {\n  let dpi = '';\n  let browserScale = '';\n  let windowsScale = '';\n\n  // 屏幕分辨率宽度（不受浏览器缩放影响，但受系统缩放影响）\n  // 例如显示器物理分辨率为 3840, win10 设置系统缩放 150%, 则返回 2560\n  const screenWidth = screen.width;\n\n  // 浏览器整体缩放（包含系统层面）\n  if (window.devicePixelRatio !== undefined) {\n    dpi = window.devicePixelRatio;\n    // eslint-disable-next-line no-undef\n  } else if (~ua.indexOf('msie')) {\n    if (screen.deviceXDPI && screen.logicalXDPI) {\n      dpi = screen.deviceXDPI / screen.logicalXDPI;\n    }\n  }\n\n  // 单浏览器缩放\n  if (window.outerWidth !== undefined && window.innerWidth !== undefined) {\n    // browserScale = Number((window.outerWidth / window.innerWidth).toFixed(2));\n    browserScale = window.outerWidth / window.innerWidth;\n  }\n\n  // 计算得到纯系统层面（仅对 windows 系统生效）\n  if (dpi && browserScale) {\n    // windowsScale = Number((dpi / browserScale).toFixed(2));\n    windowsScale = dpi / browserScale;\n  }\n  return {\n    dpi,\n    browserScale,\n    windowsScale,\n    screenWidth\n  };\n};\n/**\n * @description: 获得色阶css变量\n * @param {*} color 颜色\n * @param {*} colorName 颜色变量名\n * @param {*} count 色阶个数\n * @return {*} 返回色阶css变量 字符串\n */\nexport const getColorScaleCssVariable = (color, colorName, count = 10) => {\n  // 将输入的颜色值转换为 hex 格式\n  const hexColor = tinycolor(color).toHexString();\n  // 使用 Ant Design 3.x 色板生成算法生成色板\n  const antDesignPalette = generateAntDesignPalette(hexColor);\n  // 取出色板中的前 count 个颜色\n  const palette = antDesignPalette.slice(0, count);\n  const result = palette.map((color, index) => `--color-${colorName}-${index}: ${color};`).join('\\n');\n  return result;\n};\nexport const toggleCssLinks = (links, key) => {\n  const l = links[key];\n  if (!l) return;\n  // const el = document.querySelector(`[href='${l}']`);\n  const el = document.querySelector('[title=\"CubeTheme\"]');\n  // console.log('el', el);\n\n  // 如果已经有主题文件，更改 url；如果没有，则新建\n  if (el) {\n    el.setAttribute('href', l);\n  } else {\n    const link = document.createElement('link');\n    link.href = l;\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.title = 'CubeTheme';\n    document.head.appendChild(link);\n  }\n};","map":{"version":3,"names":["tinycolor","require","generate","generateAntDesignPalette","zoom","dpi","browserScale","windowsScale","screenWidth","screen","width","window","devicePixelRatio","undefined","ua","indexOf","deviceXDPI","logicalXDPI","outerWidth","innerWidth","getColorScaleCssVariable","color","colorName","count","hexColor","toHexString","antDesignPalette","palette","slice","result","map","index","join","toggleCssLinks","links","key","l","el","document","querySelector","setAttribute","link","createElement","href","rel","type","title","head","appendChild"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/src/components/ThemeEditor/src/util.js"],"sourcesContent":["const tinycolor = require('tinycolor2')\nconst { generate: generateAntDesignPalette } = require('@ant-design/colors')\n\nexport const zoom = () => {\n  let dpi = ''\n  let browserScale = ''\n  let windowsScale = ''\n\n  // 屏幕分辨率宽度（不受浏览器缩放影响，但受系统缩放影响）\n  // 例如显示器物理分辨率为 3840, win10 设置系统缩放 150%, 则返回 2560\n  const screenWidth = screen.width\n\n  // 浏览器整体缩放（包含系统层面）\n  if (window.devicePixelRatio !== undefined) {\n    dpi = window.devicePixelRatio\n    // eslint-disable-next-line no-undef\n  } else if (~ua.indexOf('msie')) {\n    if (screen.deviceXDPI && screen.logicalXDPI) {\n      dpi = screen.deviceXDPI / screen.logicalXDPI\n    }\n  }\n\n  // 单浏览器缩放\n  if (window.outerWidth !== undefined && window.innerWidth !== undefined) {\n    // browserScale = Number((window.outerWidth / window.innerWidth).toFixed(2));\n    browserScale = window.outerWidth / window.innerWidth\n  }\n\n  // 计算得到纯系统层面（仅对 windows 系统生效）\n  if (dpi && browserScale) {\n    // windowsScale = Number((dpi / browserScale).toFixed(2));\n    windowsScale = dpi / browserScale\n  }\n\n  return {\n    dpi,\n    browserScale,\n    windowsScale,\n    screenWidth\n  }\n}\n/**\n * @description: 获得色阶css变量\n * @param {*} color 颜色\n * @param {*} colorName 颜色变量名\n * @param {*} count 色阶个数\n * @return {*} 返回色阶css变量 字符串\n */\nexport const getColorScaleCssVariable = (color, colorName, count = 10) => {\n  // 将输入的颜色值转换为 hex 格式\n  const hexColor = tinycolor(color).toHexString()\n  // 使用 Ant Design 3.x 色板生成算法生成色板\n  const antDesignPalette = generateAntDesignPalette(hexColor)\n  // 取出色板中的前 count 个颜色\n  const palette = antDesignPalette.slice(0, count)\n  const result = palette\n    .map((color, index) => `--color-${colorName}-${index}: ${color};`)\n    .join('\\n')\n  return result\n}\nexport const toggleCssLinks = (links, key) => {\n  const l = links[key]\n  if (!l) return\n  // const el = document.querySelector(`[href='${l}']`);\n  const el = document.querySelector('[title=\"CubeTheme\"]')\n  // console.log('el', el);\n\n  // 如果已经有主题文件，更改 url；如果没有，则新建\n  if (el) {\n    el.setAttribute('href', l)\n  } else {\n    const link = document.createElement('link')\n    link.href = l\n    link.rel = 'stylesheet'\n    link.type = 'text/css'\n    link.title = 'CubeTheme'\n    document.head.appendChild(link)\n  }\n}\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAM;EAAEC,QAAQ,EAAEC;AAAyB,CAAC,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAE5E,OAAO,MAAMG,IAAI,GAAGA,CAAA,KAAM;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,YAAY,GAAG,EAAE;;EAErB;EACA;EACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,KAAK;;EAEhC;EACA,IAAIC,MAAM,CAACC,gBAAgB,KAAKC,SAAS,EAAE;IACzCR,GAAG,GAAGM,MAAM,CAACC,gBAAgB;IAC7B;EACF,CAAC,MAAM,IAAI,CAACE,EAAE,CAACC,OAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,IAAIN,MAAM,CAACO,UAAU,IAAIP,MAAM,CAACQ,WAAW,EAAE;MAC3CZ,GAAG,GAAGI,MAAM,CAACO,UAAU,GAAGP,MAAM,CAACQ,WAAW;IAC9C;EACF;;EAEA;EACA,IAAIN,MAAM,CAACO,UAAU,KAAKL,SAAS,IAAIF,MAAM,CAACQ,UAAU,KAAKN,SAAS,EAAE;IACtE;IACAP,YAAY,GAAGK,MAAM,CAACO,UAAU,GAAGP,MAAM,CAACQ,UAAU;EACtD;;EAEA;EACA,IAAId,GAAG,IAAIC,YAAY,EAAE;IACvB;IACAC,YAAY,GAAGF,GAAG,GAAGC,YAAY;EACnC;EAEA,OAAO;IACLD,GAAG;IACHC,YAAY;IACZC,YAAY;IACZC;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,wBAAwB,GAAGA,CAACC,KAAK,EAAEC,SAAS,EAAEC,KAAK,GAAG,EAAE,KAAK;EACxE;EACA,MAAMC,QAAQ,GAAGxB,SAAS,CAACqB,KAAK,CAAC,CAACI,WAAW,CAAC,CAAC;EAC/C;EACA,MAAMC,gBAAgB,GAAGvB,wBAAwB,CAACqB,QAAQ,CAAC;EAC3D;EACA,MAAMG,OAAO,GAAGD,gBAAgB,CAACE,KAAK,CAAC,CAAC,EAAEL,KAAK,CAAC;EAChD,MAAMM,MAAM,GAAGF,OAAO,CACnBG,GAAG,CAAC,CAACT,KAAK,EAAEU,KAAK,KAAM,WAAUT,SAAU,IAAGS,KAAM,KAAIV,KAAM,GAAE,CAAC,CACjEW,IAAI,CAAC,IAAI,CAAC;EACb,OAAOH,MAAM;AACf,CAAC;AACD,OAAO,MAAMI,cAAc,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;EAC5C,MAAMC,CAAC,GAAGF,KAAK,CAACC,GAAG,CAAC;EACpB,IAAI,CAACC,CAAC,EAAE;EACR;EACA,MAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,qBAAqB,CAAC;EACxD;;EAEA;EACA,IAAIF,EAAE,EAAE;IACNA,EAAE,CAACG,YAAY,CAAC,MAAM,EAAEJ,CAAC,CAAC;EAC5B,CAAC,MAAM;IACL,MAAMK,IAAI,GAAGH,QAAQ,CAACI,aAAa,CAAC,MAAM,CAAC;IAC3CD,IAAI,CAACE,IAAI,GAAGP,CAAC;IACbK,IAAI,CAACG,GAAG,GAAG,YAAY;IACvBH,IAAI,CAACI,IAAI,GAAG,UAAU;IACtBJ,IAAI,CAACK,KAAK,GAAG,WAAW;IACxBR,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACP,IAAI,CAAC;EACjC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}