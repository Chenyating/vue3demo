{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 保存参数 选择参数\n// 必填校验功能\nimport moment from 'moment';\nimport '../../../../lib/styles/components/SearchForm.scss';\nimport analytics from '../../../utils/analytics';\nimport { Validate } from '@cndinfo/cube-web-utils';\nimport localFormItem from '../../FormItem/index.js';\nimport localFilterBtn from '../../FilterBtn/index.js';\nimport localFilter from '../../Filter/index.js';\nimport SearchTagGroup from '../../SearchTagGroup/src/index.vue';\nimport { deepClone } from '../../AgGrid/src/utils';\nexport default {\n  name: 'SearchForm',\n  components: {\n    localFormItem,\n    localFilterBtn,\n    localFilter,\n    SearchTagGroup\n  },\n  props: {\n    // 按钮组位置 top、bottom\n    type: {\n      type: String,\n      default: 'top'\n    },\n    // 表单项配置列表\n    formItems: {\n      type: Array,\n      required: true\n    },\n    // 表单label宽度\n    labelWidth: {\n      type: String,\n      default: '85px'\n    },\n    // 是否显示选择参数、保存参数按钮\n    paramsButton: {\n      type: Boolean,\n      default: true\n    },\n    // 是否自动查询\n    autoQuery: {\n      type: String,\n      default: ''\n    },\n    // 隐藏多余一行的内容\n    lineLimit: {\n      type: Boolean,\n      default: true\n    },\n    // 是否默认展开\n    isCollapse: {\n      type: [String, Boolean],\n      default: ''\n    }\n    // 默认展示行数\n    // rows: {\n    //   type: Number,\n    //   default: ''\n    // }\n    // 面板激活状态\n    // activePanel: {\n    //   type: String,\n    //   default: \"1\"\n    // }\n  },\n\n  data() {\n    return {\n      filterControlText: this.$t('components.viewMore'),\n      searchFormValues: {},\n      occultationShow: false,\n      SearchFormHeight: '',\n      formItemsReset: this.deepClone(this.formItems),\n      // formItemsReset: JSON.parse(JSON.stringify(this.formItems)),\n      tips: false,\n      // isAutoQuery: false,\n      isAutoQuery: this.autoQuery !== '' ? this.autoQuery : this.getAutoQuery('VUE_APP_AUTO_QUERY') ? this.getAutoQuery('VUE_APP_AUTO_QUERY') : false,\n      width: document.body.clientWidth,\n      num: 0,\n      searchInfo: this.initForm(),\n      searchRules: this.initFormRules(),\n      dateTimePick: this.initDateTimePick(),\n      splitFormItems: [],\n      pickerOptions: {\n        shortcuts: [{\n          text: this.$t('grid.others.lastWeek'),\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: this.$t('grid.others.mostRecentMonth'),\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: this.$t('grid.others.lastThreeMonths'),\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      isClickReset: false,\n      searchDataObject: {},\n      searchOtherObject: {},\n      searchCndInputDialogObject: {},\n      doubleInputObject: {},\n      activePanel: '1' // 面板激活状态\n    };\n  },\n\n  computed: {\n    className_() {\n      const className = ['search-form-collapse'];\n      className.push({\n        'search-form-occultation': this.occultationShow\n      });\n      className.push({\n        shadow: this.occultationShow && this.activePanel.length\n      });\n      return className;\n    },\n    formCardStyle() {\n      if (this.occultationShow && this.activePanel.length) {\n        return {\n          'min-height': this.SearchFormHeight ? this.SearchFormHeight + 'px' : 'auto',\n          transition: '0.3s'\n        };\n      } else if (this.occultationShow && !this.activePanel.length) {\n        return {\n          'min-height': '55px',\n          transition: '0.3s'\n        };\n      } else if (!this.occultationShow) {\n        return {\n          'min-height': 'auto',\n          transition: '0.3s'\n        };\n      }\n      return '';\n    },\n    formItemObj() {\n      const result = {};\n      this.formItems.forEach(v => {\n        // 数组类型的保存第一个字符串\n        if (v.type === 'elDatePicker' && Array.isArray(v.value)) {\n          result[v.value[0]] = v;\n        } else {\n          result[v.value] = v;\n        }\n      });\n      return result;\n    },\n    selectTag_() {\n      const result = [];\n      const keys = Object.entries(this.searchDataObject);\n      keys.forEach(([k, v]) => {\n        const item = this.formItemObj[k] || this.doubleInputObject[`_doubleInput${k}`];\n        // doubleInput 类型的 判断一波是否有值 -- 因为值是附在其他参数内的所以无法正常判断\n        if (item && item.type === 'doubleInput' && Array.isArray(item.value)) {\n          v = item.value.map(field => {\n            return this.searchDataObject[field];\n          }).filter(val => val);\n        }\n        // 去除空数组\n        if (Array.isArray(v)) {\n          v = v.length > 0;\n        }\n\n        // v 值内容已被改变，后期取值不要使用这边的v\n        // 有值、可以为0 、item不能为空、v的值不能为false对应的值（checkbox中true 和 false）\n        if ((v || v === 0) && item && v !== item.falseLabel) {\n          let value = '';\n          // 选择框\n          if (item.type === 'elSelect') {\n            // 字符串的话就是还没取到值\n            const list = Array.isArray(item.dict) ? item.dict : [];\n            const searchItem = this.searchDataObject[k];\n            const option = item.option || {};\n            const optionValue = option.value || 'value';\n            const optionLabel = option.label || 'label';\n            const searchItemArray = Array.isArray(searchItem) ? searchItem : [searchItem];\n            const labelList = searchItemArray.map(val => {\n              const record = list.find(item => item[optionValue] === val) || {};\n              return record[optionLabel] || record[optionValue] || val;\n            });\n            value = labelList.join('; ');\n          } else if (['cndInputDialog', 'cndInputDialogItem'].indexOf(item.type) !== -1) {\n            // 搜索选择框\n            const otterItem = this.searchCndInputDialogObject[k] || {};\n            value = otterItem.valueText || '';\n            if (!value) {\n              const searchItem = this.searchInfo[`_preview${k}`] || '';\n              if (Array.isArray(searchItem)) {\n                value = searchItem.join('; ');\n              } else {\n                value = searchItem;\n              }\n            }\n          } else if (item.type === 'elCheckbox') {\n            value = item.placeholder;\n          } else if (item.type === 'elDatePicker') {\n            value = item.value.map(o => moment(this.searchDataObject[o]).format('YYYY-MM-DD')).join(' 到 ');\n          } else if (item.type === 'elCascader') {\n            // 联级选择\n            const list = Array.isArray(item.dict) ? deepClone(item.dict) : [];\n            const flatList = [];\n            while (list.length) {\n              const record = list.pop();\n              const {\n                children,\n                ...restItem\n              } = record;\n              flatList.push(restItem);\n              if (Array.isArray(children) && children.length) {\n                list.push(...children);\n              }\n            }\n            const searchItem = this.searchDataObject[k];\n            const option = item.props || {};\n            const optionValue = option.value || 'value';\n            const optionLabel = option.label || 'label';\n            const searchItemArray = Array.isArray(searchItem) ? searchItem : [searchItem];\n            const labelList = searchItemArray.map(val => {\n              const record = flatList.find(item => item[optionValue] === val) || {};\n              return record[optionLabel] || record[optionValue] || val;\n            });\n            value = labelList.join('; ');\n          } else if (item.type === 'doubleInput') {\n            // 两个input\n            value = item.value.map(o => this.searchDataObject[o]).filter(o => o).join('; ');\n          } else {\n            value = v;\n          }\n\n          // 对于搜索select来说 无值的话就不显示了\n          // elCheckboxvalue无值\n          if (value || ['cndInputDialog', 'cndInputDialogItem'].indexOf(item.type) === -1) {\n            result.push({\n              ...item,\n              valueText: [item.label, value].filter(o => o).join(': ')\n            });\n          }\n        }\n      });\n      return result;\n    },\n    labelPosition_() {\n      return item => {\n        if (this.type === 'bottom') {\n          return 'left';\n        } else {\n          return 'top';\n        }\n      };\n    },\n    readOnlyFilter_() {\n      return this.activePanel.length === 0;\n    },\n    valueKey_() {\n      return item => {\n        if (item.option) {\n          return item.option.valueKey || item.option.value || 'value';\n        }\n        return 'value';\n      };\n    },\n    selectOptions_() {\n      return (item, key = 'options') => {\n        const config = Object.assign({\n          label: 'label',\n          value: 'value'\n        }, item.option);\n        const options = Array.isArray(item[key]) ? item[key] : [];\n        return options.map(v => {\n          return {\n            ...v,\n            _label: v[config.label],\n            _value: v[config.value]\n          };\n        });\n      };\n    }\n  },\n  watch: {\n    activePanel(value) {\n      try {\n        console.log(value);\n        if (Array.isArray(value)) {\n          // 收起卡片时候，关闭全部打开\n          if (this.occultationShow && !value.length) {\n            // 等待收起动画结束\n            setTimeout(() => {\n              this.collapseFilter(false);\n              // this.$refs.filterBtn.collapseFilter(false)\n            }, 500);\n          }\n          try {\n            const analyticsInstance = analytics.getAnalyticsInstance(this);\n            analyticsInstance.reportEvent('advanced_search_toggle', {\n              toggle_type: value.length === 2 ? 'unfold' : 'fold'\n            });\n          } catch (e) {\n            console.log();\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    formItems() {\n      this.filterWidth();\n    }\n  },\n  beforeMount() {\n    this.filterWidth();\n  },\n  created() {\n    window.addEventListener('keydown', this.handkeyCode, true); // 开启监听键盘按下事件\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      this.type === 'top' && (this.SearchFormHeight = this.$refs.SearchForm.$el.offsetHeight);\n    });\n    this.searchDataObject = this.getFormValues();\n    this.searchFormValues = this.getFormValues();\n    this.setSearchCndInputDialogObject();\n  },\n  methods: {\n    setSearchCndInputDialogObject() {\n      const record = {};\n      Object.keys(this.searchOtherObject).forEach(key => {\n        record[key] = this.searchOtherObject[key];\n      });\n      this.searchCndInputDialogObject = record;\n    },\n    getSelectOptionProps(record, item) {\n      const {\n        option,\n        getOptionProps\n      } = item || {};\n      const {\n        label,\n        value\n      } = option || {};\n      return {\n        label: record[label || 'label'],\n        value: record[value || 'value'],\n        ...getOptionProps?.(record)\n      };\n    },\n    // formItem 是否显示 outline\n    outlineType(type) {\n      const reg = new RegExp('elCheckbox|elCheckboxGroup|elSwitch|elRadioGroup', 'g');\n      return reg.test(type);\n    },\n    filterCallBack(val) {\n      this.isCollapse_ = val;\n    },\n    forEach(array, iteratee) {\n      let index = -1;\n      const length = array.length;\n      while (++index < length) {\n        iteratee(array[index], index);\n      }\n      return array;\n    },\n    // 深拷贝\n    deepClone(target, map = new WeakMap()) {\n      if (typeof target === 'object') {\n        const isArray = Array.isArray(target);\n        const cloneTarget = isArray ? [] : {};\n        if (map.get(target) || !target) {\n          return target;\n        }\n        map.set(target, cloneTarget);\n        const keys = isArray ? undefined : Object.keys(target);\n        this.forEach(keys || target, (value, key) => {\n          if (keys) {\n            key = value;\n          }\n          cloneTarget[key] = this.deepClone(target[key], map);\n        });\n        return cloneTarget;\n      } else {\n        return target;\n      }\n    },\n    collapseFilter(state = true) {\n      if (this.readOnlyFilter_ && state) return;\n      this.filterControlText = this.filterControlText === this.$t('components.collapse') ? this.$t('components.viewMore') : this.$t('components.collapse');\n      // this.rotate =\n      //   this.rotate === 'rotate(0deg)' ? 'rotate(180deg)' : 'rotate(0deg)'\n      this.occultationShow = !this.occultationShow;\n      this.$refs.cndFilter.collapseFilter();\n      // this.$emit('collapseFilter')\n    },\n\n    handkeyCode(event) {\n      if (event.ctrlKey && event.keyCode === 13) {\n        this.submit(true, true);\n      }\n    },\n    getAutoQuery(name) {\n      return window.configs && window.configs[name] && process.env.NODE_ENV !== 'development' ? window.configs[name] : process.env[name];\n    },\n    filterWidth() {\n      const width = document.body.clientWidth;\n      let num = 24;\n      width >= 1200 ? num = 24 : width <= 767 ? num = 12 : num = 16;\n      this.splitFormItem(num);\n    },\n    // 分组隐藏和显示\n    splitFormItem(num) {\n      let length = 0;\n      const splitFormItems = [[], []];\n      this.formItems.forEach((item, index) => {\n        if (!item.hidden) {\n          if (length < num) {\n            splitFormItems[0].push(item);\n            length += item.customWidth || 4;\n          } else {\n            splitFormItems[1].push(item);\n          }\n        }\n      });\n      this.splitFormItems = splitFormItems;\n    },\n    // filterWidth() {\n    //   const width = document.body.clientWidth\n    //   if (this.type === 'bottom') {\n    //     width > 1200\n    //       ? (this.num = 6)\n    //       : width < 1200 && width > 767\n    //         ? (this.num = 4)\n    //         : (this.num = 3)\n    //   } else {\n    //     width > 1200\n    //       ? (this.num = 6)\n    //       : width < 1200 && width > 767\n    //         ? (this.num = 4)\n    //         : (this.num = 3)\n    //   }\n    //   this.splitFormItem(this.num)\n    // },\n    // splitFormItem(num) {\n    //   const splitFormItems = [[], []]\n    //   this.formItems.forEach((item, index) => {\n    //     if (!item.hidden) {\n    //       this.lineLimit\n    //         ? index < num\n    //           ? splitFormItems[0].push(item)\n    //           : splitFormItems[1].push(item)\n    //         : splitFormItems[0].push(item)\n    //     }\n    //   })\n    //   this.splitFormItems = splitFormItems\n    //   console.log('splitFormItems', this.splitFormItems)\n    //   // const splitFormItems = [[], []]\n    //   // let occultationNum = 0\n    //   // let displayFormNum = 0\n    //   // this.formItems.forEach((item, index) => {\n    //   //   if (!item.hidden) {\n    //   //     if (item.itemType && item.itemType === 'occultation') {\n    //   //       if (splitFormItems[1][tempIndex]) {\n    //   //         splitFormItems[1][tempIndex].push(item)\n    //   //       } else {\n    //   //         splitFormItems[1][tempIndex] = [item]\n    //   //       }\n    //   //       occultationNum++\n    //   //     } else {\n    //   //       const tempIndex = Math.floor(displayFormNum / 4)\n    //   //       if (splitFormItems[0][tempIndex]) {\n    //   //         splitFormItems[0][tempIndex].push(item)\n    //   //       } else {\n    //   //         splitFormItems[0][tempIndex] = [item]\n    //   //       }\n    //   //       displayFormNum++\n    //   //     }\n    //   //   }\n    //   // })\n    //   // this.splitFormItems = splitFormItems\n    // },\n    initDateTimePick(formItems = this.formItems) {\n      const result = {};\n      formItems.forEach(item => {\n        if (item.type === 'elDatePicker') {\n          const dateValue = item.default && item.default.length ? item.default : [moment().subtract(3, 'months').startOf('day').format('YYYY-MM-DDTHH:mm:ss'), moment().endOf('day').format('YYYY-MM-DDTHH:mm:ss')];\n          if (item.value[1]) {\n            result[`${item.value[0]}${item.value[1]}`] = dateValue;\n          } else {\n            result[`${item.value[0]}`] = dateValue;\n          }\n        }\n      });\n      return result;\n    },\n    // 初始化表单值\n    initForm(formItems = this.formItems, reset = false) {\n      return formItems.reduce((prev, next) => {\n        if (next.type === 'elDatePicker') {\n          const dateValue = next.default && next.default.length ? next.default : [moment().subtract(3, 'months').startOf('day').format('YYYY-MM-DDTHH:mm:ss'), moment().endOf('day').format('YYYY-MM-DDTHH:mm:ss')];\n          dateValue[1] && (dateValue[1] = moment(dateValue[1]).format('LTS') === '00:00:00' ? moment(dateValue[1]).endOf('day')._d : moment(dateValue[1]).format('YYYY-MM-DD HH:mm:ss'));\n          prev[next.value[0]] = dateValue[0];\n          prev[next.value[1]] = dateValue[1];\n          if (reset) {\n            this.dateTimePick[`${next.value[0]}${next.value[1] || ''}`] = [dateValue[0], dateValue[1]];\n          }\n          return prev;\n        }\n\n        // 若为弹窗选择储存name以用于保存参数\n        if (next.type === 'cndInputDialog' || next.type === 'cndInputDialogItem') {\n          if (next.default === 0 || next.default) {\n            if (Array.isArray(next.default)) {\n              prev[`_preview${next.value}`] = next.default.map((val, index) => {\n                const labelData = Array.isArray(next.labelDefault) ? next.labelDefault : [next.labelDefault];\n                return {\n                  label: labelData[index],\n                  _label: labelData[index],\n                  value: val,\n                  _value: val\n                };\n              });\n            } else {\n              prev[`_preview${next.value}`] = {\n                label: next.labelDefault,\n                _label: next.labelDefault,\n                value: next.default,\n                _value: next.default\n              };\n            }\n          }\n          if (reset) {\n            if (next.type === 'cndInputDialog' || next.type === 'cndInputDialogItem') {\n              this.$set(this.searchOtherObject, next.value, {\n                valueText: Array.isArray(next.labelDefault) ? next.labelDefault.join(',') : next.labelDefault\n              });\n            }\n          }\n        }\n        if (next.type === 'elCheckbox') {\n          prev[next.value] = next.checked || !!next.default;\n        } else if (next.type === 'elCheckboxGroup') {\n          prev[next.value] = next.default || [];\n        } else if (next.type === 'doubleInput') {\n          next.value?.forEach((key, index) => {\n            prev[key] = next.default?.[index];\n          });\n        } else {\n          prev[next.value] = next.default;\n        }\n        return prev;\n      }, {});\n    },\n    initFormRules() {\n      const result = {};\n      this.formItems.forEach(item => {\n        if (item.required) {\n          if (item.type === 'elDatePicker') {\n            result[item.value[0]] = [{\n              validator: (rule, value, cb) => {\n                if (this.searchInfo[item.value[0]] || this.searchInfo[item.value[1]]) {\n                  cb();\n                } else {\n                  cb(new Error('no'));\n                }\n              },\n              trigger: ['blur', 'change'],\n              required: true\n            }];\n          } else {\n            result[item.value] = [{\n              required: true,\n              trigger: ['blur', 'change']\n            }];\n          }\n        }\n      });\n      return result;\n    },\n    // 选择参数回填\n    filterAction(params) {\n      this.searchInfo = params;\n      // this.searchInfo = Object.assign(this.searchInfo, params)\n      const datePcikerItem = this.formItems.filter(item => item.type === 'elDatePicker');\n      datePcikerItem.forEach(item => {\n        this.dateTimePick[`${item.value[0]}${item.value[1] || ''}`] = [params[item.value[0]], params[item.value[1]]] || this.dateTimePick[`${item.value[0]}${item.value[1]}`];\n      });\n      // this.submit()\n      this.submit(true, true);\n    },\n    blurDatePicker() {\n      this.$emit('blur-date-picker');\n    },\n    // 选择日期\n    handleChangeTime(dateArray, valueArray) {\n      if (valueArray[1]) {\n        this.searchInfo[valueArray[0]] = dateArray ? moment(dateArray[0]).format('YYYY-MM-DD HH:mm:ss') : undefined;\n        // this.searchInfo[valueArray[0]] = dateArray\n        //   ? dateArray[0]\n        //   : undefined\n        // this.searchInfo[valueArray[1]] = dateArray\n        //   ? dateArray[1]\n        //   : undefined\n        this.searchInfo[valueArray[1]] = dateArray ? moment(dateArray[1]).format('LTS') === '00:00:00' ? moment(dateArray[1]).endOf('day')._d : moment(dateArray[1]).format('YYYY-MM-DD HH:mm:ss') : undefined;\n        // this.searchInfo[valueArray[1]] = dateArray\n        //   ? new Date(new Date(new Date((dateArray[1].getFullYear() + '-' + (dateArray[1].getMonth() + 1) + '-' + dateArray[1].getDate()).replace(/-/g, '/')).getTime()).getTime() + 24 * 60 * 60 * 1000 - 1)\n        //   : undefined\n      } else {\n        this.searchInfo[valueArray[0]] = dateArray ? moment(dateArray).format('YYYY-MM-DD HH:mm:ss') : undefined;\n        // this.searchInfo[valueArray[0]] = dateArray\n        //   ? new Date(new Date(new Date((dateArray.getFullYear() + '-' + (dateArray.getMonth() + 1) + '-' + dateArray.getDate()).replace(/-/g, '/')).getTime()).getTime() + 24 * 60 * 60 * 1000 - 1)\n        //   : undefined\n      }\n\n      this.submit(false, this.isAutoQuery);\n    },\n    handleChangeSelect(val, item, inside = true, needSubmit = true) {\n      // inside 判断是否为内部触发, 外部给值统一走单选(外部值处理完)\n      // needSubmit 有些select初始化设置了默认值会触发change\n      if (item.multiple && inside) {\n        this.searchInfo[item.value] = val.map(v => v._value);\n        const valueText = val.map(v => v._label).join(',');\n        // 用于在tags显示\n        this.searchOtherObject[item.value] = {\n          ...val,\n          valueText\n        };\n      } else {\n        this.searchInfo[item.value] = val._value;\n        // 用于在tags显示\n        this.searchOtherObject[item.value] = {\n          ...val,\n          valueText: val._label\n        };\n      }\n      // 执行 change 事件\n      item.change && item.change(val, item);\n      // 由于某些select设置了默认值但是默认值是由于接口获取的，获取完后会触发change\n      // 接口初始化后触发的change为了显示tags，而不触发搜索，所以做了此判断\n      if (needSubmit) {\n        this.submit(false, this.isAutoQuery);\n      } else {\n        this.searchDataObject = this.getFormValues();\n      }\n    },\n    submit(flagFold = true, search = false, isClick = false) {\n      this.validate().then(valid => {\n        if (valid) {\n          this.tips = false;\n          // 点击查询触发的查询 并 处于展开的状态\n          if (isClick && this.occultationShow) {\n            // this.$refs.filterBtn.collapseFilter()\n            this.collapseFilter();\n          }\n          this.$emit('searchValue', this.searchInfo);\n          if (search) {\n            this.searchFormValues = this.getFormValues();\n            this.$emit('search', this.searchFormValues);\n            this.setSearchCndInputDialogObject();\n          }\n          flagFold && (this.activePanel = '1');\n          try {\n            const searchDataObject = this.getFormValues();\n            if (search) {\n              this.searchDataObject = searchDataObject;\n            }\n            const allSearchConditionArr = Object.keys(searchDataObject);\n            const nullSearchParams = [];\n            const searchConditionArr = [];\n            for (let i = 0; i < allSearchConditionArr.length; i++) {\n              const item = allSearchConditionArr[i];\n              if (searchDataObject[item]) {\n                searchConditionArr.push(item);\n              } else {\n                nullSearchParams.push(item);\n              }\n            }\n            if (this.isClickReset) {\n              this.isClickReset = false;\n              return;\n            }\n            const analyticsInstance = analytics.getAnalyticsInstance(this);\n            analyticsInstance.reportEvent('advanced_search_trigger', {\n              valid_search_params: searchConditionArr,\n              null_search_params: nullSearchParams,\n              trigger_type: flagFold ? '点击查询按钮' : '选择下拉框 '\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      });\n    },\n    selectGet(data, oldValue, selectKey, FormKey) {\n      let obj = {};\n      const list = data.dict;\n      const option = data.option || {};\n      obj = list.find(item => {\n        return item[option.value || 'value'] === oldValue;\n      });\n      if (selectKey) {\n        this.searchInfo[FormKey] = obj[selectKey];\n      }\n      this.submit(false, this.isAutoQuery);\n    },\n    cascaderGet(list, oldValue, selectKey, FormKey, refKey) {\n      const checkedNodes = this.$refs[refKey][0].getCheckedNodes() || [];\n      const valueText = checkedNodes.map(v => v.label).join(',');\n      this.searchOtherObject[FormKey] = {\n        valueText: valueText\n      }; // 记录选中的文本信息\n      let obj = {};\n      obj = list.find(item => {\n        return item.sCodeValue === oldValue;\n      });\n      if (selectKey) {\n        this.searchInfo[FormKey] = obj[selectKey];\n      }\n      this.submit(false, this.isAutoQuery);\n    },\n    getFormValues() {\n      // const reg = new RegExp(/\\s/)\n      const result = {};\n      const datePickerItem = this.formItems.filter(item => item.type === 'elDatePicker');\n      this.formItems.forEach(item => {\n        if (item.type === 'doubleInput') {\n          this.doubleInputObject[`_doubleInput${item.value[0]}`] = item;\n        }\n        if (item.type === 'cndInputDialog' || item.type === 'cndInputDialogItem') {\n          if (!this.searchOtherObject?.[item.value]) {\n            this.$set(this.searchOtherObject, item.value, {\n              valueText: Array.isArray(item.labelDefault) ? item.labelDefault.join(',') : item.labelDefault\n            });\n          }\n        }\n      });\n      Object.keys(this.searchInfo).filter(key => !key.includes('_preview')).forEach(key => {\n        result[key] = typeof this.searchInfo[key] === 'string' ? this.searchInfo[key].replace(/^\\s+|\\s+$/g, '') : !Validate.isUndeFinedOrNullOrBlank(this.searchInfo[key]) ? this.searchInfo[key] : undefined;\n      });\n      if (datePickerItem.length) {\n        datePickerItem.forEach(item => {\n          item.value.forEach(date => {\n            result[date] = result[date] ? moment(result[date]).format('YYYY-MM-DDTHH:mm:ss') : undefined;\n          });\n        });\n      }\n      console.log('result', result);\n      return result;\n    },\n    getSearchData() {\n      return this.searchFormValues;\n    },\n    validate() {\n      return new Promise((resolve, reject) => {\n        const validate = this.$refs.cndFilter.validate();\n        resolve(validate);\n      });\n    },\n    reset() {\n      this.searchInfo = this.initForm(this.formItemsReset, true);\n      this.isClickReset = true;\n      this.searchFormValues = this.getFormValues();\n      this.setSearchCndInputDialogObject();\n      // this.dateTimePick = this.initDateTimePick(this.formItemsReset)\n      this.submit(false, true);\n      try {\n        const analyticsInstance = analytics.getAnalyticsInstance(this);\n        analyticsInstance.reportEvent('advanced_search_reset_click');\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    handleCloseTag({\n      value: tag\n    }) {\n      if (tag.disabled || tag.required) return;\n      delete this.searchDataObject[tag.value];\n      this.searchDataObject = {\n        ...this.searchDataObject\n      };\n      if (tag.type === 'elInput') {\n        // 普通输入框\n        this.searchInfo[tag.value] = '';\n      } else if (tag.type === 'elCheckbox') {\n        // 多选框\n        this.searchInfo[tag.value] = tag.falseLabel;\n      } else if (tag.type === 'elDatePicker') {\n        // 日期选择框\n        const key = tag.value.join('');\n        this.dateTimePick[key] = [];\n        tag.value.forEach(v => {\n          this.searchInfo[v] = '';\n        });\n      } else if (['cndInputDialog', 'cndInputDialogItem'].indexOf(tag.type) !== -1) {\n        // 选择框-搜索框\n        this.searchInfo[tag.value] = undefined;\n        this.searchInfo[`_preview${tag.value}`] = '';\n      } else if (tag.type === 'doubleInput') {\n        tag.value.forEach(v => {\n          this.searchInfo[v] = undefined;\n        });\n      } else {\n        this.searchInfo[tag.value] = undefined;\n      }\n      this.submit(true, true);\n    },\n    // 提供给外部调用，修改 searchInfo 的值，目前仅支持修改elInput类型的值\n    setSearchInfo(key, value) {\n      const item = this.formItems.find(v => v.value === key);\n      if (item && item.type === 'elInput') {\n        this.searchInfo[key] = value;\n      } else {\n        console.error('仅支持修改elInput类型的值');\n      }\n    }\n  }\n};","map":{"version":3,"names":["moment","analytics","Validate","localFormItem","localFilterBtn","localFilter","SearchTagGroup","deepClone","name","components","props","type","String","default","formItems","Array","required","labelWidth","paramsButton","Boolean","autoQuery","lineLimit","isCollapse","data","filterControlText","$t","searchFormValues","occultationShow","SearchFormHeight","formItemsReset","tips","isAutoQuery","getAutoQuery","width","document","body","clientWidth","num","searchInfo","initForm","searchRules","initFormRules","dateTimePick","initDateTimePick","splitFormItems","pickerOptions","shortcuts","text","onClick","picker","end","Date","start","setTime","getTime","$emit","isClickReset","searchDataObject","searchOtherObject","searchCndInputDialogObject","doubleInputObject","activePanel","computed","className_","className","push","shadow","length","formCardStyle","transition","formItemObj","result","forEach","v","isArray","value","selectTag_","keys","Object","entries","k","item","map","field","filter","val","falseLabel","list","dict","searchItem","option","optionValue","optionLabel","label","searchItemArray","labelList","record","find","join","indexOf","otterItem","valueText","placeholder","o","format","flatList","pop","children","restItem","labelPosition_","readOnlyFilter_","valueKey_","valueKey","selectOptions_","key","config","assign","options","_label","_value","watch","console","log","setTimeout","collapseFilter","analyticsInstance","getAnalyticsInstance","reportEvent","toggle_type","e","filterWidth","beforeMount","created","window","addEventListener","handkeyCode","mounted","$nextTick","$refs","SearchForm","$el","offsetHeight","getFormValues","setSearchCndInputDialogObject","methods","getSelectOptionProps","getOptionProps","outlineType","reg","RegExp","test","filterCallBack","isCollapse_","array","iteratee","index","target","WeakMap","cloneTarget","get","set","undefined","state","cndFilter","event","ctrlKey","keyCode","submit","configs","process","env","NODE_ENV","splitFormItem","hidden","customWidth","dateValue","subtract","startOf","endOf","reset","reduce","prev","next","_d","labelData","labelDefault","$set","checked","validator","rule","cb","Error","trigger","filterAction","params","datePcikerItem","blurDatePicker","handleChangeTime","dateArray","valueArray","handleChangeSelect","inside","needSubmit","multiple","change","flagFold","search","isClick","validate","then","valid","allSearchConditionArr","nullSearchParams","searchConditionArr","i","valid_search_params","null_search_params","trigger_type","selectGet","oldValue","selectKey","FormKey","obj","cascaderGet","refKey","checkedNodes","getCheckedNodes","sCodeValue","datePickerItem","includes","replace","isUndeFinedOrNullOrBlank","date","getSearchData","Promise","resolve","reject","handleCloseTag","tag","disabled","setSearchInfo","error"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/SearchForm/src/index.vue"],"sourcesContent":["<!--\n    @component searchform 查询条件组件\n    @props\n        {Array} formItems - 搜索表单配置  []\n        {String} labelWidth - 表单label宽度  '120px'\n    @formItems {Object}\n        属性名 | 描述 | 类型 | 默认值\n        label 项目名 String -\n        value 项目值 对应提交给服务端的key [String|Array] -\n        placeholder 输入框占位文本 [String|Array] -\n        default 默认值 null -\n        hidden 隐藏 隐藏该项目 但值依旧存在\n        disabled 禁用 Boolean false\n        required 必填 Boolean false\n        errorMsg 校验错误信息 String -\n        customWidth 删格化占用栏位 一行24格 具体继承自form-item、elcol、elrow删格化参数\n        itemType 该项的类型 String 默认为存在\n          occultation 可展开收起 隐藏的项\n          display 一直存在的 不可展开收起\n        type 该项的类型 elInput, elSelect, elDatePicker, InputDialog\n          elSelect 下拉框\n              dict 对应的字典key 用于服务端请求 也可是数组需要和服务端对应 [Array|String]\n                  [{ sCodeName: 'name', sCodeValue: 123 }]\n                  or 'base.yes-no'\n          elDatePicker 日期选择框\n              *!!* value、placeholder、default 转为Array传输格式\n              value 对应用户选择的第一个时间第二个时间 Array\n                  ['startTime', 'endTime']\n              default 默认值\n                  ['2020-10-01', new Date().getTime()],\n              placeholder 输入框占位文本 Array\n          dateType 日期类型选择  datetimerange为日期时间选择器，如果不传为默认daterange\n          cndInputDialog 全文检索框\n              labelDefault 全文检索框的文本值\n              dialogType 对应的业务弹窗类型\n                  area 地区\n                  artno 货号\n                  cost 核算组\n                  company 公司\n                  customer 客商、供应商、客户\n                  currency 货币\n                  depart 部门\n                  measurementunit 单位\n                  staff 人员\n                  creater 创建人\n                  warehouse 仓库\n                  portcity 港口\n                  finance 财务组织 // 暂无\n                  project 项目 // 暂无\n              customerType 若dialogType类型为customer时需要传\n                  null/undefined 返回所有\n                  \"10\" 客商、客户、发票客户\n                  \"20\" 供应商、开票单位、物流供应商\n                  \"30\" 委托方\n                  \"40\" 服务供应商\n                  \"50\" 货主\n                  \"99\" 其他\n    @methods\n        submit Function 点击查询并通过校验 才会有回调事件\n        getSearchData Function 获取表单数据\n          @return Object\n    @demo\n        /src/views/aggridDemo/masterDetailLazy.vue\n    @author KYUUTA/chen\n    @date 2020-12-17 14:30:42\n    @updata 2020-12-30 15:44\n-->\n<template>\n  <cnd-form-card-list\n    ref=\"SearchForm\"\n    class=\"search-form\"\n    active-panel=\"1\"\n    :class-name=\"className_\"\n    :style=\"formCardStyle\"\n    :change=\"(v) => (activePanel = v)\"\n  >\n    <!-- 查询条件 -->\n    <cnd-form-card\n      ref=\"cubeformCard\"\n      :title=\"$t('grid.others.queryConditions')\"\n      name=\"1\"\n      :hide-right=\"false\"\n      header-border-bottom\n    >\n      <!-- 查询结果 -->\n      <template v-if=\"selectTag_.length > 0\" slot=\"form-card-tag\">\n        <search-tag-group\n          :list=\"selectTag_\"\n          :option=\"{ label: 'valueText' }\"\n          @onClose=\"handleCloseTag\"\n        />\n      </template>\n      <template v-if=\"type === 'top'\" slot=\"form-card-btn\">\n      <!-- 查看更多按钮 -->\n      <cube-button v-if=\"!!Object.keys(splitFormItems[1]).length\" type=\"secondary\" @click=\"collapseFilter\">\n        {{ filterControlText }}\n      </cube-button>\n      <!-- 参数按钮 -->\n      <slot name=\"others-button\" />\n      <slot name=\"parameter-button\" />\n      <!-- 查询重置按钮 -->\n      <cube-button type=\"secondary\" @click.native.stop=\"reset\">{{ $t(\"components.reset\") }}</cube-button>\n      <el-tooltip\n        v-model=\"tips\"\n        effect=\"dark\"\n        content=\"Ctrl + Enter\"\n        placement=\"top-start\"\n      >\n        <cube-button\n          type=\"primary\"\n          @click.native.stop=\"submit(true, true, true)\"\n        >\n          {{ $t(\"components.inquiry\") }}\n        </cube-button>\n      </el-tooltip>\n        <!-- <local-filter-btn\n          ref=\"filterBtn\"\n          :type=\"type\"\n          :occultation-form=\"!!Object.keys(splitFormItems[1]).length\"\n          :show-button=\"true\"\n          :params-button=\"paramsButton\"\n          :read-only-filter=\"readOnlyFilter_\"\n          :model=\"searchInfo\"\n          @filterAction=\"filterAction\"\n          @reset=\"reset\"\n          @submit=\"submit(true, true, true)\"\n          @collapseFilter=\"collapseFilter\"\n        >\n          <template slot=\"others-button\">\n            <slot name=\"others-button\" />\n          </template>\n        </local-filter-btn> -->\n      </template>\n      <local-filter\n        ref=\"cndFilter\"\n        v-resize=\"filterWidth\"\n        :type=\"type\"\n        ref-form=\"searchInfo\"\n        :model=\"searchInfo\"\n        :rules=\"searchRules\"\n        :no-more=\"!Object.keys(splitFormItems[1]).length\"\n        show-button\n        :params-button=\"paramsButton\"\n        :label-width=\"labelWidth\"\n        @action=\"filterAction\"\n        @reset=\"reset\"\n        @submit=\"submit(true, true, true)\"\n        @callBack=\"filterCallBack\"\n      >\n        <template\n          v-for=\"(items, typeIndex) in splitFormItems\"\n          :slot=\"typeIndex ? 'occultationForm' : 'displayForm'\"\n        >\n          <local-form-item\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            :label=\"item.label\"\n            :label-position=\"type === 'bottom' ? 'left' : 'top'\"\n            :outline=\"outlineType(item.type)\"\n            :custom-width=\"item.customWidth || undefined\"\n            :prop=\"\n              item.type === 'elDatePicker' || item.type === 'doubleInput'\n                ? item.value[0]\n                : item.value\n            \"\n            :error-msg=\"item.errorMessage || $t('components.pleaseEnter')\"\n          >\n            <el-input\n              v-if=\"item.type === 'elInput'\"\n              v-model=\"searchInfo[item.value]\"\n              :placeholder=\"$t('components.pleaseEnter')\"\n              clearable\n              :disabled=\"item.disabled\"\n              @focus=\"item.focus && item.focus(item, $event)\"\n              @keyup.native.stop.enter=\"submit(true, true)\"\n              @clear=\"submit(false, isAutoQuery)\"\n            />\n\n            <div v-else-if=\"item.type === 'doubleInput'\" class=\"flexCC\">\n              <el-input\n                v-model=\"searchInfo[item.value[0]]\"\n                :placeholder=\"$t('components.pleaseEnter')\"\n                clearable\n                :disabled=\"item.disabled || false\"\n                @keyup.native.stop.enter=\"submit(true, true)\"\n                @clear=\"submit(false, isAutoQuery)\"\n              />\n              <el-input\n                v-model=\"searchInfo[item.value[1]]\"\n                :placeholder=\"$t('components.pleaseEnter')\"\n                clearable\n                :disabled=\"item.disabled || false\"\n                @keyup.native.stop.enter=\"submit(true, true)\"\n                @clear=\"submit(false, isAutoQuery)\"\n              />\n            </div>\n\n            <!-- 复选框 -->\n            <el-checkbox\n              v-else-if=\"item.type === 'elCheckbox'\"\n              v-model=\"searchInfo[item.value]\"\n              :true-label=\"item.trueLabel\"\n              :false-label=\"item.falseLabel\"\n              :label=\"item.value\"\n              :disabled=\"item.disabled\"\n            >\n                {{ item.placeholder }}\n            </el-checkbox>\n\n            <!-- 复选框组 -->\n            <el-checkbox-group\n              v-else-if=\"item.type === 'elCheckboxGroup'\"\n              v-model=\"searchInfo[item.value]\"\n              :min=\"item.min\"\n              :max=\"item.max\"\n            >\n              <el-checkbox\n                v-for=\"(v, i) in item.option\"\n                :key=\"i\"\n                :label=\"v.value\"\n                :disabled=\"v.disabled\"\n                >{{ v.label || v.value }}</el-checkbox\n              >\n            </el-checkbox-group>\n\n            <!-- 开关 -->\n            <el-switch\n              v-else-if=\"item.type === 'elSwitch'\"\n              v-model=\"searchInfo[item.value]\"\n              :disabled=\"item.disabled\"\n              :active-text=\"item.activeText\"\n              :inactive-text=\"item.inactiveText\"\n              :active-value=\"item.activeValue\"\n              :inactive-value=\"item.inactiveValue\"\n            >\n            </el-switch>\n\n            <!-- 单选框组 -->\n            <el-radio-group\n              v-else-if=\"item.type === 'elRadioGroup'\"\n              v-model=\"searchInfo[item.value]\"\n            >\n              <el-radio\n                v-for=\"(v, i) in item.option\"\n                :key=\"i\"\n                :label=\"v.value\"\n                :disabled=\"v.disabled\"\n                >{{ v.label || v.value }}</el-radio\n              >\n            </el-radio-group>\n\n            <!-- 下拉框 -->\n            <cnd-select\n              v-else-if=\"item.type === 'elSelect'\"\n              v-model=\"searchInfo[item.value]\"\n              filterable\n              clearable\n              :multiple=\"item.multiple\"\n              :placeholder=\"$t('components.pleaseEnter')\"\n              :disabled=\"item.disabled\"\n              @change=\"\n                selectGet(\n                  item,\n                  searchInfo[item.value],\n                  item.selectKey,\n                  item.value,\n                )\n              \"\n            >\n              <cnd-option\n                v-if=\"!item.allHide\"\n                key=\"all\"\n                :label=\"$t('grid.others.all')\"\n                :value=\"undefined\"\n              />\n              <cnd-option\n                v-for=\"option in item.dict\"\n                :key=\"\n                  option[\n                    item.option && item.option.value\n                      ? item.option.value\n                      : 'value'\n                  ]\n                \"\n                v-bind=\"getSelectOptionProps(option, item)\"\n              />\n            </cnd-select>\n            <!-- 级联选择 -->\n            <el-cascader\n              v-else-if=\"item.type === 'elCascader'\"\n              :ref=\"`cascader${index}`\"\n              v-model=\"searchInfo[item.value]\"\n              size=\"mini\"\n              clearable\n              filterable\n              :options=\"item.dict\"\n              :placeholder=\"$t('components.pleaseEnter')\"\n              :disabled=\"item.disabled\"\n              :props=\"item.props || {}\"\n              @change=\"\n                cascaderGet(\n                  item.dict,\n                  searchInfo[item.value],\n                  item.selectKey,\n                  item.value,\n                  `cascader${index}`,\n                )\n              \"\n            />\n            <!-- 日期选择 -->\n            <el-date-picker\n              v-else-if=\"\n                item.type === 'elDatePicker' && item.value.length === 2\n              \"\n              v-model=\"dateTimePick[`${item.value[0]}${item.value[1]}`]\"\n              :readonly=\"item.readonly || false\"\n              :disabled=\"item.disabled || false\"\n              :editable=\"item.editable || true\"\n              clearable\n              :type=\"item.dateType ? item.dateType : 'daterange'\"\n              size=\"mini\"\n              :format=\"item.format\"\n              :unlink-panels=\"item.unlinkPanels\"\n              :start-placeholder=\"\n                item.placeholder && item.placeholder.length\n                  ? item.placeholder[0]\n                  : $t('grid.others.startDate')\n              \"\n              :end-placeholder=\"\n                item.placeholder && item.placeholder.length > 1\n                  ? item.placeholder[1]\n                  : $t('grid.others.endDate')\n              \"\n              :default-time=\"['00:00:00', '23:59:59']\"\n              :value-format=\"item.valueFormat\"\n              :picker-options=\"\n                item.pickerOptions ? item.pickerOptions : pickerOptions\n              \"\n              align=\"right\"\n              @blur=\"blurDatePicker\"\n              @change=\"handleChangeTime($event, item.value)\"\n            />\n\n            <el-date-picker\n              v-else-if=\"\n                item.type === 'elDatePicker' && item.value.length !== 2\n              \"\n              v-model=\"dateTimePick[`${item.value[0]}`][0]\"\n              :readonly=\"item.readonly\"\n              :disabled=\"item.disabled\"\n              :editable=\"item.editable\"\n              :unlink-panels=\"item.unlinkPanels\"\n              :format=\"item.format\"\n              clearable\n              :type=\"item.dateType ? item.dateType : 'daterange'\"\n              size=\"mini\"\n              :placeholder=\"\n                item.placeholder && item.placeholder.length\n                  ? item.placeholder[0]\n                  : $t('grid.others.startDate')\n              \"\n              :picker-options=\"item.pickerOptions || pickerOptions\"\n              :value-format=\"item.valueFormat\"\n              align=\"right\"\n              @change=\"handleChangeTime($event, item.value)\"\n            />\n            <slot\n              v-else-if=\"\n                item.type === 'cndInputDialog' ||\n                item.type === 'cndInputDialogItem'\n              \"\n              name=\"searchSelect\"\n              :item=\"item\"\n              :searchInfo=\"searchInfo\"\n              :change=\"handleChangeSelect\"\n            >\n              <cnd-select\n                v-model=\"searchInfo[`_preview${item.value}`]\"\n                :default-options=\"selectOptions_(item)\"\n                :remote=\"item.remote\"\n                :collapse-tags=\"item.collapseTags\"\n                :multiple=\"item.multiple\"\n                :multiple-limit=\"item.multipleLimit\"\n                :name=\"item.name\"\n                :value-key=\"valueKey_(item)\"\n                :disabled=\"item.disabled\"\n                :clearable=\"item.clearable\"\n                :size=\"item.size\"\n                :filterable=\"item.filterable\"\n                :filter-method=\"item.filterMethod\"\n                :loading=\"item.loading\"\n                :loading-text=\"item.loadingText\"\n                :no-match-text=\"item.noMatchText\"\n                :no-data-text=\"item.noDataText\"\n                :reserve-keyword=\"item.reserveKeyword\"\n                :default-first-option=\"item.defaultFirstOption\"\n                :popper-append-to-body=\"item.popperAppendToBody\"\n                :pagination=\"item.pagination\"\n                :allow-create=\"item.allowCreate\"\n                :autocomplete=\"item.autocomplete\"\n                :automatic-dropdown=\"item.automaticDropdown\"\n                :popper-class=\"item.popperClass\"\n                :popover-tags=\"item.popoverTags\"\n                :remote-method=\"item.getOptions\"\n                :get-select-option-props=\"item.getOptionProps\"\n                :is-bind-object=\"true\"\n                @pageChange=\"item.pageChange\"\n                @jumpPage=\"item.jumpPage\"\n                @focus=\"item.focus\"\n                @change=\"handleChangeSelect($event, item)\"\n                @visible-change=\"item.visibleChange\"\n                @inputAction=\"item.inputAction\"\n                @input=\"item.input\"\n              />\n            </slot>\n          </local-form-item>\n        </template>\n      </local-filter>\n    </cnd-form-card>\n  </cnd-form-card-list>\n</template>\n\n<script>\n// 保存参数 选择参数\n// 必填校验功能\nimport moment from 'moment'\nimport '../../../../lib/styles/components/SearchForm.scss'\nimport analytics from '../../../utils/analytics'\nimport { Validate } from '@cndinfo/cube-web-utils'\nimport localFormItem from '../../FormItem/index.js'\nimport localFilterBtn from '../../FilterBtn/index.js'\nimport localFilter from '../../Filter/index.js'\nimport SearchTagGroup from '../../SearchTagGroup/src/index.vue'\nimport { deepClone } from '../../AgGrid/src/utils'\n\nexport default {\n  name: 'SearchForm',\n  components: { localFormItem, localFilterBtn, localFilter, SearchTagGroup },\n  props: {\n    // 按钮组位置 top、bottom\n    type: {\n      type: String,\n      default: 'top'\n    },\n    // 表单项配置列表\n    formItems: {\n      type: Array,\n      required: true\n    },\n    // 表单label宽度\n    labelWidth: {\n      type: String,\n      default: '85px'\n    },\n    // 是否显示选择参数、保存参数按钮\n    paramsButton: {\n      type: Boolean,\n      default: true\n    },\n    // 是否自动查询\n    autoQuery: {\n      type: String,\n      default: ''\n    },\n    // 隐藏多余一行的内容\n    lineLimit: {\n      type: Boolean,\n      default: true\n    },\n    // 是否默认展开\n    isCollapse: {\n      type: [String, Boolean],\n      default: ''\n    }\n    // 默认展示行数\n    // rows: {\n    //   type: Number,\n    //   default: ''\n    // }\n    // 面板激活状态\n    // activePanel: {\n    //   type: String,\n    //   default: \"1\"\n    // }\n  },\n  data() {\n    return {\n      filterControlText: this.$t('components.viewMore'),\n      searchFormValues: {},\n      occultationShow: false,\n      SearchFormHeight: '',\n      formItemsReset: this.deepClone(this.formItems),\n      // formItemsReset: JSON.parse(JSON.stringify(this.formItems)),\n      tips: false,\n      // isAutoQuery: false,\n      isAutoQuery:\n        this.autoQuery !== ''\n          ? this.autoQuery\n          : this.getAutoQuery('VUE_APP_AUTO_QUERY')\n            ? this.getAutoQuery('VUE_APP_AUTO_QUERY')\n            : false,\n      width: document.body.clientWidth,\n      num: 0,\n      searchInfo: this.initForm(),\n      searchRules: this.initFormRules(),\n      dateTimePick: this.initDateTimePick(),\n      splitFormItems: [],\n      pickerOptions: {\n        shortcuts: [\n          {\n            text: this.$t('grid.others.lastWeek'),\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: this.$t('grid.others.mostRecentMonth'),\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: this.$t('grid.others.lastThreeMonths'),\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\n              picker.$emit('pick', [start, end])\n            }\n          }\n        ]\n      },\n      isClickReset: false,\n      searchDataObject: {},\n      searchOtherObject: {},\n      searchCndInputDialogObject: {},\n      doubleInputObject: {},\n      activePanel: '1' // 面板激活状态\n    }\n  },\n  computed: {\n    className_() {\n      const className = ['search-form-collapse']\n      className.push({ 'search-form-occultation': this.occultationShow })\n      className.push({\n        shadow: this.occultationShow && this.activePanel.length\n      })\n      return className\n    },\n    formCardStyle() {\n      if (this.occultationShow && this.activePanel.length) {\n        return {\n          'min-height': this.SearchFormHeight\n            ? this.SearchFormHeight + 'px'\n            : 'auto',\n          transition: '0.3s'\n        }\n      } else if (this.occultationShow && !this.activePanel.length) {\n        return { 'min-height': '55px', transition: '0.3s' }\n      } else if (!this.occultationShow) {\n        return { 'min-height': 'auto', transition: '0.3s' }\n      }\n      return ''\n    },\n    formItemObj() {\n      const result = {}\n      this.formItems.forEach((v) => {\n        // 数组类型的保存第一个字符串\n        if (v.type === 'elDatePicker' && Array.isArray(v.value)) {\n          result[v.value[0]] = v\n        } else {\n          result[v.value] = v\n        }\n      })\n      return result\n    },\n    selectTag_() {\n      const result = []\n      const keys = Object.entries(this.searchDataObject)\n      keys.forEach(([k, v]) => {\n        const item =\n          this.formItemObj[k] || this.doubleInputObject[`_doubleInput${k}`]\n        // doubleInput 类型的 判断一波是否有值 -- 因为值是附在其他参数内的所以无法正常判断\n        if (item && item.type === 'doubleInput' && Array.isArray(item.value)) {\n          v = item.value\n            .map((field) => {\n              return this.searchDataObject[field]\n            })\n            .filter((val) => val)\n        }\n        // 去除空数组\n        if (Array.isArray(v)) {\n          v = v.length > 0\n        }\n\n        // v 值内容已被改变，后期取值不要使用这边的v\n        // 有值、可以为0 、item不能为空、v的值不能为false对应的值（checkbox中true 和 false）\n        if ((v || v === 0) && item && v !== item.falseLabel) {\n          let value = ''\n          // 选择框\n          if (item.type === 'elSelect') {\n            // 字符串的话就是还没取到值\n            const list = Array.isArray(item.dict) ? item.dict : []\n            const searchItem = this.searchDataObject[k]\n            const option = item.option || {}\n            const optionValue = option.value || 'value'\n            const optionLabel = option.label || 'label'\n\n            const searchItemArray = Array.isArray(searchItem)\n              ? searchItem\n              : [searchItem]\n\n            const labelList = searchItemArray.map((val) => {\n              const record =\n                list.find((item) => item[optionValue] === val) || {}\n              return record[optionLabel] || record[optionValue] || val\n            })\n\n            value = labelList.join('; ')\n          } else if (\n            ['cndInputDialog', 'cndInputDialogItem'].indexOf(item.type) !== -1\n          ) {\n            // 搜索选择框\n            const otterItem = this.searchCndInputDialogObject[k] || {}\n            value = otterItem.valueText || ''\n            if (!value) {\n              const searchItem = this.searchInfo[`_preview${k}`] || ''\n              if (Array.isArray(searchItem)) {\n                value = searchItem.join('; ')\n              } else {\n                value = searchItem\n              }\n            }\n          } else if (item.type === 'elCheckbox') {\n            value = item.placeholder\n          } else if (item.type === 'elDatePicker') {\n            value = item.value\n              .map((o) => moment(this.searchDataObject[o]).format('YYYY-MM-DD'))\n              .join(' 到 ')\n          } else if (item.type === 'elCascader') {\n            // 联级选择\n            const list = Array.isArray(item.dict) ? deepClone(item.dict) : []\n\n            const flatList = []\n\n            while (list.length) {\n              const record = list.pop()\n              const { children, ...restItem } = record\n\n              flatList.push(restItem)\n\n              if (Array.isArray(children) && children.length) {\n                list.push(...children)\n              }\n            }\n\n            const searchItem = this.searchDataObject[k]\n            const option = item.props || {}\n            const optionValue = option.value || 'value'\n            const optionLabel = option.label || 'label'\n\n            const searchItemArray = Array.isArray(searchItem)\n              ? searchItem\n              : [searchItem]\n\n            const labelList = searchItemArray.map((val) => {\n              const record =\n                flatList.find((item) => item[optionValue] === val) || {}\n              return record[optionLabel] || record[optionValue] || val\n            })\n\n            value = labelList.join('; ')\n          } else if (item.type === 'doubleInput') {\n            // 两个input\n            value = item.value\n              .map((o) => this.searchDataObject[o])\n              .filter((o) => o)\n              .join('; ')\n          } else {\n            value = v\n          }\n\n          // 对于搜索select来说 无值的话就不显示了\n          // elCheckboxvalue无值\n          if (\n            value ||\n            ['cndInputDialog', 'cndInputDialogItem'].indexOf(item.type) === -1\n          ) {\n            result.push({\n              ...item,\n              valueText: [item.label, value].filter((o) => o).join(': ')\n            })\n          }\n        }\n      })\n      return result\n    },\n    labelPosition_() {\n      return (item) => {\n        if (this.type === 'bottom') {\n          return 'left'\n        } else {\n          return 'top'\n        }\n      }\n    },\n    readOnlyFilter_() {\n      return this.activePanel.length === 0\n    },\n    valueKey_() {\n      return (item) => {\n        if (item.option) {\n          return item.option.valueKey || item.option.value || 'value'\n        }\n        return 'value'\n      }\n    },\n    selectOptions_() {\n      return (item, key = 'options') => {\n        const config = Object.assign(\n          { label: 'label', value: 'value' },\n          item.option\n        )\n        const options = Array.isArray(item[key]) ? item[key] : []\n        return options.map((v) => {\n          return {\n            ...v,\n            _label: v[config.label],\n            _value: v[config.value]\n          }\n        })\n      }\n    }\n  },\n  watch: {\n    activePanel(value) {\n      try {\n        console.log(value)\n        if (Array.isArray(value)) {\n          // 收起卡片时候，关闭全部打开\n          if (this.occultationShow && !value.length) {\n            // 等待收起动画结束\n            setTimeout(() => {\n              this.collapseFilter(false)\n              // this.$refs.filterBtn.collapseFilter(false)\n            }, 500)\n          }\n          try {\n            const analyticsInstance = analytics.getAnalyticsInstance(this)\n            analyticsInstance.reportEvent('advanced_search_toggle', {\n              toggle_type: value.length === 2 ? 'unfold' : 'fold'\n            })\n          } catch (e) {\n            console.log()\n          }\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    formItems() {\n      this.filterWidth()\n    }\n  },\n  beforeMount() {\n    this.filterWidth()\n  },\n  created() {\n    window.addEventListener('keydown', this.handkeyCode, true) // 开启监听键盘按下事件\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.type === 'top' &&\n        (this.SearchFormHeight = this.$refs.SearchForm.$el.offsetHeight)\n    })\n    this.searchDataObject = this.getFormValues()\n    this.searchFormValues = this.getFormValues()\n    this.setSearchCndInputDialogObject()\n  },\n  methods: {\n    setSearchCndInputDialogObject() {\n      const record = {}\n      Object.keys(this.searchOtherObject).forEach(key => {\n        record[key] = this.searchOtherObject[key]\n      })\n      this.searchCndInputDialogObject = record\n    },\n\n    getSelectOptionProps(record, item) {\n      const { option, getOptionProps } = item || {}\n      const { label, value } = option || {}\n\n      return {\n        label: record[label || 'label'],\n        value: record[value || 'value'],\n        ...getOptionProps?.(record)\n      }\n    },\n    // formItem 是否显示 outline\n    outlineType(type) {\n      const reg = new RegExp(\n        'elCheckbox|elCheckboxGroup|elSwitch|elRadioGroup',\n        'g'\n      )\n      return reg.test(type)\n    },\n    filterCallBack(val) {\n      this.isCollapse_ = val\n    },\n    forEach(array, iteratee) {\n      let index = -1\n      const length = array.length\n      while (++index < length) {\n        iteratee(array[index], index)\n      }\n      return array\n    },\n    // 深拷贝\n    deepClone(target, map = new WeakMap()) {\n      if (typeof target === 'object') {\n        const isArray = Array.isArray(target)\n        const cloneTarget = isArray ? [] : {}\n\n        if (map.get(target) || !target) {\n          return target\n        }\n        map.set(target, cloneTarget)\n\n        const keys = isArray ? undefined : Object.keys(target)\n        this.forEach(keys || target, (value, key) => {\n          if (keys) {\n            key = value\n          }\n          cloneTarget[key] = this.deepClone(target[key], map)\n        })\n\n        return cloneTarget\n      } else {\n        return target\n      }\n    },\n    collapseFilter(state = true) {\n      if (this.readOnlyFilter_ && state) return\n      this.filterControlText =\n        this.filterControlText === this.$t('components.collapse')\n          ? this.$t('components.viewMore')\n          : this.$t('components.collapse')\n      // this.rotate =\n      //   this.rotate === 'rotate(0deg)' ? 'rotate(180deg)' : 'rotate(0deg)'\n      this.occultationShow = !this.occultationShow\n      this.$refs.cndFilter.collapseFilter()\n      // this.$emit('collapseFilter')\n    },\n    handkeyCode(event) {\n      if (event.ctrlKey && event.keyCode === 13) {\n        this.submit(true, true)\n      }\n    },\n    getAutoQuery(name) {\n      return window.configs &&\n        window.configs[name] &&\n        process.env.NODE_ENV !== 'development'\n        ? window.configs[name]\n        : process.env[name]\n    },\n    filterWidth() {\n      const width = document.body.clientWidth\n      let num = 24\n      width >= 1200 ? (num = 24) : width <= 767 ? (num = 12) : (num = 16)\n      this.splitFormItem(num)\n    },\n    // 分组隐藏和显示\n    splitFormItem(num) {\n      let length = 0\n      const splitFormItems = [[], []]\n      this.formItems.forEach((item, index) => {\n        if (!item.hidden) {\n          if (length < num) {\n            splitFormItems[0].push(item)\n            length += item.customWidth || 4\n          } else {\n            splitFormItems[1].push(item)\n          }\n        }\n      })\n      this.splitFormItems = splitFormItems\n    },\n    // filterWidth() {\n    //   const width = document.body.clientWidth\n    //   if (this.type === 'bottom') {\n    //     width > 1200\n    //       ? (this.num = 6)\n    //       : width < 1200 && width > 767\n    //         ? (this.num = 4)\n    //         : (this.num = 3)\n    //   } else {\n    //     width > 1200\n    //       ? (this.num = 6)\n    //       : width < 1200 && width > 767\n    //         ? (this.num = 4)\n    //         : (this.num = 3)\n    //   }\n    //   this.splitFormItem(this.num)\n    // },\n    // splitFormItem(num) {\n    //   const splitFormItems = [[], []]\n    //   this.formItems.forEach((item, index) => {\n    //     if (!item.hidden) {\n    //       this.lineLimit\n    //         ? index < num\n    //           ? splitFormItems[0].push(item)\n    //           : splitFormItems[1].push(item)\n    //         : splitFormItems[0].push(item)\n    //     }\n    //   })\n    //   this.splitFormItems = splitFormItems\n    //   console.log('splitFormItems', this.splitFormItems)\n    //   // const splitFormItems = [[], []]\n    //   // let occultationNum = 0\n    //   // let displayFormNum = 0\n    //   // this.formItems.forEach((item, index) => {\n    //   //   if (!item.hidden) {\n    //   //     if (item.itemType && item.itemType === 'occultation') {\n    //   //       if (splitFormItems[1][tempIndex]) {\n    //   //         splitFormItems[1][tempIndex].push(item)\n    //   //       } else {\n    //   //         splitFormItems[1][tempIndex] = [item]\n    //   //       }\n    //   //       occultationNum++\n    //   //     } else {\n    //   //       const tempIndex = Math.floor(displayFormNum / 4)\n    //   //       if (splitFormItems[0][tempIndex]) {\n    //   //         splitFormItems[0][tempIndex].push(item)\n    //   //       } else {\n    //   //         splitFormItems[0][tempIndex] = [item]\n    //   //       }\n    //   //       displayFormNum++\n    //   //     }\n    //   //   }\n    //   // })\n    //   // this.splitFormItems = splitFormItems\n    // },\n    initDateTimePick(formItems = this.formItems) {\n      const result = {}\n      formItems.forEach((item) => {\n        if (item.type === 'elDatePicker') {\n          const dateValue =\n            item.default && item.default.length\n              ? item.default\n              : [\n                moment()\n                  .subtract(3, 'months')\n                  .startOf('day')\n                  .format('YYYY-MM-DDTHH:mm:ss'),\n                moment().endOf('day').format('YYYY-MM-DDTHH:mm:ss')\n              ]\n          if (item.value[1]) {\n            result[`${item.value[0]}${item.value[1]}`] = dateValue\n          } else {\n            result[`${item.value[0]}`] = dateValue\n          }\n        }\n      })\n      return result\n    },\n    // 初始化表单值\n    initForm(formItems = this.formItems, reset = false) {\n      return formItems.reduce((prev, next) => {\n        if (next.type === 'elDatePicker') {\n          const dateValue =\n            next.default && next.default.length\n              ? next.default\n              : [\n                moment()\n                  .subtract(3, 'months')\n                  .startOf('day')\n                  .format('YYYY-MM-DDTHH:mm:ss'),\n                moment().endOf('day').format('YYYY-MM-DDTHH:mm:ss')\n              ]\n          dateValue[1] &&\n            (dateValue[1] =\n              moment(dateValue[1]).format('LTS') === '00:00:00'\n                ? moment(dateValue[1]).endOf('day')._d\n                : moment(dateValue[1]).format('YYYY-MM-DD HH:mm:ss'))\n          prev[next.value[0]] = dateValue[0]\n          prev[next.value[1]] = dateValue[1]\n\n          if (reset) {\n            this.dateTimePick[`${next.value[0]}${next.value[1] || ''}`] = [\n              dateValue[0],\n              dateValue[1]\n            ]\n          }\n\n          return prev\n        }\n\n        // 若为弹窗选择储存name以用于保存参数\n        if (\n          next.type === 'cndInputDialog' ||\n          next.type === 'cndInputDialogItem'\n        ) {\n          if (next.default === 0 || next.default) {\n            if (Array.isArray(next.default)) {\n              prev[`_preview${next.value}`] = next.default.map((val, index) => {\n                const labelData = Array.isArray(next.labelDefault)\n                  ? next.labelDefault\n                  : [next.labelDefault]\n                return {\n                  label: labelData[index],\n                  _label: labelData[index],\n                  value: val,\n                  _value: val\n                }\n              })\n            } else {\n              prev[`_preview${next.value}`] = {\n                label: next.labelDefault,\n                _label: next.labelDefault,\n                value: next.default,\n                _value: next.default\n              }\n            }\n          }\n          if (reset) {\n            if (\n              next.type === 'cndInputDialog' ||\n              next.type === 'cndInputDialogItem'\n            ) {\n              this.$set(this.searchOtherObject, next.value, {\n                valueText: Array.isArray(next.labelDefault)\n                  ? next.labelDefault.join(',')\n                  : next.labelDefault\n              })\n            }\n          }\n        }\n        if (next.type === 'elCheckbox') {\n          prev[next.value] = next.checked || !!next.default\n        } else if (next.type === 'elCheckboxGroup') {\n          prev[next.value] = next.default || []\n        } else if (next.type === 'doubleInput') {\n          next.value?.forEach((key, index) => {\n            prev[key] = next.default?.[index]\n          })\n        } else {\n          prev[next.value] = next.default\n        }\n        return prev\n      }, {})\n    },\n    initFormRules() {\n      const result = {}\n      this.formItems.forEach((item) => {\n        if (item.required) {\n          if (item.type === 'elDatePicker') {\n            result[item.value[0]] = [\n              {\n                validator: (rule, value, cb) => {\n                  if (\n                    this.searchInfo[item.value[0]] ||\n                    this.searchInfo[item.value[1]]\n                  ) {\n                    cb()\n                  } else {\n                    cb(new Error('no'))\n                  }\n                },\n                trigger: ['blur', 'change'],\n                required: true\n              }\n            ]\n          } else {\n            result[item.value] = [\n              {\n                required: true,\n                trigger: ['blur', 'change']\n              }\n            ]\n          }\n        }\n      })\n\n      return result\n    },\n    // 选择参数回填\n    filterAction(params) {\n      this.searchInfo = params\n      // this.searchInfo = Object.assign(this.searchInfo, params)\n      const datePcikerItem = this.formItems.filter(\n        (item) => item.type === 'elDatePicker'\n      )\n      datePcikerItem.forEach((item) => {\n        this.dateTimePick[`${item.value[0]}${item.value[1] || ''}`] =\n          [params[item.value[0]], params[item.value[1]]] ||\n          this.dateTimePick[`${item.value[0]}${item.value[1]}`]\n      })\n      // this.submit()\n      this.submit(true, true)\n    },\n    blurDatePicker() {\n      this.$emit('blur-date-picker')\n    },\n    // 选择日期\n    handleChangeTime(dateArray, valueArray) {\n      if (valueArray[1]) {\n        this.searchInfo[valueArray[0]] = dateArray\n          ? moment(dateArray[0]).format('YYYY-MM-DD HH:mm:ss')\n          : undefined\n        // this.searchInfo[valueArray[0]] = dateArray\n        //   ? dateArray[0]\n        //   : undefined\n        // this.searchInfo[valueArray[1]] = dateArray\n        //   ? dateArray[1]\n        //   : undefined\n        this.searchInfo[valueArray[1]] = dateArray\n          ? moment(dateArray[1]).format('LTS') === '00:00:00'\n            ? moment(dateArray[1]).endOf('day')._d\n            : moment(dateArray[1]).format('YYYY-MM-DD HH:mm:ss')\n          : undefined\n        // this.searchInfo[valueArray[1]] = dateArray\n        //   ? new Date(new Date(new Date((dateArray[1].getFullYear() + '-' + (dateArray[1].getMonth() + 1) + '-' + dateArray[1].getDate()).replace(/-/g, '/')).getTime()).getTime() + 24 * 60 * 60 * 1000 - 1)\n        //   : undefined\n      } else {\n        this.searchInfo[valueArray[0]] = dateArray\n          ? moment(dateArray).format('YYYY-MM-DD HH:mm:ss')\n          : undefined\n        // this.searchInfo[valueArray[0]] = dateArray\n        //   ? new Date(new Date(new Date((dateArray.getFullYear() + '-' + (dateArray.getMonth() + 1) + '-' + dateArray.getDate()).replace(/-/g, '/')).getTime()).getTime() + 24 * 60 * 60 * 1000 - 1)\n        //   : undefined\n      }\n      this.submit(false, this.isAutoQuery)\n    },\n    handleChangeSelect(val, item, inside = true, needSubmit = true) {\n      // inside 判断是否为内部触发, 外部给值统一走单选(外部值处理完)\n      // needSubmit 有些select初始化设置了默认值会触发change\n      if (item.multiple && inside) {\n        this.searchInfo[item.value] = val.map((v) => v._value)\n        const valueText = val.map((v) => v._label).join(',')\n        // 用于在tags显示\n        this.searchOtherObject[item.value] = { ...val, valueText }\n      } else {\n        this.searchInfo[item.value] = val._value\n        // 用于在tags显示\n        this.searchOtherObject[item.value] = { ...val, valueText: val._label }\n      }\n      // 执行 change 事件\n      item.change && item.change(val, item)\n      // 由于某些select设置了默认值但是默认值是由于接口获取的，获取完后会触发change\n      // 接口初始化后触发的change为了显示tags，而不触发搜索，所以做了此判断\n      if (needSubmit) {\n        this.submit(false, this.isAutoQuery)\n      } else {\n        this.searchDataObject = this.getFormValues()\n      }\n    },\n    submit(flagFold = true, search = false, isClick = false) {\n      this.validate().then((valid) => {\n        if (valid) {\n          this.tips = false\n          // 点击查询触发的查询 并 处于展开的状态\n          if (isClick && this.occultationShow) {\n            // this.$refs.filterBtn.collapseFilter()\n            this.collapseFilter()\n          }\n          this.$emit('searchValue', this.searchInfo)\n          if (search) {\n            this.searchFormValues = this.getFormValues()\n            this.$emit('search', this.searchFormValues)\n            this.setSearchCndInputDialogObject()\n          }\n\n          flagFold && (this.activePanel = '1')\n          try {\n            const searchDataObject = this.getFormValues()\n            if (search) {\n              this.searchDataObject = searchDataObject\n            }\n            const allSearchConditionArr = Object.keys(searchDataObject)\n            const nullSearchParams = []\n            const searchConditionArr = []\n            for (let i = 0; i < allSearchConditionArr.length; i++) {\n              const item = allSearchConditionArr[i]\n              if (searchDataObject[item]) {\n                searchConditionArr.push(item)\n              } else {\n                nullSearchParams.push(item)\n              }\n            }\n            if (this.isClickReset) {\n              this.isClickReset = false\n              return\n            }\n            const analyticsInstance = analytics.getAnalyticsInstance(this)\n            analyticsInstance.reportEvent('advanced_search_trigger', {\n              valid_search_params: searchConditionArr,\n              null_search_params: nullSearchParams,\n              trigger_type: flagFold ? '点击查询按钮' : '选择下拉框 '\n            })\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n    },\n    selectGet(data, oldValue, selectKey, FormKey) {\n      let obj = {}\n      const list = data.dict\n      const option = data.option || {}\n      obj = list.find((item) => {\n        return item[option.value || 'value'] === oldValue\n      })\n      if (selectKey) {\n        this.searchInfo[FormKey] = obj[selectKey]\n      }\n      this.submit(false, this.isAutoQuery)\n    },\n    cascaderGet(list, oldValue, selectKey, FormKey, refKey) {\n      const checkedNodes = this.$refs[refKey][0].getCheckedNodes() || []\n      const valueText = checkedNodes.map((v) => v.label).join(',')\n      this.searchOtherObject[FormKey] = { valueText: valueText } // 记录选中的文本信息\n      let obj = {}\n      obj = list.find((item) => {\n        return item.sCodeValue === oldValue\n      })\n      if (selectKey) {\n        this.searchInfo[FormKey] = obj[selectKey]\n      }\n      this.submit(false, this.isAutoQuery)\n    },\n    getFormValues() {\n      // const reg = new RegExp(/\\s/)\n      const result = {}\n      const datePickerItem = this.formItems.filter(\n        (item) => item.type === 'elDatePicker'\n      )\n\n      this.formItems.forEach((item) => {\n        if (item.type === 'doubleInput') {\n          this.doubleInputObject[`_doubleInput${item.value[0]}`] = item\n        }\n        if (\n          item.type === 'cndInputDialog' ||\n          item.type === 'cndInputDialogItem'\n        ) {\n          if (!this.searchOtherObject?.[item.value]) {\n            this.$set(this.searchOtherObject, item.value, {\n              valueText: Array.isArray(item.labelDefault)\n                ? item.labelDefault.join(',')\n                : item.labelDefault\n            })\n          }\n        }\n      })\n\n      Object.keys(this.searchInfo)\n        .filter((key) => !key.includes('_preview'))\n        .forEach((key) => {\n          result[key] =\n            typeof this.searchInfo[key] === 'string'\n              ? this.searchInfo[key].replace(/^\\s+|\\s+$/g, '')\n              : !Validate.isUndeFinedOrNullOrBlank(this.searchInfo[key])\n                ? this.searchInfo[key]\n                : undefined\n        })\n      if (datePickerItem.length) {\n        datePickerItem.forEach((item) => {\n          item.value.forEach((date) => {\n            result[date] = result[date]\n              ? moment(result[date]).format('YYYY-MM-DDTHH:mm:ss')\n              : undefined\n          })\n        })\n      }\n      console.log('result', result)\n      return result\n    },\n    getSearchData() {\n      return this.searchFormValues\n    },\n    validate() {\n      return new Promise((resolve, reject) => {\n        const validate = this.$refs.cndFilter.validate()\n        resolve(validate)\n      })\n    },\n    reset() {\n      this.searchInfo = this.initForm(this.formItemsReset, true)\n      this.isClickReset = true\n      this.searchFormValues = this.getFormValues()\n      this.setSearchCndInputDialogObject()\n      // this.dateTimePick = this.initDateTimePick(this.formItemsReset)\n      this.submit(false, true)\n      try {\n        const analyticsInstance = analytics.getAnalyticsInstance(this)\n        analyticsInstance.reportEvent('advanced_search_reset_click')\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    handleCloseTag({ value: tag }) {\n      if (tag.disabled || tag.required) return\n      delete this.searchDataObject[tag.value]\n      this.searchDataObject = { ...this.searchDataObject }\n      if (tag.type === 'elInput') {\n        // 普通输入框\n        this.searchInfo[tag.value] = ''\n      } else if (tag.type === 'elCheckbox') {\n        // 多选框\n        this.searchInfo[tag.value] = tag.falseLabel\n      } else if (tag.type === 'elDatePicker') {\n        // 日期选择框\n        const key = tag.value.join('')\n        this.dateTimePick[key] = []\n        tag.value.forEach((v) => {\n          this.searchInfo[v] = ''\n        })\n      } else if (\n        ['cndInputDialog', 'cndInputDialogItem'].indexOf(tag.type) !== -1\n      ) {\n        // 选择框-搜索框\n        this.searchInfo[tag.value] = undefined\n        this.searchInfo[`_preview${tag.value}`] = ''\n      } else if (tag.type === 'doubleInput') {\n        tag.value.forEach((v) => {\n          this.searchInfo[v] = undefined\n        })\n      } else {\n        this.searchInfo[tag.value] = undefined\n      }\n      this.submit(true, true)\n    },\n    // 提供给外部调用，修改 searchInfo 的值，目前仅支持修改elInput类型的值\n    setSearchInfo(key, value) {\n      const item = this.formItems.find((v) => v.value === key)\n      if (item && item.type === 'elInput') {\n        this.searchInfo[key] = value\n      } else {\n        console.error('仅支持修改elInput类型的值')\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}