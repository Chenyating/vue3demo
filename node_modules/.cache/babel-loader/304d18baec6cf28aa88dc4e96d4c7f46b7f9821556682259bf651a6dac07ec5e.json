{"ast":null,"code":"import { defineStore, createPinia } from 'pinia';\n\n// 创建一个 Pinia store\nconst pinia = createPinia();\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {} // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7);\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        this.cacheData[cacheKey] = {};\n      }\n\n      // 判断是否存在差异，如果存在则存储为最新版本\n      const lastVersion = this.cacheData[cacheKey].latestVersion;\n      if (!lastVersion || JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)) {\n        ;\n        this.cacheData[cacheKey][`version${lastVersion ? lastVersion.number + 1 : 0}`] = cacheInfo, this.cacheData[cacheKey].latestVersion = cacheInfo;\n\n        // 自动缓存\n        if (time > 0) {\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo);\n          }, time);\n\n          // 取消自动缓存\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer;\n        }\n      }\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer);\n      }\n    },\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey];\n        localStorage.removeItem(cacheKey);\n        return true;\n      }\n      return false;\n    },\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey);\n      }\n      this.cacheData = {};\n    },\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData;\n    },\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        return this.cacheData[cacheKey].latestVersion ? this.cacheData[cacheKey].latestVersion.data : {};\n      }\n      return {};\n    },\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey][`version${versionNum}`]) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data;\n      }\n      return {};\n    },\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (versionNum === undefined || versionNum === this.cacheData[cacheKey].latestVersion.number) {\n        return {};\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`];\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`];\n      const diff = {};\n      for (const key in currentVersion.data) {\n        if (JSON.stringify(currentVersion.data[key]) !== JSON.stringify(nextVersion.data[key])) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]];\n        }\n      }\n      return diff;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","createPinia","pinia","cubeCacheStore","state","cacheData","actions","getCacheKey","Math","random","toString","substring","set","cacheKey","cacheInfo","time","lastVersion","latestVersion","JSON","stringify","data","number","autoSaveTimer","setInterval","cancelAutoSave","clearInterval","clear","localStorage","removeItem","clearAll","getAll","get","getVersion","versionNum","diff","undefined","currentVersion","nextVersion","key"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore, createPinia } from 'pinia'\n\n// 创建一个 Pinia store\nconst pinia = createPinia()\n\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {}, // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7)\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        this.cacheData[cacheKey] = {}\n      }\n\n      // 判断是否存在差异，如果存在则存储为最新版本\n      const lastVersion = this.cacheData[cacheKey].latestVersion\n      if (\n        !lastVersion ||\n        JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)\n      ) {\n        ;(this.cacheData[cacheKey][\n          `version${lastVersion ? lastVersion.number + 1 : 0}`\n        ] = cacheInfo),\n          (this.cacheData[cacheKey].latestVersion = cacheInfo)\n\n        // 自动缓存\n        if (time > 0) {\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo)\n          }, time)\n\n          // 取消自动缓存\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer\n        }\n      }\n    },\n\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer)\n      }\n    },\n\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey]\n        localStorage.removeItem(cacheKey)\n        return true\n      }\n      return false\n    },\n\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey)\n      }\n      this.cacheData = {}\n    },\n\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData\n    },\n\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        return this.cacheData[cacheKey].latestVersion\n          ? this.cacheData[cacheKey].latestVersion.data\n          : {}\n      }\n      return {}\n    },\n\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (\n        this.cacheData[cacheKey] &&\n        this.cacheData[cacheKey][`version${versionNum}`]\n      ) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data\n      }\n      return {}\n    },\n\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (\n        versionNum === undefined ||\n        versionNum === this.cacheData[cacheKey].latestVersion.number\n      ) {\n        return {}\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`]\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`]\n      const diff = {}\n\n      for (const key in currentVersion.data) {\n        if (\n          JSON.stringify(currentVersion.data[key]) !==\n          JSON.stringify(nextVersion.data[key])\n        ) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]]\n        }\n      }\n\n      return diff\n    },\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}