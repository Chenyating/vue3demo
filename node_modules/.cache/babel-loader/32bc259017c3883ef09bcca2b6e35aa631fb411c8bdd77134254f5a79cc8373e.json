{"ast":null,"code":"import { Format } from '@cndinfo/cube-web-utils';\nimport { Validate } from '@cndinfo/cube-web-utils';\nimport '../../../../lib/styles/components/InputNumber.scss';\nexport default {\n  name: 'InputNumber',\n  props: {\n    // 组件唯一标识\n    mark: {\n      type: String,\n      default: ''\n    },\n    // 是否在ag-grid中使用  没有用到\n    forGrid: {\n      type: Boolean,\n      default: false\n    },\n    // 绑定值（v-model）\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    // 输入的类型\n    type: {\n      type: String,\n      default: 'amount'\n    },\n    // 输入框提示文本\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    // 输入框尺寸\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 保留几位小数(输入时限制)\n    decimalDigit: {\n      type: Number,\n      default: null\n    },\n    // 输入值的范围\n    range: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    // 是否展示千分符\n    thousandthSign: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可输入负值\n    negative: {\n      type: Boolean,\n      default: false\n    },\n    // 只输入负值\n    minus: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自动聚焦\n    autoFocus: {\n      type: Boolean,\n      default: false\n    },\n    // 聚焦是否选中内容\n    focusSelect: {\n      type: Boolean,\n      default: false\n    },\n    // （ag-grid中使用必须有）\n    params: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    // 必填\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // 输入规则\n    rules: {\n      type: Array,\n      default: () => {\n        return [{\n          max: 19,\n          min: 6\n        }];\n      }\n    },\n    // 是否返回空\n    returnNull: {\n      type: Boolean,\n      default: false\n    },\n    rangeKey: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      visible1: false,\n      visible2: false,\n      unformatValue: '',\n      childValue: this.value,\n      // 当前是否聚焦\n      flagFocus: false,\n      msg: '',\n      oldChildValue: this.value\n    };\n  },\n  computed: {\n    isPlaceholder() {\n      return this.placeholder || this.$t('components.pleaseEnter');\n    }\n  },\n  watch: {\n    value(nv, ov) {\n      this.childValue = nv;\n      this.formatNum(this.flagFocus);\n    }\n  },\n  mounted() {\n    if (this.params && Object.keys(this.params).length > 0) {\n      this.childValue = this.params.value;\n    } // （ag-grid中使用必须有）\n    this.formatNum();\n    // 返回当前组件指向\n    this.mark && this.$emit('getComponent', this);\n    this.$nextTick(() => {\n      this.autoFocus && this.focus();\n    });\n  },\n  // 销毁前触发失焦事件--解决ag-grid点击直接退出编辑状态情况\n  beforeDestroy() {\n    const pseudoEvent = {\n      mark: 'pseudoEvent',\n      target: {\n        value: this.childValue\n      }\n    };\n    this.flagFocus && this.blurAction(pseudoEvent);\n  },\n  methods: {\n    // 监听键盘事件\n    tabCell(e) {\n      if (!this.mark) return;\n      // 解决ag-grid编辑状态回车赋值以及计算问题\n      if (e.keyCode === 13) {\n        const pseudoEvent = {\n          mark: 'pseudoEvent',\n          target: {\n            value: this.childValue\n          }\n        };\n        this.flagFocus && this.blurAction(pseudoEvent);\n      }\n      this.$emit('keyup', e);\n    },\n    // 设置值方法\n    setValue(value) {\n      this.childValue = value;\n      this.$emit('input', this.childValue);\n      this.$emit('change', this.childValue);\n      this.$emit('getVal', this.childValue); // （ag-grid中使用必须有）\n      this.formatNum(false);\n    },\n    focus() {\n      // this.$children[0].focus()\n      this.$children[0].referenceElm.focus();\n    },\n    blur() {\n      // this.$children[0].blur()\n      this.$children[0].referenceElm.blur();\n    },\n    select() {\n      this.$refs.inputNumber.focus();\n      // this.$children[0].select()\n    },\n\n    // 清空事件\n    clear() {\n      this.focus();\n      this.$emit('clear', this.childValue);\n      this.$emit('input', this.childValue);\n      this.$emit('change', this.childValue);\n      this.$emit('getVal', this.childValue); // （ag-grid中使用必须有）\n    },\n\n    // 输入事件\n    inputAction() {\n      if (this.childValue === '' && this.required) {\n        this.visible1 = this.visible2 = true;\n        this.msg = this.$t('grid.others.pleaseEnterTheDataValue');\n      } else if (this.rules.length > 0) {\n        this.rules.map(item => {\n          if (item.max || item.min) {\n            const _max = this.childValue.toString().split('.')[0].length;\n            const _min = this.childValue.toString().indexOf('.') !== -1 ? this.childValue.toString().split('.')[1].length : 0;\n            if (item.max < _max || item.min < _min) {\n              this.visible1 = this.visible2 = true;\n              this.msg = item.msg ? item.msg : item.max && item.min ? `整数位最多${item.max}位,小数位最多${this.decimalDigit ? this.decimalDigit : item.min}位。` : item.max ? `整数位最多输入${item.max}位。` : `小数位最多输入${item.min}位。`;\n            } else {\n              this.visible1 = this.visible2 = false;\n            }\n          } else if (item.fn) {\n            this.visible1 = this.visible2 = !item.fn(this.childValue);\n            this.msg = item.msg;\n          }\n        });\n      } else {\n        this.visible1 = this.visible2 = false;\n      }\n      this.setVal();\n    },\n    setVal() {\n      // let reg = /[^\\d\\.]/g\n      // let reg2 = /[^+\\d\\.]/g\n      // this.childValue = this.childValue.replace(/(?<!^)-/g, '')\n      // this.negative && (reg = /[^-\\d\\.]/g) && (this.childValue = this.childValue.replace('-','$#$').replace(/\\-/g,'').replace('$#$','-'))\n      // this.minus && (reg = /[^-\\d\\.]/g) && (this.childValue = this.childValue.replace('-','$#$').replace(/\\-/g,'').replace('$#$',''))\n      // this.childValue = this.childValue.replace(reg, '')\n      // this.childValue = this.childValue.replace('.','$#$').replace(/\\./g,'').replace('$#$','.')\n      // if(this.minus && !reg2.test(this.childValue) && this.childValue && this.childValue !== 0){\n      //   this.childValue = '-' + this.childValue\n      // }\n\n      // replace(/(?!(-|\\.|\\d))./g, '') // 替换所有非 - . 数字 的字符\n      this.childValue = this.childValue.replace(/(.*\\..*)(\\.)/g, '$1') // 不管第一个点的位置，只替换第二个点(.)\n      .replace(/(.+)(-)/g, '$1'); // 替换不在第一位的 -\n      this.negative && (this.childValue = this.childValue.replace(/(?!(-|\\.|\\d))./g, ''));\n      if (this.minus) {\n        this.childValue = this.childValue.replace(/(?!(\\.|\\d))./g, '');\n        this.childValue = '-' + this.childValue;\n      }\n      !this.negative && !this.minus && (this.childValue = this.childValue.replace(/(?!(\\.|\\d))./g, ''));\n\n      // 如果小数超过限制截取限制数\n      if (!Validate.isUndeFinedOrNullOrBlank(this.decimalDigit) && !isNaN(Number(this.decimalDigit))) {\n        if (this.childValue.indexOf('.') > -1 && this.childValue.split('.')[1].length > Number(this.decimalDigit) || this.childValue.indexOf('.') > -1 && this.childValue.endsWith('.') && this.decimalDigit === 0) {\n          const tempArr = this.childValue.split('.');\n          if (Number(this.decimalDigit) === 0) {\n            this.childValue = tempArr[0];\n          } else if (Number(this.decimalDigit) > 0) {\n            this.childValue = tempArr[0] + '.' + tempArr[1].substr(0, Number(this.decimalDigit));\n          }\n        }\n      }\n      if (this.type !== 'percent') {\n        this.$emit('input', this.childValue);\n        this.$emit('change', this.childValue);\n        this.$emit('getVal', this.visible2 ? this.oldChildValue : this.childValue); // （ag-grid中使用必须有）\n      } else if (!isNaN(Number(this.childValue))) {\n        const tempVal = this.childValue === '' && this.returnNull ? '' : this.type === 'percent' ? Format.accDiv(Format.keepDecimalPlaces(Format.accMul(Number(this.childValue), 100) + '', this.decimalDigit + 2), 10000) : Format.accDiv(this.childValue, 100);\n        // const tempVal  = Format.accDiv(Number(this.childValue), 100)\n        this.$emit('getVal', this.visible2 ? this.oldChildValue : tempVal); // （ag-grid中使用必须有）\n      }\n    },\n\n    // 聚焦事件\n    focusAction(e) {\n      if (this.visible2) this.visible1 = true;\n      // console.log('聚焦1--', e.target.value)\n      // console.log('聚焦childValue--', this.childValue)\n      this.flagFocus = true;\n      if (this.childValue) {\n        // 百分比转为数字\n        if (this.type === 'percent') {\n          // e.target.value = this.childValue = Format.toPoint(this.childValue)\n          this.childValue = e.target.value = this.childValue.replace('%', '');\n          // console.log('聚焦事件后--', this.childValue)\n        } else if (this.type === 'amount' || this.thousandthSign) {\n          // 货币格式（千分符）转为数字\n          e.target.value = this.childValue = Format.toNum(this.childValue);\n        }\n      }\n      // console.log('聚焦2--', e.target.value)\n      if (this.focusSelect) {\n        this.$nextTick(() => {\n          e.target.select();\n        });\n      }\n      this.$emit('focus', e);\n    },\n    // 失焦事件\n    blurAction(e) {\n      this.childValue === '-' && (this.childValue = 0);\n      this.visible1 = false;\n      // console.log('失焦--', e.target.value)\n      // console.log('失焦事件--', this.childValue)\n      if (this.childValue) {\n        this.childValue = this.rangeControl(this.childValue);\n        // if (this.type === 'number') {\n        // this.childValue = parseFloat(this.childValue)\n        // }\n      }\n      // console.log('失焦控制位数--', this.childValue)\n      if (this.type === 'percent') {\n        // 如果不允许返回0 !this.returnNull  0-> '',数值->数值%\n        // 允许返回0 this.returnNull  0-> 0,数值->数值%\n        this.childValue = e.target.value = this.returnNull && !this.childValue ? this.childValue : Format.accDiv(Format.keepDecimalPlaces(Format.accMul(Number(this.childValue), 100) + '', this.decimalDigit + 2), 10000);\n        // this.childValue = e.target.value =\n        //   this.returnNull && !this.childValue\n        //     ? this.childValue\n        //     : Format.accDiv(\n        //       Format.keepDecimalPlaces(\n        //         Number(this.childValue),\n        //         this.decimalDigit\n        //       ),\n        //       100\n        //     )\n        // console.log('旧版')\n      }\n\n      !this.returnNull && this.$emit('getVal', this.childValue); // （ag-grid中使用必须有）\n      this.$emit('input', this.childValue);\n      this.$emit('change', this.childValue);\n      e.target.value = this.childValue;\n      this.$emit('blur', e);\n      this.flagFocus = false;\n      this.formatNum(this.flagFocus);\n      // console.log('失焦format--', this.childValue)\n    },\n\n    // 格式化内容\n    formatNum(flag = false) {\n      // console.log(\"格式化前--\", this.childValue)\n      if (!flag && this.childValue) {\n        this.unformatValue = this.childValue;\n        if (this.decimalDigit && this.type !== 'percent') {\n          // 数字保留小数位数\n          // const v = new Decimal(this.childValue).toFixed(this.decimalDigit)\n          // this.childValue = v\n          this.childValue = Format.keepDecimalPlaces(this.childValue + '', this.decimalDigit);\n        }\n        if (this.thousandthSign) {\n          // 数字转为千分符\n          this.childValue = Format.formatThousandthSign(this.childValue + '', this.decimalDigit);\n        }\n        // 数字转为百分比\n        if (this.type === 'percent') {\n          this.childValue = `${Format.accMul(this.childValue, 100)}%`;\n        } else if (this.type === 'amount') {\n          // 数字转为千分位金额-\n          this.childValue = Format.formatPrice(this.childValue, this.decimalDigit);\n        }\n      }\n    },\n    // 值范围控制\n    rangeControl(value) {\n      let _min = null;\n      let _max = null;\n      const multiple = this.type === 'percent' ? 100 : 1;\n      if (this.rangeKey.length && this.rangeKey.length === 2) {\n        const minNum = this.params.data[this.rangeKey[0]];\n        const maxNum = this.params.data[this.rangeKey[1]];\n        _min = Number(minNum) * multiple;\n        this.rangeKey[1] && (_max = Number(maxNum) * multiple);\n      } else {\n        _min = Number(this.range[0]) * multiple;\n        this.range[1] && (_max = this.range[1] * multiple);\n      }\n      if (this.range && this.range.length > 0 || this.rangeKey && this.rangeKey.length === 2) {\n        // 小于最小值情况\n        if (Number(value) < _min) {\n          return Number(_min);\n        }\n        if (_max && Number(value) > _max) {\n          return _max;\n        }\n        return value;\n      }\n      return value;\n    }\n  }\n};","map":{"version":3,"names":["Format","Validate","name","props","mark","type","String","default","forGrid","Boolean","value","Number","placeholder","size","disabled","decimalDigit","range","Array","thousandthSign","negative","minus","autoFocus","focusSelect","params","Object","required","rules","max","min","returnNull","rangeKey","data","visible1","visible2","unformatValue","childValue","flagFocus","msg","oldChildValue","computed","isPlaceholder","$t","watch","nv","ov","formatNum","mounted","keys","length","$emit","$nextTick","focus","beforeDestroy","pseudoEvent","target","blurAction","methods","tabCell","e","keyCode","setValue","$children","referenceElm","blur","select","$refs","inputNumber","clear","inputAction","map","item","_max","toString","split","_min","indexOf","fn","setVal","replace","isUndeFinedOrNullOrBlank","isNaN","endsWith","tempArr","substr","tempVal","accDiv","keepDecimalPlaces","accMul","focusAction","toNum","rangeControl","flag","formatThousandthSign","formatPrice","multiple","minNum","maxNum"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/InputNumber/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"ag-input-number\">\n    <el-popover\n      v-model=\"visible1\"\n      popper-class=\"input-number-pop\"\n      placement=\"top-start\"\n      :content=\"msg\"\n      trigger=\"manual\"\n    >\n      <el-input\n        slot=\"reference\"\n        v-model=\"childValue\"\n        :class=\"['input-number', visible2 ? 'error-input' : '']\"\n        :size=\"size\"\n        :disabled=\"disabled\"\n        :placeholder=\"isPlaceholder\"\n        clearable\n        @input=\"inputAction\"\n        @focus=\"focusAction\"\n        @blur=\"blurAction\"\n        @keyup.native=\"tabCell\"\n        @clear=\"clear\"\n      />\n    </el-popover>\n  </div>\n</template>\n\n<script>\nimport { Format } from '@cndinfo/cube-web-utils'\nimport { Validate } from '@cndinfo/cube-web-utils'\nimport '../../../../lib/styles/components/InputNumber.scss'\n\nexport default {\n  name: 'InputNumber',\n  props: {\n    // 组件唯一标识\n    mark: {\n      type: String,\n      default: ''\n    },\n    // 是否在ag-grid中使用  没有用到\n    forGrid: {\n      type: Boolean,\n      default: false\n    },\n    // 绑定值（v-model）\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    // 输入的类型\n    type: {\n      type: String,\n      default: 'amount'\n    },\n    // 输入框提示文本\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    // 输入框尺寸\n    size: {\n      type: String,\n      default: 'mini'\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 保留几位小数(输入时限制)\n    decimalDigit: {\n      type: Number,\n      default: null\n    },\n    // 输入值的范围\n    range: {\n      type: Array,\n      default: () => {\n        return []\n      }\n    },\n    // 是否展示千分符\n    thousandthSign: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可输入负值\n    negative: {\n      type: Boolean,\n      default: false\n    },\n    // 只输入负值\n    minus: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自动聚焦\n    autoFocus: {\n      type: Boolean,\n      default: false\n    },\n    // 聚焦是否选中内容\n    focusSelect: {\n      type: Boolean,\n      default: false\n    },\n    // （ag-grid中使用必须有）\n    params: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    // 必填\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // 输入规则\n    rules: {\n      type: Array,\n      default: () => {\n        return [{ max: 19, min: 6 }]\n      }\n    },\n    // 是否返回空\n    returnNull: {\n      type: Boolean,\n      default: false\n    },\n    rangeKey: {\n      type: Array,\n      default: () => { return [] }\n    }\n  },\n  data() {\n    return {\n      visible1: false,\n      visible2: false,\n      unformatValue: '',\n      childValue: this.value,\n      // 当前是否聚焦\n      flagFocus: false,\n      msg: '',\n      oldChildValue: this.value\n    }\n  },\n  computed: {\n    isPlaceholder() {\n      return this.placeholder || this.$t('components.pleaseEnter')\n    }\n  },\n  watch: {\n    value(nv, ov) {\n      this.childValue = nv\n      this.formatNum(this.flagFocus)\n    }\n  },\n  mounted() {\n    if (this.params && Object.keys(this.params).length > 0) { this.childValue = this.params.value } // （ag-grid中使用必须有）\n    this.formatNum()\n    // 返回当前组件指向\n    this.mark && this.$emit('getComponent', this)\n    this.$nextTick(() => {\n      this.autoFocus && this.focus()\n    })\n  },\n  // 销毁前触发失焦事件--解决ag-grid点击直接退出编辑状态情况\n  beforeDestroy() {\n    const pseudoEvent = {\n      mark: 'pseudoEvent',\n      target: {\n        value: this.childValue\n      }\n    }\n    this.flagFocus && this.blurAction(pseudoEvent)\n  },\n  methods: {\n    // 监听键盘事件\n    tabCell(e) {\n      if (!this.mark) return\n      // 解决ag-grid编辑状态回车赋值以及计算问题\n      if (e.keyCode === 13) {\n        const pseudoEvent = {\n          mark: 'pseudoEvent',\n          target: {\n            value: this.childValue\n          }\n        }\n        this.flagFocus && this.blurAction(pseudoEvent)\n      }\n      this.$emit('keyup', e)\n    },\n    // 设置值方法\n    setValue(value) {\n      this.childValue = value\n      this.$emit('input', this.childValue)\n      this.$emit('change', this.childValue)\n      this.$emit('getVal', this.childValue) // （ag-grid中使用必须有）\n      this.formatNum(false)\n    },\n    focus() {\n      // this.$children[0].focus()\n      this.$children[0].referenceElm.focus()\n    },\n    blur() {\n      // this.$children[0].blur()\n      this.$children[0].referenceElm.blur()\n    },\n    select() {\n      this.$refs.inputNumber.focus()\n      // this.$children[0].select()\n    },\n    // 清空事件\n    clear() {\n      this.focus()\n      this.$emit('clear', this.childValue)\n      this.$emit('input', this.childValue)\n      this.$emit('change', this.childValue)\n      this.$emit('getVal', this.childValue) // （ag-grid中使用必须有）\n    },\n    // 输入事件\n    inputAction() {\n      if (this.childValue === '' && this.required) {\n        this.visible1 = this.visible2 = true\n        this.msg = this.$t('grid.others.pleaseEnterTheDataValue')\n      } else if (this.rules.length > 0) {\n        this.rules.map((item) => {\n          if (item.max || item.min) {\n            const _max = this.childValue.toString().split('.')[0].length\n            const _min =\n              this.childValue.toString().indexOf('.') !== -1\n                ? this.childValue.toString().split('.')[1].length\n                : 0\n            if (item.max < _max || item.min < _min) {\n              this.visible1 = this.visible2 = true\n              this.msg = item.msg\n                ? item.msg\n                : item.max && item.min\n                  ? `整数位最多${item.max}位,小数位最多${\n                    this.decimalDigit ? this.decimalDigit : item.min\n                  }位。`\n                  : item.max\n                    ? `整数位最多输入${item.max}位。`\n                    : `小数位最多输入${item.min}位。`\n            } else {\n              this.visible1 = this.visible2 = false\n            }\n          } else if (item.fn) {\n            this.visible1 = this.visible2 = !item.fn(this.childValue)\n            this.msg = item.msg\n          }\n        })\n      } else {\n        this.visible1 = this.visible2 = false\n      }\n      this.setVal()\n    },\n    setVal() {\n      // let reg = /[^\\d\\.]/g\n      // let reg2 = /[^+\\d\\.]/g\n      // this.childValue = this.childValue.replace(/(?<!^)-/g, '')\n      // this.negative && (reg = /[^-\\d\\.]/g) && (this.childValue = this.childValue.replace('-','$#$').replace(/\\-/g,'').replace('$#$','-'))\n      // this.minus && (reg = /[^-\\d\\.]/g) && (this.childValue = this.childValue.replace('-','$#$').replace(/\\-/g,'').replace('$#$',''))\n      // this.childValue = this.childValue.replace(reg, '')\n      // this.childValue = this.childValue.replace('.','$#$').replace(/\\./g,'').replace('$#$','.')\n      // if(this.minus && !reg2.test(this.childValue) && this.childValue && this.childValue !== 0){\n      //   this.childValue = '-' + this.childValue\n      // }\n\n      // replace(/(?!(-|\\.|\\d))./g, '') // 替换所有非 - . 数字 的字符\n      this.childValue = this.childValue\n        .replace(/(.*\\..*)(\\.)/g, '$1') // 不管第一个点的位置，只替换第二个点(.)\n        .replace(/(.+)(-)/g, '$1') // 替换不在第一位的 -\n      this.negative &&\n        (this.childValue = this.childValue.replace(/(?!(-|\\.|\\d))./g, ''))\n      if (this.minus) {\n        this.childValue = this.childValue.replace(/(?!(\\.|\\d))./g, '')\n        this.childValue = '-' + this.childValue\n      }\n      !this.negative &&\n        !this.minus &&\n        (this.childValue = this.childValue.replace(/(?!(\\.|\\d))./g, ''))\n\n      // 如果小数超过限制截取限制数\n      if (\n        !Validate.isUndeFinedOrNullOrBlank(this.decimalDigit) &&\n        !isNaN(Number(this.decimalDigit))\n      ) {\n        if (\n         (this.childValue.indexOf('.') > -1 &&\n          this.childValue.split('.')[1].length > Number(this.decimalDigit))\n        ||( this.childValue.indexOf('.') > -1 && this.childValue.endsWith('.') && this.decimalDigit === 0)\n        ) {\n          const tempArr = this.childValue.split('.')\n          if (Number(this.decimalDigit) === 0) {\n            this.childValue = tempArr[0]\n          } else if (Number(this.decimalDigit) > 0) {\n            this.childValue =\n              tempArr[0] + '.' + tempArr[1].substr(0, Number(this.decimalDigit))\n          }\n        }\n      }\n      if (this.type !== 'percent') {\n        this.$emit('input', this.childValue)\n        this.$emit('change', this.childValue)\n        this.$emit(\n          'getVal',\n          this.visible2 ? this.oldChildValue : this.childValue\n        ) // （ag-grid中使用必须有）\n      } else if (!isNaN(Number(this.childValue))) {\n        const tempVal =\n          this.childValue === '' && this.returnNull\n            ? ''\n            : this.type === 'percent'\n              ? Format.accDiv(\n                Format.keepDecimalPlaces(\n                  Format.accMul(Number(this.childValue), 100) + '',\n                  this.decimalDigit + 2\n                ),\n                10000\n              )\n              : Format.accDiv(this.childValue, 100)\n        // const tempVal  = Format.accDiv(Number(this.childValue), 100)\n        this.$emit('getVal', this.visible2 ? this.oldChildValue : tempVal) // （ag-grid中使用必须有）\n      }\n    },\n    // 聚焦事件\n    focusAction(e) {\n      if (this.visible2) this.visible1 = true\n      // console.log('聚焦1--', e.target.value)\n      // console.log('聚焦childValue--', this.childValue)\n      this.flagFocus = true\n      if (this.childValue) {\n        // 百分比转为数字\n        if (this.type === 'percent') {\n          // e.target.value = this.childValue = Format.toPoint(this.childValue)\n          this.childValue = e.target.value = this.childValue.replace('%', '')\n          // console.log('聚焦事件后--', this.childValue)\n        } else if (this.type === 'amount' || this.thousandthSign) {\n          // 货币格式（千分符）转为数字\n          e.target.value = this.childValue = Format.toNum(this.childValue)\n        }\n      }\n      // console.log('聚焦2--', e.target.value)\n      if (this.focusSelect) {\n        this.$nextTick(() => {\n          e.target.select()\n        })\n      }\n      this.$emit('focus', e)\n    },\n    // 失焦事件\n    blurAction(e) {\n      this.childValue === '-' && (this.childValue = 0)\n      this.visible1 = false\n      // console.log('失焦--', e.target.value)\n      // console.log('失焦事件--', this.childValue)\n      if (this.childValue) {\n        this.childValue = this.rangeControl(this.childValue)\n        // if (this.type === 'number') {\n        // this.childValue = parseFloat(this.childValue)\n        // }\n      }\n      // console.log('失焦控制位数--', this.childValue)\n      if (this.type === 'percent') {\n        // 如果不允许返回0 !this.returnNull  0-> '',数值->数值%\n        // 允许返回0 this.returnNull  0-> 0,数值->数值%\n        this.childValue = e.target.value =\n          this.returnNull && !this.childValue\n            ? this.childValue\n            : Format.accDiv(\n              Format.keepDecimalPlaces(\n                Format.accMul(Number(this.childValue), 100) + '',\n                this.decimalDigit + 2\n              ),\n              10000\n            )\n        // this.childValue = e.target.value =\n        //   this.returnNull && !this.childValue\n        //     ? this.childValue\n        //     : Format.accDiv(\n        //       Format.keepDecimalPlaces(\n        //         Number(this.childValue),\n        //         this.decimalDigit\n        //       ),\n        //       100\n        //     )\n        // console.log('旧版')\n      }\n      !this.returnNull && this.$emit('getVal', this.childValue) // （ag-grid中使用必须有）\n      this.$emit('input', this.childValue)\n      this.$emit('change', this.childValue)\n      e.target.value = this.childValue\n      this.$emit('blur', e)\n      this.flagFocus = false\n      this.formatNum(this.flagFocus)\n      // console.log('失焦format--', this.childValue)\n    },\n    // 格式化内容\n    formatNum(flag = false) {\n      // console.log(\"格式化前--\", this.childValue)\n      if (!flag && this.childValue) {\n        this.unformatValue = this.childValue\n        if (this.decimalDigit && this.type !== 'percent') {\n          // 数字保留小数位数\n          // const v = new Decimal(this.childValue).toFixed(this.decimalDigit)\n          // this.childValue = v\n          this.childValue = Format.keepDecimalPlaces(\n            this.childValue + '',\n            this.decimalDigit\n          )\n        }\n        if (this.thousandthSign) {\n          // 数字转为千分符\n          this.childValue = Format.formatThousandthSign(\n            this.childValue + '',\n            this.decimalDigit\n          )\n        }\n        // 数字转为百分比\n        if (this.type === 'percent') {\n          this.childValue = `${Format.accMul(this.childValue, 100)}%`\n        } else if (this.type === 'amount') {\n          // 数字转为千分位金额-\n          this.childValue = Format.formatPrice(\n            this.childValue,\n            this.decimalDigit\n          )\n        }\n      }\n    },\n    // 值范围控制\n    rangeControl(value) {\n      let _min = null\n      let _max = null\n      const multiple = this.type === 'percent' ? 100 : 1\n      if (this.rangeKey.length && this.rangeKey.length === 2) {\n        const minNum = this.params.data[this.rangeKey[0]]\n        const maxNum = this.params.data[this.rangeKey[1]]\n        _min = Number(minNum) * multiple\n        this.rangeKey[1] && (_max = Number(maxNum) * multiple)\n      } else {\n        _min = Number(this.range[0]) * multiple\n        this.range[1] && (_max = this.range[1] * multiple)\n      }\n      if (this.range && this.range.length > 0 || this.rangeKey && this.rangeKey.length === 2) {\n        // 小于最小值情况\n        if (Number(value) < _min) {\n          return Number(_min)\n        }\n        if (_max && Number(value) > _max) {\n          return _max\n        }\n        return value\n      }\n\n      return value\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}