{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from \"vue\";\nlet initPath;\ntry {\n  initPath = UNI_ROUTES ? \"/\" + UNI_ROUTES.pages[0].path : \"\";\n} catch (e) {\n  initPath = \"\";\n}\nexport const route = {\n  // 当前路由对象所在的 path 等信息。默认为首页\n  fullPath: initPath,\n  path: `/${initPath.split(\"/\")[3]}`,\n  type: \"push\",\n  query: {}\n};\nlet _$ROUTING = false; // 标记路由状态 防止连点\nlet onchange = () => {}; // 路由变化监听函数\nconst _$UNI_ACTIVED_PAGE_ROUTES = []; // 页面数据缓存\nlet _$UNI_ROUTER_PUSH_POP_FUN = () => {}; // pushPop resolve 函数\nconst _c = obj => JSON.parse(JSON.stringify(obj)); // 简易克隆方法\n\nVue.mixin({\n  onShow() {\n    _$ROUTING = false;\n    const pages = getCurrentPages().map(e => `/${e.route}`).reverse(); // 获取页面栈\n\n    if (pages[0]) {\n      const old = _c(route); // 保存旧路由\n      const back = pages[0] !== route.fullPath;\n      const now = _$UNI_ACTIVED_PAGE_ROUTES.find(e => e.fullPath === pages[0]); // 如果路由没有被缓存就缓存\n      now ? Object.assign(route, now) : _$UNI_ACTIVED_PAGE_ROUTES.push(_c(route)); // 已缓存就用已缓存的更新 route 对象\n      _$UNI_ACTIVED_PAGE_ROUTES.splice(pages.length, _$UNI_ACTIVED_PAGE_ROUTES.length); // 最后清除无效缓存\n      if (back) {\n        // 当当前路由与 route 对象不符时，表示路由发生返回\n        if (pages.length === 1) {\n          // 如果页面栈只有一个页面，表示正处于 tabbar 页面\n          Object.assign(route, {\n            fullPath: pages[0],\n            path: `/${pages[0].split(\"/\")[3]}`,\n            query: {},\n            type: \"switchTab\"\n          });\n        } else {\n          Object.assign(route, {\n            fullPath: pages[0],\n            path: `/${pages[0].split(\"/\")[3]}`,\n            query: {},\n            type: \"push\"\n          });\n        }\n        onchange(route, old);\n      }\n    }\n  }\n});\nconst router = new Proxy({\n  route: route,\n  // 当前路由对象所在的 path 等信息,\n  afterEach: to => {},\n  // 全局后置守卫\n  beforeEach: (to, next) => next(),\n  // 全局前置守卫\n  _getFullPath(route) {\n    // 根据传进来的路由名称获取完整的路由名称\n    return new Promise((resolve, reject) => {\n      const split = route.split(\"/\");\n      const name = `/${split[split.length - 1]}`;\n      resolve(`/pages${route}${name}`);\n    });\n  },\n  _formatData(query) {\n    // 序列化路由传参\n    let queryString = \"?\";\n    Object.keys(query).forEach(e => {\n      if (typeof query[e] === \"object\") {\n        queryString += `${e}=${JSON.stringify(query[e])}&`;\n      } else {\n        queryString += `${e}=${query[e]}&`;\n      }\n    });\n    return queryString.length === 1 ? \"\" : queryString.replace(/&$/, \"\");\n  },\n  _beforeEach(path, fullPath, query, type) {\n    // 处理全局前置守卫\n    return new Promise(resolve => {\n      this.beforeEach({\n        path,\n        fullPath,\n        query,\n        type\n      }, resolve);\n    });\n  },\n  _next(next) {\n    // 处理全局前置守卫 next 函数传经来的方法\n    return new Promise((resolve, reject) => {\n      if (typeof next === \"function\") {\n        // 当 next 为函数时, 表示重定向路由,\n        reject(\"在全局前置守卫 next 中重定向路由\");\n        Promise.resolve().then(() => next(this)); // 此处一个微任务的延迟是为了先触发重定向的reject\n      } else if (next === false) {\n        // 当 next 为 false 时, 表示取消路由\n        reject(\"在全局前置守卫 next 中取消路由\");\n      } else {\n        resolve();\n      }\n    });\n  },\n  _routeTo(UNIAPI, type, path, query, notBeforeEach, notAfterEach) {\n    return new Promise((resolve, reject) => {\n      if (_$ROUTING) {\n        reject(\"路由进行中\");\n        return;\n      }\n      this._getFullPath(path).then(fullPath => {\n        // 检查路由是否存在于 pages 中\n        const routeTo = url => {\n          // 执行路由\n          const temp = _c(route); // 将 route 缓存起来\n          Object.assign(route, {\n            path,\n            fullPath,\n            query,\n            type\n          }); // 在路由开始执行前就将 query 放入 route, 防止少数情况出项的 onLoad 执行时，query 还没有合并\n          _$ROUTING = true;\n          UNIAPI({\n            url\n          }).then(([err]) => {\n            if (err) {\n              // 路由未在 pages.json 中注册\n              Object.assign(route, temp); // 如果路由跳转失败，就将 route 恢复\n              _$ROUTING = false;\n              reject(err);\n              return;\n            } else {\n              // 跳转成功, 将路由信息赋值给 route\n              resolve(route); // 将更新后的路由对象 resolve 出去\n              onchange({\n                path,\n                fullPath,\n                query,\n                type\n              }, temp);\n              !notAfterEach && this.afterEach(route); // 如果没有禁止全局后置守卫拦截时, 执行全局后置守卫拦截\n            }\n          });\n        };\n\n        if (notBeforeEach) {\n          // notBeforeEach 当不需要被全局前置守卫拦截时\n          routeTo(`${fullPath}${this._formatData(query)}`);\n        } else {\n          this._beforeEach(path, fullPath, query, type).then(next => {\n            // 执行全局前置守卫,并将参数传入\n            this._next(next).then(() => {\n              // 在全局前置守卫 next 没传参\n              routeTo(`${fullPath}${this._formatData(query)}`);\n            }).catch(e => reject(e)); // 在全局前置守卫 next 中取消或重定向路由\n          });\n        }\n      }).catch(e => reject(e)); // 路由不存在于 pages 中, reject\n    });\n  },\n\n  pop(data) {\n    if (typeof data === \"object\") {\n      _$UNI_ROUTER_PUSH_POP_FUN(data);\n    }\n    uni.navigateBack({\n      delta: typeof data === \"number\" ? data : 1\n    });\n  },\n  // path 路由名 //  query 路由传参 // isBeforeEach 是否要被全局前置守卫拦截 // isAfterEach 是否要被全局后置守卫拦截\n  push(path, query = {}, notBeforeEach, notAfterEach) {\n    return this._routeTo(uni.navigateTo, \"push\", path, query, notBeforeEach, notAfterEach);\n  },\n  pushPop(path, query = {}, notBeforeEach, notAfterEach) {\n    return new Promise(resolve => {\n      _$UNI_ROUTER_PUSH_POP_FUN(null);\n      _$UNI_ROUTER_PUSH_POP_FUN = resolve;\n      this._routeTo(uni.navigateTo, \"pushPop\", path, query, notBeforeEach, notAfterEach);\n    });\n  },\n  replace(path, query = {}, notBeforeEach, notAfterEach) {\n    return this._routeTo(uni.redirectTo, \"replace\", path, query, notBeforeEach, notAfterEach);\n  },\n  switchTab(path, query = {}, notBeforeEach, notAfterEach) {\n    return this._routeTo(uni.switchTab, \"switchTab\", path, query, notBeforeEach, notAfterEach);\n  },\n  reLaunch(path, query = {}, notBeforeEach, notAfterEach) {\n    return this._routeTo(uni.reLaunch, \"reLaunch\", path, query, notBeforeEach, notAfterEach);\n  }\n}, {\n  set(target, key, value) {\n    if (key === \"onchange\") {\n      onchange = value;\n    }\n    return Reflect.set(target, key, value);\n  }\n});\nObject.setPrototypeOf(route, router); // 让 route 继承 router\n\nexport default router;","map":{"version":3,"names":["Vue","initPath","UNI_ROUTES","pages","path","e","route","fullPath","split","type","query","_$ROUTING","onchange","_$UNI_ACTIVED_PAGE_ROUTES","_$UNI_ROUTER_PUSH_POP_FUN","_c","obj","JSON","parse","stringify","mixin","onShow","getCurrentPages","map","reverse","old","back","now","find","Object","assign","push","splice","length","router","Proxy","afterEach","to","beforeEach","next","_getFullPath","Promise","resolve","reject","name","_formatData","queryString","keys","forEach","replace","_beforeEach","_next","then","_routeTo","UNIAPI","notBeforeEach","notAfterEach","routeTo","url","temp","err","catch","pop","data","uni","navigateBack","delta","navigateTo","pushPop","redirectTo","switchTab","reLaunch","set","target","key","value","Reflect","setPrototypeOf"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-analytics-sdk/common/uni-router.js"],"sourcesContent":["import Vue from \"vue\"\n\nlet initPath\ntry {\n  initPath = UNI_ROUTES ? \"/\" + UNI_ROUTES.pages[0].path : \"\"\n} catch (e) {\n  initPath = \"\"\n}\n\nexport const route = {\n  // 当前路由对象所在的 path 等信息。默认为首页\n  fullPath: initPath,\n  path: `/${initPath.split(\"/\")[3]}`,\n  type: \"push\",\n  query: {}\n}\n\nlet _$ROUTING = false // 标记路由状态 防止连点\nlet onchange = () => {} // 路由变化监听函数\nconst _$UNI_ACTIVED_PAGE_ROUTES = [] // 页面数据缓存\nlet _$UNI_ROUTER_PUSH_POP_FUN = () => {} // pushPop resolve 函数\nconst _c = (obj) => JSON.parse(JSON.stringify(obj)) // 简易克隆方法\n\nVue.mixin({\n  onShow() {\n    _$ROUTING = false\n    const pages = getCurrentPages()\n      .map((e) => `/${e.route}`)\n      .reverse() // 获取页面栈\n\n    if (pages[0]) {\n      const old = _c(route) // 保存旧路由\n      const back = pages[0] !== route.fullPath\n      const now = _$UNI_ACTIVED_PAGE_ROUTES.find((e) => e.fullPath === pages[0]) // 如果路由没有被缓存就缓存\n      now\n        ? Object.assign(route, now)\n        : _$UNI_ACTIVED_PAGE_ROUTES.push(_c(route)) // 已缓存就用已缓存的更新 route 对象\n      _$UNI_ACTIVED_PAGE_ROUTES.splice(\n        pages.length,\n        _$UNI_ACTIVED_PAGE_ROUTES.length\n      ) // 最后清除无效缓存\n      if (back) {\n        // 当当前路由与 route 对象不符时，表示路由发生返回\n        if (pages.length === 1) {\n          // 如果页面栈只有一个页面，表示正处于 tabbar 页面\n          Object.assign(route, {\n            fullPath: pages[0],\n            path: `/${pages[0].split(\"/\")[3]}`,\n            query: {},\n            type: \"switchTab\"\n          })\n        } else {\n          Object.assign(route, {\n            fullPath: pages[0],\n            path: `/${pages[0].split(\"/\")[3]}`,\n            query: {},\n            type: \"push\"\n          })\n        }\n        onchange(route, old)\n      }\n    }\n  }\n})\n\nconst router = new Proxy(\n  {\n    route: route, // 当前路由对象所在的 path 等信息,\n    afterEach: (to) => {}, // 全局后置守卫\n    beforeEach: (to, next) => next(), // 全局前置守卫\n    _getFullPath(route) {\n      // 根据传进来的路由名称获取完整的路由名称\n      return new Promise((resolve, reject) => {\n        const split = route.split(\"/\")\n        const name = `/${split[split.length - 1]}`\n        resolve(`/pages${route}${name}`)\n      })\n    },\n    _formatData(query) {\n      // 序列化路由传参\n      let queryString = \"?\"\n      Object.keys(query).forEach((e) => {\n        if (typeof query[e] === \"object\") {\n          queryString += `${e}=${JSON.stringify(query[e])}&`\n        } else {\n          queryString += `${e}=${query[e]}&`\n        }\n      })\n      return queryString.length === 1 ? \"\" : queryString.replace(/&$/, \"\")\n    },\n    _beforeEach(path, fullPath, query, type) {\n      // 处理全局前置守卫\n      return new Promise((resolve) => {\n        this.beforeEach({ path, fullPath, query, type }, resolve)\n      })\n    },\n    _next(next) {\n      // 处理全局前置守卫 next 函数传经来的方法\n      return new Promise((resolve, reject) => {\n        if (typeof next === \"function\") {\n          // 当 next 为函数时, 表示重定向路由,\n          reject(\"在全局前置守卫 next 中重定向路由\")\n          Promise.resolve().then(() => next(this)) // 此处一个微任务的延迟是为了先触发重定向的reject\n        } else if (next === false) {\n          // 当 next 为 false 时, 表示取消路由\n          reject(\"在全局前置守卫 next 中取消路由\")\n        } else {\n          resolve()\n        }\n      })\n    },\n    _routeTo(UNIAPI, type, path, query, notBeforeEach, notAfterEach) {\n      return new Promise((resolve, reject) => {\n        if (_$ROUTING) {\n          reject(\"路由进行中\")\n          return\n        }\n        this._getFullPath(path)\n          .then((fullPath) => {\n            // 检查路由是否存在于 pages 中\n            const routeTo = (url) => {\n              // 执行路由\n              const temp = _c(route) // 将 route 缓存起来\n              Object.assign(route, { path, fullPath, query, type }) // 在路由开始执行前就将 query 放入 route, 防止少数情况出项的 onLoad 执行时，query 还没有合并\n              _$ROUTING = true\n              UNIAPI({ url }).then(([err]) => {\n                if (err) {\n                  // 路由未在 pages.json 中注册\n                  Object.assign(route, temp) // 如果路由跳转失败，就将 route 恢复\n                  _$ROUTING = false\n                  reject(err)\n                  return\n                } else {\n                  // 跳转成功, 将路由信息赋值给 route\n                  resolve(route) // 将更新后的路由对象 resolve 出去\n                  onchange({ path, fullPath, query, type }, temp)\n                  !notAfterEach && this.afterEach(route) // 如果没有禁止全局后置守卫拦截时, 执行全局后置守卫拦截\n                }\n              })\n            }\n            if (notBeforeEach) {\n              // notBeforeEach 当不需要被全局前置守卫拦截时\n              routeTo(`${fullPath}${this._formatData(query)}`)\n            } else {\n              this._beforeEach(path, fullPath, query, type).then((next) => {\n                // 执行全局前置守卫,并将参数传入\n                this._next(next)\n                  .then(() => {\n                    // 在全局前置守卫 next 没传参\n                    routeTo(`${fullPath}${this._formatData(query)}`)\n                  })\n                  .catch((e) => reject(e)) // 在全局前置守卫 next 中取消或重定向路由\n              })\n            }\n          })\n          .catch((e) => reject(e)) // 路由不存在于 pages 中, reject\n      })\n    },\n    pop(data) {\n      if (typeof data === \"object\") {\n        _$UNI_ROUTER_PUSH_POP_FUN(data)\n      }\n      uni.navigateBack({ delta: typeof data === \"number\" ? data : 1 })\n    },\n    // path 路由名 //  query 路由传参 // isBeforeEach 是否要被全局前置守卫拦截 // isAfterEach 是否要被全局后置守卫拦截\n    push(path, query = {}, notBeforeEach, notAfterEach) {\n      return this._routeTo(\n        uni.navigateTo,\n        \"push\",\n        path,\n        query,\n        notBeforeEach,\n        notAfterEach\n      )\n    },\n    pushPop(path, query = {}, notBeforeEach, notAfterEach) {\n      return new Promise((resolve) => {\n        _$UNI_ROUTER_PUSH_POP_FUN(null)\n        _$UNI_ROUTER_PUSH_POP_FUN = resolve\n        this._routeTo(\n          uni.navigateTo,\n          \"pushPop\",\n          path,\n          query,\n          notBeforeEach,\n          notAfterEach\n        )\n      })\n    },\n    replace(path, query = {}, notBeforeEach, notAfterEach) {\n      return this._routeTo(\n        uni.redirectTo,\n        \"replace\",\n        path,\n        query,\n        notBeforeEach,\n        notAfterEach\n      )\n    },\n    switchTab(path, query = {}, notBeforeEach, notAfterEach) {\n      return this._routeTo(\n        uni.switchTab,\n        \"switchTab\",\n        path,\n        query,\n        notBeforeEach,\n        notAfterEach\n      )\n    },\n    reLaunch(path, query = {}, notBeforeEach, notAfterEach) {\n      return this._routeTo(\n        uni.reLaunch,\n        \"reLaunch\",\n        path,\n        query,\n        notBeforeEach,\n        notAfterEach\n      )\n    }\n  },\n  {\n    set(target, key, value) {\n      if (key === \"onchange\") {\n        onchange = value\n      }\n      return Reflect.set(target, key, value)\n    }\n  }\n)\n\nObject.setPrototypeOf(route, router) // 让 route 继承 router\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}