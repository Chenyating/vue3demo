{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport localDialogTable from '../../DialogTable';\nimport agEditorMixins from './ag-editor-mixins';\nexport default {\n  name: 'AgInputSelect',\n  components: {\n    localDialogTable\n  },\n  mixins: [agEditorMixins],\n  props: {},\n  data() {\n    return {\n      isFocus: true,\n      tableSelectData: [],\n      allSelect: [],\n      visible: false,\n      filterVal: [{\n        value: '@{ALL}'\n      }, {\n        value: '@{CURRENTUSER}'\n      }, {\n        value: '@{CURRENTSTAFF}'\n      }, {\n        value: '@{CURRENTORG}'\n      }, {\n        value: '@{CURRENTROLE}'\n      }, {\n        value: '@{CURRENTCUSTOMER}'\n      }, {\n        value: '@{CURRENTCORP}'\n      }, {\n        value: '@{CURRENTCOST}'\n      }]\n    };\n  },\n  computed: {\n    componentProps() {\n      return Object.assign({}, {\n        placeholder: this.$t('components.pleaseEnter'),\n        title: ''\n      }, this.params?.cellEditorComponentProps || {});\n    },\n    placeholder() {\n      return this.componentProps.placeholder;\n    },\n    reqConfig() {\n      return this.componentProps.reqConfig;\n    },\n    gridOptions() {\n      return this.componentProps.gridOptions;\n    },\n    title() {\n      return this.componentProps.title;\n    },\n    search() {\n      return this.componentProps.search;\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      const {\n        autoFocus\n      } = this.componentProps;\n      if (autoFocus) {\n        this.$refs.input.focus();\n      }\n    });\n  },\n  methods: {\n    triggerChange() {\n      const {\n        cellEditorComponentProps,\n        ...restAgParams\n      } = this.params || {};\n      const {\n        change\n      } = cellEditorComponentProps || {};\n      change?.(this.agValue, {\n        agParams: restAgParams\n      });\n    },\n    triggerSelect(value) {\n      const {\n        cellEditorComponentProps,\n        ...restAgParams\n      } = this.params || {};\n      const {\n        select\n      } = cellEditorComponentProps || {};\n      select?.(value, {\n        agParams: restAgParams\n      });\n    },\n    clear() {\n      this.agValue = '';\n      this.triggerChange();\n    },\n    handleIconClick(event) {\n      this.isFocus = false;\n      event.preventDefault();\n      this.visible = true;\n    },\n    onSelectionChangedData(ref) {\n      console.log('ref', ref);\n      // 获取当前分页数据\n      const pageNo = this.$refs.table.pagination.pageNo;\n      // 当前页选中值对象\n      // const selectedNodes = ref.getSelectedNodes()\n      ref.forEachNode((node, index) => {\n        if (node.selected) {\n          this.allSelect.push(node);\n        } else {\n          this.allSelect.map((item, index_) => {\n            if (node.data.sId === item.data.sId) {\n              this.allSelect.splice(index_, 1);\n            }\n          });\n        }\n      });\n      this.allSelect = this.allSelect.length > 0 ? unique(this.allSelect) : [];\n      function unique(arr) {\n        var i;\n        var j;\n        var len = arr.length;\n        for (i = 0; i < len; i++) {\n          for (j = i + 1; j < len; j++) {\n            if (arr[i].data.sId === arr[j].data.sId) {\n              arr.splice(j, 1);\n              len--;\n              j--;\n            }\n          }\n        }\n        return arr;\n      }\n      // 取出当前分页中所选中的值\n      const selectedData = this.allSelect && this.allSelect.map(node => node.data);\n      this.tableSelectData[pageNo] = selectedData;\n      // 所有选中的值\n      this.$refs.table.selectedRightDataNodes = [].concat.apply([], selectedData);\n    },\n    afterFetch(rowData) {\n      this.complete_Data = rowData;\n      console.log(rowData);\n      this.$refs.table.gridOptions.api.forEachNode(node => {\n        const data = [].concat.apply([], this.tableSelectData);\n        data.map(item => {\n          if (item[rowData.keyField] === node.data[rowData.keyField]) {\n            node.setSelected(true);\n          }\n        });\n      });\n    },\n    handleClose(value = []) {\n      this.triggerSelect(value);\n    },\n    onSelect(option, type) {\n      if (type === 'confirm') {\n        this.agValue = {\n          option: option,\n          data: this.complete_Data\n        };\n      }\n      // this.handleClose()\n      this.allSelect = [];\n      this.arr = [];\n      this.visible = false;\n    },\n    // 失焦事件\n    blurAction(e) {\n      this.triggerBlur(e);\n    },\n    tabCell(e) {\n      this.triggerKeyup(e);\n    },\n    querySearch(queryString, cb) {\n      const filterVal = this.filterVal;\n      const results = queryString ? filterVal.filter(this.createFilter(queryString)) : filterVal;\n      // 调用 callback 返回建议列表的数据\n      cb(results);\n    },\n    createFilter(queryString) {\n      return filterVal => {\n        return filterVal.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    }\n  }\n};","map":{"version":3,"names":["localDialogTable","agEditorMixins","name","components","mixins","props","data","isFocus","tableSelectData","allSelect","visible","filterVal","value","computed","componentProps","Object","assign","placeholder","$t","title","params","cellEditorComponentProps","reqConfig","gridOptions","search","mounted","$nextTick","autoFocus","$refs","input","focus","methods","triggerChange","restAgParams","change","agValue","agParams","triggerSelect","select","clear","handleIconClick","event","preventDefault","onSelectionChangedData","ref","console","log","pageNo","table","pagination","forEachNode","node","index","selected","push","map","item","index_","sId","splice","length","unique","arr","i","j","len","selectedData","selectedRightDataNodes","concat","apply","afterFetch","rowData","complete_Data","api","keyField","setSelected","handleClose","onSelect","option","type","blurAction","e","triggerBlur","tabCell","triggerKeyup","querySearch","queryString","cb","results","filter","createFilter","toLowerCase","indexOf"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/ForGridComponents/cell-editor/AgInputSelect.vue"],"sourcesContent":["<template>\n  <div class=\"input-search\">\n    <el-autocomplete\n      ref=\"input\"\n      v-model=\"agValue\"\n      class=\"inline-input\"\n      :fetch-suggestions=\"querySearch\"\n      :trigger-on-focus=\"false\"\n      style=\"width: 100%\"\n      size=\"mini\"\n      :placeholder=\"placeholder\"\n      @focus=\"focus\"\n      @keyup.native=\"tabCell\"\n    >\n      <i\n        v-if=\"!search\"\n        slot=\"suffix\"\n        class=\"el-icon-search\"\n        @click=\"handleIconClick\"\n      />\n      <i slot=\"suffix\" class=\"el-icon-circle-close\" @click=\"clear\" />\n    </el-autocomplete>\n\n    <local-dialog-table\n      ref=\"table\"\n      :title=\"title\"\n      :append-to-body=\"true\"\n      :visible.sync=\"visible\"\n      :req-config=\"reqConfig\"\n      :column-defs=\"gridOptions.columnDefs\"\n      :show-pagination=\"true\"\n      :radio=\"false\"\n      :required=\"false\"\n      :show-search=\"true\"\n      :custom-select=\"false\"\n      @selectChange=\"onSelectionChangedData\"\n      @afterFetch=\"afterFetch\"\n      @onSelect=\"onSelect\"\n    />\n  </div>\n</template>\n\n<script>\nimport localDialogTable from '../../DialogTable'\nimport agEditorMixins from './ag-editor-mixins'\n\nexport default {\n  name: 'AgInputSelect',\n  components: { localDialogTable },\n  mixins: [agEditorMixins],\n  props: {\n  },\n  data() {\n    return {\n      isFocus: true,\n      tableSelectData: [],\n      allSelect: [],\n      visible: false,\n      filterVal: [\n        { value: '@{ALL}' },\n        { value: '@{CURRENTUSER}' },\n        { value: '@{CURRENTSTAFF}' },\n        { value: '@{CURRENTORG}' },\n        { value: '@{CURRENTROLE}' },\n        { value: '@{CURRENTCUSTOMER}' },\n        { value: '@{CURRENTCORP}' },\n        { value: '@{CURRENTCOST}' }\n      ]\n    }\n  },\n  computed: {\n    componentProps() {\n      return Object.assign(\n        {},\n        {\n          placeholder: this.$t('components.pleaseEnter'),\n          title: ''\n        },\n        this.params?.cellEditorComponentProps || {}\n      )\n    },\n    placeholder() {\n      return this.componentProps.placeholder\n    },\n    reqConfig() {\n      return this.componentProps.reqConfig\n    },\n    gridOptions() {\n      return this.componentProps.gridOptions\n    },\n    title() {\n      return this.componentProps.title\n    },\n    search() {\n      return this.componentProps.search\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      const { autoFocus } = this.componentProps\n      if (autoFocus) {\n        this.$refs.input.focus()\n      }\n    })\n  },\n  methods: {\n    triggerChange() {\n      const { cellEditorComponentProps, ...restAgParams } = this.params || {}\n\n      const { change } = cellEditorComponentProps || {}\n\n      change?.(this.agValue, { agParams: restAgParams })\n    },\n    triggerSelect(value) {\n      const { cellEditorComponentProps, ...restAgParams } = this.params || {}\n\n      const { select } = cellEditorComponentProps || {}\n\n      select?.(value, { agParams: restAgParams })\n    },\n    clear() {\n      this.agValue = ''\n      this.triggerChange()\n    },\n    handleIconClick(event) {\n      this.isFocus = false\n      event.preventDefault()\n      this.visible = true\n    },\n    onSelectionChangedData(ref) {\n      console.log('ref', ref)\n      // 获取当前分页数据\n      const pageNo = this.$refs.table.pagination.pageNo\n      // 当前页选中值对象\n      // const selectedNodes = ref.getSelectedNodes()\n      ref.forEachNode((node, index) => {\n        if (node.selected) {\n          this.allSelect.push(node)\n        } else {\n          this.allSelect.map((item, index_) => {\n            if (node.data.sId === item.data.sId) {\n              this.allSelect.splice(index_, 1)\n            }\n          })\n        }\n      })\n      this.allSelect = this.allSelect.length > 0 ? unique(this.allSelect) : []\n      function unique(arr) {\n        var i\n        var j\n        var len = arr.length\n        for (i = 0; i < len; i++) {\n          for (j = i + 1; j < len; j++) {\n            if (arr[i].data.sId === arr[j].data.sId) {\n              arr.splice(j, 1)\n              len--\n              j--\n            }\n          }\n        }\n        return arr\n      }\n      // 取出当前分页中所选中的值\n      const selectedData =\n        this.allSelect && this.allSelect.map((node) => node.data)\n      this.tableSelectData[pageNo] = selectedData\n      // 所有选中的值\n      this.$refs.table.selectedRightDataNodes = [].concat.apply(\n        [],\n        selectedData\n      )\n    },\n    afterFetch(rowData) {\n      this.complete_Data = rowData\n      console.log(rowData)\n      this.$refs.table.gridOptions.api.forEachNode((node) => {\n        const data = [].concat.apply([], this.tableSelectData)\n        data.map((item) => {\n          if (item[rowData.keyField] === node.data[rowData.keyField]) {\n            node.setSelected(true)\n          }\n        })\n      })\n    },\n    handleClose(value = []) {\n      this.triggerSelect(value)\n    },\n    onSelect(option, type) {\n      if (type === 'confirm') {\n        this.agValue = {\n          option: option,\n          data: this.complete_Data\n        }\n      }\n      // this.handleClose()\n      this.allSelect = []\n      this.arr = []\n      this.visible = false\n    },\n    // 失焦事件\n    blurAction(e) {\n      this.triggerBlur(e)\n    },\n    tabCell(e) {\n      this.triggerKeyup(e)\n    },\n    querySearch(queryString, cb) {\n      const filterVal = this.filterVal\n      const results = queryString\n        ? filterVal.filter(this.createFilter(queryString))\n        : filterVal\n      // 调用 callback 返回建议列表的数据\n      cb(results)\n    },\n    createFilter(queryString) {\n      return (filterVal) => {\n        return (\n          filterVal.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0\n        )\n      }\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.input-search {\n  .el-icon-search,\n  .el-icon-circle-close {\n    cursor: pointer;\n    margin: 0 1px;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}