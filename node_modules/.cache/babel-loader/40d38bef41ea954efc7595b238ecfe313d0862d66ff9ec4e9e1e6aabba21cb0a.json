{"ast":null,"code":"export default {\n  computed: {\n    isChecked() {\n      const {\n        childrenListKey = '_details'\n      } = this.params.context;\n      if (this.params.data._selectedKeys && this.params.data[childrenListKey]) {\n        return this.params.data._selectedKeys.length === this.params.data[childrenListKey].length && this.params.data._selected;\n      }\n      return this.params.data._selected; // false\n    },\n\n    indeterminate() {\n      const {\n        _selectedKeys\n      } = this.params.data;\n      const {\n        childrenListKey = '_details'\n      } = this.params.context;\n      if (_selectedKeys && this.params.data[childrenListKey]) {\n        return !!_selectedKeys.length && _selectedKeys.length !== this.params.data[childrenListKey].length;\n      }\n      return false;\n    }\n  },\n  mounted() {\n    const {\n      _selected,\n      _selectedKeys\n    } = this.params.data;\n    if (typeof _selected !== 'boolean') {\n      console.error('_selected配置未初始化');\n    }\n    if (typeof _selectedKeys !== 'object') {\n      console.error('_selectedKeys配置未初始化');\n    }\n  },\n  methods: {\n    async handleCheckAllChange(e) {\n      const {\n        childrenListKey = '_details',\n        childRowKey\n      } = this.params.context;\n      this.params.data._selected = e;\n      this.params.node.selected = e;\n      // 调用子表更新\n      if (!this.params.data[childrenListKey]) {\n        this.params.data[childrenListKey] = [];\n      }\n      if (e && !this.params.data[childrenListKey].length && typeof this.params.context.loadDetail === 'function') {\n        this.params.data[childrenListKey] = await this.params.context.loadDetail(this.params.data);\n      }\n      if (e && this.params.data[childrenListKey]) {\n        this.params.data._selectedKeys = this.params.data[childrenListKey].map(item => {\n          return item[childRowKey];\n        });\n      } else {\n        this.params.data._selectedKeys = [];\n      }\n      this.params.api.refreshCells({\n        force: true\n      });\n      const detailNode = this.params.node.detailNode;\n      detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.refreshCells({\n        force: true\n      });\n      if (detailNode) {\n        this.toggleSelectedClass(detailNode, e ? 'add' : 'remove');\n      }\n    },\n    toggleSelectedClass(node, operate) {\n      if (!node.detailGridInfo) return;\n      const parentEl = document.querySelector(`[row-id=\"${node.detailGridInfo.id}\"] .ag-details-row`);\n      if (!parentEl) return;\n      Array.from(parentEl.children).forEach(item => item.classList[operate](...['ag-row-focus', 'ag-row-selected']));\n    }\n  }\n};","map":{"version":3,"names":["computed","isChecked","childrenListKey","params","context","data","_selectedKeys","length","_selected","indeterminate","mounted","console","error","methods","handleCheckAllChange","e","childRowKey","node","selected","loadDetail","map","item","api","refreshCells","force","detailNode","detailGridInfo","toggleSelectedClass","operate","parentEl","document","querySelector","id","Array","from","children","forEach","classList"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/AgGridExtend/parentSelect.vue"],"sourcesContent":["<template>\n  <!-- 主子表 -->\n  <!-- 父级 行复选框 -->\n  <el-checkbox\n    :indeterminate=\"indeterminate\"\n    :checked=\"isChecked\"\n    @change=\"handleCheckAllChange\"\n  />\n</template>\n\n<script>\nexport default {\n  computed: {\n    isChecked() {\n      const { childrenListKey = '_details' } = this.params.context\n      if (this.params.data._selectedKeys && this.params.data[childrenListKey]) {\n        return (\n          this.params.data._selectedKeys.length === this.params.data[childrenListKey].length &&\n          this.params.data._selected\n        )\n      }\n      return this.params.data._selected // false\n    },\n    indeterminate() {\n      const { _selectedKeys } = this.params.data\n      const { childrenListKey = '_details' } = this.params.context\n      if (_selectedKeys && this.params.data[childrenListKey]) {\n        return (\n          !!_selectedKeys.length &&\n          _selectedKeys.length !== this.params.data[childrenListKey].length\n        )\n      }\n      return false\n    }\n  },\n  mounted() {\n    const { _selected, _selectedKeys } = this.params.data\n    if (typeof _selected !== 'boolean') {\n      console.error('_selected配置未初始化')\n    }\n    if (typeof _selectedKeys !== 'object') {\n      console.error('_selectedKeys配置未初始化')\n    }\n  },\n  methods: {\n    async handleCheckAllChange(e) {\n      const { childrenListKey = '_details', childRowKey } = this.params.context\n      this.params.data._selected = e\n      this.params.node.selected = e\n      // 调用子表更新\n      if (!this.params.data[childrenListKey]) {\n        this.params.data[childrenListKey] = []\n      }\n      if (\n        e &&\n        !this.params.data[childrenListKey].length &&\n        typeof this.params.context.loadDetail === 'function'\n      ) {\n        this.params.data[childrenListKey] =\n          await this.params.context.loadDetail(this.params.data)\n      }\n      if (e && this.params.data[childrenListKey]) {\n        this.params.data._selectedKeys = this.params.data[childrenListKey].map(\n          (item) => {\n            return item[childRowKey]\n          }\n        )\n      } else {\n        this.params.data._selectedKeys = []\n      }\n      this.params.api.refreshCells({ force: true })\n      const detailNode = this.params.node.detailNode\n      detailNode &&\n        detailNode.detailGridInfo &&\n        detailNode.detailGridInfo.api.refreshCells({ force: true })\n      if (detailNode) {\n        this.toggleSelectedClass(detailNode, e ? 'add' : 'remove')\n      }\n    },\n    toggleSelectedClass(node, operate) {\n      if (!node.detailGridInfo) return\n\n      const parentEl = document.querySelector(`[row-id=\"${node.detailGridInfo.id}\"] .ag-details-row`)\n      if (!parentEl) return\n\n      Array.from(parentEl.children).forEach(item => item.classList[operate](...['ag-row-focus', 'ag-row-selected']))\n    }\n  }\n}\n</script>\n"],"mappings":"AAWA;EACAA,QAAA;IACAC,UAAA;MACA;QAAAC,eAAA;MAAA,SAAAC,MAAA,CAAAC,OAAA;MACA,SAAAD,MAAA,CAAAE,IAAA,CAAAC,aAAA,SAAAH,MAAA,CAAAE,IAAA,CAAAH,eAAA;QACA,OACA,KAAAC,MAAA,CAAAE,IAAA,CAAAC,aAAA,CAAAC,MAAA,UAAAJ,MAAA,CAAAE,IAAA,CAAAH,eAAA,EAAAK,MAAA,IACA,KAAAJ,MAAA,CAAAE,IAAA,CAAAG,SAAA;MAEA;MACA,YAAAL,MAAA,CAAAE,IAAA,CAAAG,SAAA;IACA;;IACAC,cAAA;MACA;QAAAH;MAAA,SAAAH,MAAA,CAAAE,IAAA;MACA;QAAAH,eAAA;MAAA,SAAAC,MAAA,CAAAC,OAAA;MACA,IAAAE,aAAA,SAAAH,MAAA,CAAAE,IAAA,CAAAH,eAAA;QACA,OACA,EAAAI,aAAA,CAAAC,MAAA,IACAD,aAAA,CAAAC,MAAA,UAAAJ,MAAA,CAAAE,IAAA,CAAAH,eAAA,EAAAK,MAAA;MAEA;MACA;IACA;EACA;EACAG,QAAA;IACA;MAAAF,SAAA;MAAAF;IAAA,SAAAH,MAAA,CAAAE,IAAA;IACA,WAAAG,SAAA;MACAG,OAAA,CAAAC,KAAA;IACA;IACA,WAAAN,aAAA;MACAK,OAAA,CAAAC,KAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,qBAAAC,CAAA;MACA;QAAAb,eAAA;QAAAc;MAAA,SAAAb,MAAA,CAAAC,OAAA;MACA,KAAAD,MAAA,CAAAE,IAAA,CAAAG,SAAA,GAAAO,CAAA;MACA,KAAAZ,MAAA,CAAAc,IAAA,CAAAC,QAAA,GAAAH,CAAA;MACA;MACA,UAAAZ,MAAA,CAAAE,IAAA,CAAAH,eAAA;QACA,KAAAC,MAAA,CAAAE,IAAA,CAAAH,eAAA;MACA;MACA,IACAa,CAAA,IACA,MAAAZ,MAAA,CAAAE,IAAA,CAAAH,eAAA,EAAAK,MAAA,IACA,YAAAJ,MAAA,CAAAC,OAAA,CAAAe,UAAA,iBACA;QACA,KAAAhB,MAAA,CAAAE,IAAA,CAAAH,eAAA,IACA,WAAAC,MAAA,CAAAC,OAAA,CAAAe,UAAA,MAAAhB,MAAA,CAAAE,IAAA;MACA;MACA,IAAAU,CAAA,SAAAZ,MAAA,CAAAE,IAAA,CAAAH,eAAA;QACA,KAAAC,MAAA,CAAAE,IAAA,CAAAC,aAAA,QAAAH,MAAA,CAAAE,IAAA,CAAAH,eAAA,EAAAkB,GAAA,CACAC,IAAA;UACA,OAAAA,IAAA,CAAAL,WAAA;QACA,CACA;MACA;QACA,KAAAb,MAAA,CAAAE,IAAA,CAAAC,aAAA;MACA;MACA,KAAAH,MAAA,CAAAmB,GAAA,CAAAC,YAAA;QAAAC,KAAA;MAAA;MACA,MAAAC,UAAA,QAAAtB,MAAA,CAAAc,IAAA,CAAAQ,UAAA;MACAA,UAAA,IACAA,UAAA,CAAAC,cAAA,IACAD,UAAA,CAAAC,cAAA,CAAAJ,GAAA,CAAAC,YAAA;QAAAC,KAAA;MAAA;MACA,IAAAC,UAAA;QACA,KAAAE,mBAAA,CAAAF,UAAA,EAAAV,CAAA;MACA;IACA;IACAY,oBAAAV,IAAA,EAAAW,OAAA;MACA,KAAAX,IAAA,CAAAS,cAAA;MAEA,MAAAG,QAAA,GAAAC,QAAA,CAAAC,aAAA,aAAAd,IAAA,CAAAS,cAAA,CAAAM,EAAA;MACA,KAAAH,QAAA;MAEAI,KAAA,CAAAC,IAAA,CAAAL,QAAA,CAAAM,QAAA,EAAAC,OAAA,CAAAf,IAAA,IAAAA,IAAA,CAAAgB,SAAA,CAAAT,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}