{"ast":null,"code":"import { arrayFind } from 'element-ui/src/utils/util';\nexport default {\n  name: 'TabBar',\n  inject: ['rootTabs'],\n  props: {\n    tabs: Array\n  },\n  computed: {\n    barStyle: {\n      get() {\n        const style = {};\n        let offset = 0;\n        let tabSize = 0;\n        const sizeName = ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'width' : 'height';\n        const sizeDir = sizeName === 'width' ? 'x' : 'y';\n        const firstUpperCase = str => {\n          return str.toLowerCase().replace(/( |^)[a-z]/g, L => L.toUpperCase());\n        };\n        this.tabs.every((tab, index) => {\n          const $el = arrayFind(this.$parent.$refs.tabs || [], t => t.id.replace('tab-', '') === tab.paneName);\n          if (!$el) {\n            return false;\n          }\n          if (!tab.active) {\n            offset += $el[`client${firstUpperCase(sizeName)}`];\n            return true;\n          } else {\n            tabSize = $el[`client${firstUpperCase(sizeName)}`];\n            const tabStyles = window.getComputedStyle($el);\n            if (sizeName === 'width' && this.tabs.length > 1) {\n              tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);\n            }\n            if (sizeName === 'width') {\n              offset += parseFloat(tabStyles.paddingLeft);\n            }\n            return false;\n          }\n        });\n        const transform = `translate${firstUpperCase(sizeDir)}(${offset}px)`;\n        style[sizeName] = tabSize + 'px';\n        style.transform = transform;\n        style.msTransform = transform;\n        style.webkitTransform = transform;\n        return style;\n      }\n    }\n  }\n};","map":{"version":3,"names":["arrayFind","name","inject","props","tabs","Array","computed","barStyle","get","style","offset","tabSize","sizeName","indexOf","rootTabs","tabPosition","sizeDir","firstUpperCase","str","toLowerCase","replace","L","toUpperCase","every","tab","index","$el","$parent","$refs","t","id","paneName","active","tabStyles","window","getComputedStyle","length","parseFloat","paddingLeft","paddingRight","transform","msTransform","webkitTransform"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-tabs__active-bar\"\n    :class=\"`is-${rootTabs.tabPosition}`\"\n    :style=\"barStyle\"\n  />\n</template>\n<script>\nimport { arrayFind } from 'element-ui/src/utils/util'\nexport default {\n  name: 'TabBar',\n  inject: ['rootTabs'],\n  props: {\n    tabs: Array\n  },\n  computed: {\n    barStyle: {\n      get() {\n        const style = {}\n        let offset = 0\n        let tabSize = 0\n        const sizeName = ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'width' : 'height'\n        const sizeDir = sizeName === 'width' ? 'x' : 'y'\n        const firstUpperCase = str => {\n          return str.toLowerCase().replace(/( |^)[a-z]/g, (L) => L.toUpperCase())\n        }\n        this.tabs.every((tab, index) => {\n          const $el = arrayFind(this.$parent.$refs.tabs || [], t => t.id.replace('tab-', '') === tab.paneName)\n          if (!$el) { return false }\n\n          if (!tab.active) {\n            offset += $el[`client${firstUpperCase(sizeName)}`]\n            return true\n          } else {\n            tabSize = $el[`client${firstUpperCase(sizeName)}`]\n            const tabStyles = window.getComputedStyle($el)\n            if (sizeName === 'width' && this.tabs.length > 1) {\n              tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight)\n            }\n            if (sizeName === 'width') {\n              offset += parseFloat(tabStyles.paddingLeft)\n            }\n            return false\n          }\n        })\n\n        const transform = `translate${firstUpperCase(sizeDir)}(${offset}px)`\n        style[sizeName] = tabSize + 'px'\n        style.transform = transform\n        style.msTransform = transform\n        style.webkitTransform = transform\n\n        return style\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"AAQA,SAAAA,SAAA;AACA;EACAC,IAAA;EACAC,MAAA;EACAC,KAAA;IACAC,IAAA,EAAAC;EACA;EACAC,QAAA;IACAC,QAAA;MACAC,IAAA;QACA,MAAAC,KAAA;QACA,IAAAC,MAAA;QACA,IAAAC,OAAA;QACA,MAAAC,QAAA,qBAAAC,OAAA,MAAAC,QAAA,CAAAC,WAAA;QACA,MAAAC,OAAA,GAAAJ,QAAA;QACA,MAAAK,cAAA,GAAAC,GAAA;UACA,OAAAA,GAAA,CAAAC,WAAA,GAAAC,OAAA,gBAAAC,CAAA,IAAAA,CAAA,CAAAC,WAAA;QACA;QACA,KAAAlB,IAAA,CAAAmB,KAAA,EAAAC,GAAA,EAAAC,KAAA;UACA,MAAAC,GAAA,GAAA1B,SAAA,MAAA2B,OAAA,CAAAC,KAAA,CAAAxB,IAAA,QAAAyB,CAAA,IAAAA,CAAA,CAAAC,EAAA,CAAAV,OAAA,iBAAAI,GAAA,CAAAO,QAAA;UACA,KAAAL,GAAA;YAAA;UAAA;UAEA,KAAAF,GAAA,CAAAQ,MAAA;YACAtB,MAAA,IAAAgB,GAAA,UAAAT,cAAA,CAAAL,QAAA;YACA;UACA;YACAD,OAAA,GAAAe,GAAA,UAAAT,cAAA,CAAAL,QAAA;YACA,MAAAqB,SAAA,GAAAC,MAAA,CAAAC,gBAAA,CAAAT,GAAA;YACA,IAAAd,QAAA,qBAAAR,IAAA,CAAAgC,MAAA;cACAzB,OAAA,IAAA0B,UAAA,CAAAJ,SAAA,CAAAK,WAAA,IAAAD,UAAA,CAAAJ,SAAA,CAAAM,YAAA;YACA;YACA,IAAA3B,QAAA;cACAF,MAAA,IAAA2B,UAAA,CAAAJ,SAAA,CAAAK,WAAA;YACA;YACA;UACA;QACA;QAEA,MAAAE,SAAA,eAAAvB,cAAA,CAAAD,OAAA,KAAAN,MAAA;QACAD,KAAA,CAAAG,QAAA,IAAAD,OAAA;QACAF,KAAA,CAAA+B,SAAA,GAAAA,SAAA;QACA/B,KAAA,CAAAgC,WAAA,GAAAD,SAAA;QACA/B,KAAA,CAAAiC,eAAA,GAAAF,SAAA;QAEA,OAAA/B,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}