{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _ from \"lodash\";\nimport $router from \"../common/uni-router\";\nimport { Volcengine } from \"../common\";\nimport { checkIsIOS } from \"../common/utils/env\";\nexport default class WebVolcengine extends Volcengine {\n  constructor(params) {\n    if (!params) {\n      params = {};\n    }\n    params.type = 1;\n    // 表示是web 端的SDK\n    super(params);\n    this.routerObject = null;\n    // web的vue-router 对象，默认为空\n    this.isCustomPageviewOpen = false;\n    // 是否触发了PC端 custom_pageview_open 乾坤框架下，只能采取这样的方式上报 custom_pageview_open\n    this.customPageviewOpenParam = null;\n    // PC端 custom_pageview_open 事件携带的参数\n    this.afterEachRouter = null;\n    this.isPC = false;\n    try {\n      // H5\n      this.routerInfo = UNI_ROUTES.pages;\n      this.tarBar = UNI_ROUTES.tarBar ? UNI_ROUTES.tarBar.list : [];\n      const pages = this.getCurrentPagesArr();\n      this.changeCurrentPage(pages);\n    } catch (e) {\n      // pc执行\n      this.routerInfo = [];\n      this.tarBar = [];\n      if (params.routerObject) {\n        const routerObject = params.routerObject;\n        const currentRouterObject = routerObject.history.current;\n        this.handelRouterObject(currentRouterObject);\n        this.routerObject = routerObject;\n      }\n      this.isPC = true;\n    }\n  }\n  start() {\n    this.init(this.routerInfo, this.tarBar);\n    if (!this.isSuccessInit) {\n      this.reportException(\"start\");\n    }\n  }\n\n  /**\n   * 初始化滚动上报的相关参数\n   */\n  initScroll() {\n    try {\n      // y轴滚动条是否开始滚动\n      this.scrollStart = false;\n      const scrollEventCache = this.getScrollEventCache();\n      let scrollParam;\n      if (_.isEmpty(scrollEventCache) || !scrollEventCache.isInited) {\n        scrollParam = {\n          scrollTime: new Date().getTime(),\n          scrollTop: 0,\n          anchorList: [],\n          isInited: true\n        };\n      }\n      const param = {\n        ...scrollEventCache,\n        ...scrollParam\n      };\n      this.scrollTimeClear = null; // 滚动事件的定时器\n      this.setScrollEventCache(param);\n    } catch (e) {\n      this.reportException(\"initScroll\");\n    }\n  }\n\n  /**\n   * 监听路由的变化\n   * @param {*} param 开发者自定义上报的参数\n   * @returns\n   */\n  listenRouter(param) {\n    try {\n      if (this.isPC) {\n        if (!this.routerObject) {\n          return;\n        }\n        this.routerObject.afterEach((to, from) => {\n          if (this.isCustomPageviewOpen) {\n            this.setCacheOldRouterTitle(document.title);\n            this.afterGetWebPath(to);\n            // 处理 custom_pageview_open 事件\n          }\n\n          const scrollEventCache = this.getScrollEventCache();\n          if (!_.isEmpty(scrollEventCache) && scrollEventCache.isInited) {\n            const that = this;\n            setTimeout(() => {\n              that.reportScrollEvent();\n              scrollEventCache.scrollTime = new Date().getTime();\n              scrollEventCache.initAnchor = {};\n              that.setScrollEventCache(scrollEventCache);\n              that.scrollStart = false;\n              that.setAnchorList();\n            }, 1000);\n          }\n          const routerInfo = {\n            path: to.path,\n            meta: to.meta,\n            query: to.query,\n            params: to.params\n          };\n          this.setCurrentRouterInfo(routerInfo);\n          this.reportPageView(param, from, to);\n          this.setCacheOldRouterTitle(document.title);\n        });\n      } else {\n        const isEmptyObject = !_.isObject(param);\n        if (isEmptyObject) {\n          param = {};\n        }\n        $router.onchange = (now, old) => {\n          this.reportPageView(param, old, now);\n        };\n      }\n      // 监听页面隐藏事件 页面关闭的时候同样也会触发\n      this.listenVisibilityChange(param);\n    } catch (e) {\n      this.reportException(\"listenRouter\");\n    }\n  }\n\n  /**\n   * 监听滚动的变化\n   * @param {*} param 开发者自定义上报的参数\n   */\n  listenScroll(param) {\n    try {\n      const isValid = this.checkScrollInitParams(param);\n      if (!isValid) {\n        return;\n      }\n      this.initScroll();\n      document.body.onscroll = () => {\n        // 监听浏览器滚动事件( onscroll )\n        // 事件触发的时候获取当前的scrollTop( this.scrollTop )，执行onScrollEnd函数(延迟500 )\n        // 在执行onScrollEnd函数的时候再获取当前的scrollTop( nowScrollTop )\n        // 拿当前的scrollTop与延时500毫秒之前的scrollTop进行比较，看是否相等，相等的话说明滚动条停止了滚动\n        if (!this.scrollStart) {\n          this.handleFirstSrcoll(); // 滚动开始之前调用方法\n          const extraParams = param.extraParams ? param.extraParams : {};\n          this.reportScrollEvent(extraParams);\n          const scrollCache = this.getScrollEventCache();\n          scrollCache.scrollTime = 0; // 上报完成之后重置时间，下次记录的时间为：滚动结束之后\n          scrollCache.anchorList = []; // 上报完成之后重置经过的锚点 下次记录的时间为：滚动结束之后\n          this.setScrollEventCache(scrollCache);\n        }\n        if (this.scrollTimeClear) {\n          clearTimeout(this.scrollTimeClear);\n        }\n        const scrollEventCache = this.getScrollEventCache();\n        scrollEventCache.scrollTop = document.documentElement.scrollTop;\n        this.setScrollEventCache(scrollEventCache);\n        this.scrollTimeClear = setTimeout(() => {\n          this.onScrollEnd();\n        }, 500);\n      };\n    } catch (e) {\n      this.reportException(\"listenScroll\");\n    }\n  }\n\n  /**\n   *\n   * @param {*} param 自定义参数\n   * @param {*} olderRouter 之前的旧路由\n   * @param {*} nowRouter 当前路由\n   * @returns\n   */\n  reportPageView(param, olderRouter, nowRouter) {\n    try {\n      const lastVisitUrl = this.getCacheVisitUrl();\n      let nowPath = nowRouter.fullPath;\n      let oldPath = olderRouter.fullPath;\n      if (this.routerObject) {\n        nowPath = nowRouter.path;\n        oldPath = olderRouter.path;\n      }\n      if (lastVisitUrl === nowPath) {\n        return;\n      }\n      if (!this.volcengineProps[oldPath]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const finalParam = this.getEventParam(param, oldPath, true, olderRouter);\n      window.collectEvent(\"custom_pageview\", finalParam);\n      this.setCacheVisitUrl(nowPath);\n      this.setCacheVisitWebUrl(window.location.href);\n    } catch (e) {\n      this.reportException(\"reportPageView\");\n    }\n  }\n\n  /**\n   * 监听用户进入页面的事件\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewOpen(param) {\n    if (this.routerObject) {\n      this.customPageviewOpenParam = param;\n      this.isCustomPageviewOpen = true;\n      return;\n    }\n    if (!_.isObject(param)) {\n      param = {};\n    }\n    try {\n      const currentUrl = this.getCurrentUrl(); // 获取当前的页面路径\n      const nowTime = new Date().getTime();\n      this.setCacheTime(nowTime); // 重新记录页面停留时间\n      this.setCacheVisitUrl(currentUrl);\n      this.setCacheVisitWebUrl(window.location.href);\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const finalParam = this.getEventParam(param, currentUrl, false, {});\n      window.collectEvent(\"custom_pageview_open\", finalParam);\n    } catch (e) {\n      this.reportException(\"customPageviewOpen\");\n    }\n  }\n\n  /**\n   * 监听H5用户隐藏页面的事件 (PC端通过对 visibilityChange 事件的监听来实现)\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewHide(param) {\n    if (this.routerObject) {\n      return;\n    }\n    if (!_.isObject(param)) {\n      param = {};\n    }\n    // 安卓的webview返回App 通过onHide 生命周期触发\n    // 如果是iOS的webview 则不触发,iOS的webview 是通过 uni-app sdk 的 handleWebviewOnHide 触发\n    try {\n      const isIOS = checkIsIOS(); // iOS终端\n      if (plus && isIOS) {\n        return;\n      }\n    } catch (e) {}\n    try {\n      const pages = this.getCurrentPagesArr();\n      this.changeCurrentPage(pages);\n      const currentUrl = this.getCurrentUrl();\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar);\n      }\n      const commonAttr = this.getEventParam(param, currentUrl, false, {});\n      window.collectEvent(\"custom_pageview_hide\", commonAttr);\n      // 上报当前页面的停留时间，然后onShow的时候会重新改写当前页面访问时间\n      this.setCacheVisitUrl(currentUrl);\n      this.setCacheVisitWebUrl(window.location.href);\n      const pageviewParam = this.getEventParam(param, currentUrl, true, {});\n      window.collectEvent(\"custom_pageview\", pageviewParam);\n    } catch (e) {\n      this.reportException(\"customPageviewHide\");\n    }\n  }\n  afterGetWebPath(router) {\n    try {\n      const nowTime = new Date().getTime();\n      this.setCacheTime(nowTime); // 重新记录页面停留时间\n      this.setCacheVisitUrl(router.path);\n      this.setCacheVisitWebUrl(window.location.href);\n      const currentUrl = router.path;\n      const commonAttr = this.getEventParam(this.customPageviewOpenParam, currentUrl, false, router);\n      window.collectEvent(\"custom_pageview_open\", commonAttr);\n      this.customPageviewOpenParam = null;\n      this.isCustomPageviewOpen = false;\n      const routerInfo = {\n        path: router.path,\n        meta: router.meta,\n        query: router.query,\n        params: router.params\n      };\n      this.setCurrentRouterInfo(routerInfo);\n      const scrollEventCache = this.getScrollEventCache();\n      if (!_.isEmpty(scrollEventCache)) {\n        const that = this;\n        setTimeout(function () {\n          that.recordScrollParam();\n        }, 1000);\n      }\n    } catch (e) {\n      this.reportException(\"afterGetWebPath\");\n    }\n  }\n  afterReportEvent(reportEventName, reportEventParam) {\n    try {\n      const router = this.getCurrentRouterInfo();\n      const meta = router.meta;\n      const title = meta ? meta.pageName || document.title : document.title;\n      const commonAttr = this.getEventParam(reportEventParam, router.path, false, router);\n      commonAttr[\"custom_page_url\"] = window.location.href;\n      commonAttr[\"custom_page_url_path\"] = router.path;\n      if (!reportEventParam[\"custom_page_title\"]) {\n        commonAttr[\"custom_page_title\"] = reportEventName === \"sidebar_item_click\" ? this.getCacheOldRouterTitle() : title;\n      }\n      window.collectEvent(reportEventName, commonAttr);\n    } catch (e) {\n      this.reportException(\"afterReportEvent\");\n    }\n  }\n\n  // 设置用户Id\n\n  setUserUniqueId(paramUserUniqueId) {\n    try {\n      const userUniqueId = paramUserUniqueId || this.nullProp;\n      window.collectEvent(\"config\", {\n        user_unique_id: userUniqueId\n      });\n    } catch (e) {\n      this.reportException(\"setUserUniqueId\");\n    }\n  }\n  collectApi(param) {\n    const that = this;\n    setTimeout(() => {\n      that.collectApiTask(param);\n    }, 500);\n  }\n  // 接口请求上报\n  collectApiTask(param) {\n    try {\n      const routeInfo = this.getCurrentRouterInfo();\n      const meta = routeInfo.meta;\n      const title = meta ? meta.pageName || document.title : document.title;\n      const currentUrl = this.getCurrentUrl();\n      this.setCacheVisitUrl(currentUrl);\n      const apiRequestParam = {\n        api_name: param.apiName,\n        is_success: param.isSuccess,\n        api_time_cost: param.apiTimeCost,\n        custom_page_title: title,\n        custom_page_url: window.location.href\n      };\n      const commonAttr = this.getEventParam(apiRequestParam, currentUrl, false, routeInfo);\n      delete param.apiName;\n      delete param.isSuccess;\n      delete param.apiTimeCost;\n      const finalParam = {\n        ...commonAttr,\n        ...param\n      };\n      window.collectEvent(\"api_request\", finalParam);\n    } catch (e) {\n      this.reportException(\"collectApiTask\");\n    }\n  }\n  reportEvent(name, param) {\n    if (this.routerObject) {\n      this.afterReportEvent(name, param);\n      return;\n    }\n    try {\n      const currentUrl = this.getCurrentUrl();\n      this.setCacheVisitUrl(currentUrl);\n      const finalParam = this.getEventParam(param, currentUrl, false, {});\n      window.collectEvent(name, finalParam);\n    } catch (e) {\n      this.reportException(\"reportEvent\");\n    }\n  }\n\n  /**\n   * 上报用户属性\n   * @param {*} profileParam 用户属性组成的对象\n   */\n  profileSet(profileParam) {\n    try {\n      window.collectEvent(\"profileSet\", profileParam);\n    } catch (e) {\n      this.reportException(\"profileSet\");\n    }\n  }\n  sdkVersionProfileSet(param) {\n    try {\n      const sdkVersion = this.getSdkVersion();\n      const finalParam = {\n        ...param,\n        ...sdkVersion\n      };\n      this.profileSet(finalParam);\n    } catch (e) {\n      this.reportException(\"sdkVersionProfileSet\");\n    }\n  }\n  appVersionProfileSet(param) {\n    try {\n      const appVersion = this.getAppVersion();\n      const finalParam = {\n        ...param,\n        ...appVersion\n      };\n      this.profileSet(finalParam);\n    } catch (e) {\n      this.reportException(\"appVersionProfileSet\");\n    }\n  }\n  handelRouterObject(routerObject) {\n    try {\n      const route = routerObject.path;\n      const meta = routerObject.meta;\n      const path = route.substring(1, route.length);\n      this.routerInfo = [{\n        path,\n        meta\n      }];\n      this.changeCurrentPage([route]);\n    } catch (e) {\n      this.reportException(\"handelRouterObject\");\n    }\n  }\n  /**\n   * 滚动结束的时候触发\n   */\n  onScrollEnd() {\n    try {\n      const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      const scrollEventCache = this.getScrollEventCache();\n      const isScrollEnd = nowScrollTop === scrollEventCache.scrollTop;\n      // 是否滚动结束了\n      if (isScrollEnd) {\n        this.recordScrollParam();\n      }\n    } catch (e) {\n      this.reportException(\"onScrollEnd\");\n    }\n  }\n  listenVisibilityChange(param) {\n    const that = this;\n    try {\n      window.addEventListener(\"visibilitychange\", event => {\n        const isHidden = document.visibilityState === \"hidden\";\n        if (that.routerObject) {\n          if (isHidden) {\n            const router = that.getCurrentRouterInfo();\n            that.handlePageViewCloseByWeb(router, param);\n            that.handlePageViewHideByWeb(router, param);\n            that.handleReportScrollEvent();\n          } else {\n            const nowTime = new Date().getTime();\n            this.setCacheTime(nowTime);\n            // 重置滚动条停留时间\n            this.resetScrollDurationTime(nowTime);\n          }\n        }\n      });\n    } catch (e) {\n      this.reportException(\"listenVisibilityChange\");\n    }\n  }\n\n  // 上报滚动条页面停留事件\n  handleReportScrollEvent() {\n    try {\n      const scrollEventCache = this.getScrollEventCache();\n      if (!_.isEmpty(scrollEventCache)) {\n        this.reportScrollEvent();\n        this.scrollStart = false;\n        // 滚动没有开始，只是隐藏的时候上报停留事件\n      }\n    } catch (e) {\n      this.reportException(\"handleReportScrollEvent\");\n    }\n  }\n\n  // 重置滚动条的开始停留时间\n  resetScrollDurationTime(nowTime) {\n    try {\n      const scrollEventCache = this.getScrollEventCache();\n      if (!_.isEmpty(scrollEventCache)) {\n        scrollEventCache.scrollTime = nowTime;\n        this.setScrollEventCache(scrollEventCache);\n      }\n    } catch (e) {\n      this.reportException(\"resetScrollDurationTime\");\n    }\n  }\n  handlePageViewCloseByWeb(router, param) {\n    try {\n      this.setCacheVisitUrl(router.path);\n      this.setCacheVisitWebUrl(window.location.href);\n      const commonAttr = this.getEventParam(param, router.path, true, router);\n      window.collectEvent(\"custom_pageview\", commonAttr);\n    } catch (e) {\n      this.reportException(\"handlePageViewCloseByWeb\");\n    }\n  }\n  handlePageViewHideByWeb(router, param) {\n    try {\n      const pageviewHideParam = this.getEventParam(param, router.path, false, router);\n      window.collectEvent(\"custom_pageview_hide\", pageviewHideParam);\n    } catch (e) {\n      this.reportException(\"handlePageViewHideByWeb\");\n    }\n  }\n  recordScrollParam() {\n    try {\n      this.scrollStart = false; // 此次滚动属于结束状态\n      const scrollEventCache = this.getScrollEventCache();\n      scrollEventCache.scrollTime = new Date().getTime();\n      this.setScrollEventCache(scrollEventCache);\n      this.setAnchorList();\n    } catch (e) {\n      this.reportException(\"recordScrollParam\");\n    }\n  }\n  setAnchorList() {\n    try {\n      const scrollEventCache = this.getScrollEventCache();\n      const initAnchor = scrollEventCache.initAnchor || {};\n      const isInitRecord = !initAnchor || _.isEmpty(initAnchor);\n      const initAnchorListData = {};\n      const clientHeight = document.documentElement.clientHeight;\n      // 浏览器可视区域高度\n      const clientWidth = document.documentElement.clientWidth;\n      // 浏览器可视区域宽度\n      const nowScrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      const anchorWrapper = this.getElement(scrollEventCache.anchorWrapper);\n      const anchorList = anchorWrapper.querySelectorAll(\"[id]\");\n      scrollEventCache.anchorList = [];\n      anchorList.forEach(item => {\n        // 获取元素相对于视口的位置\n        const rect = item.getBoundingClientRect();\n        if (isInitRecord) {\n          initAnchorListData[item.getAttribute(\"id\")] = {\n            top: rect.top,\n            bottom: rect.bottom\n          };\n        }\n        const targetItem = isInitRecord ? rect : initAnchor[item.getAttribute(\"id\")];\n        if (targetItem) {\n          // 是否满足上报条件\n          const reportCondition = rect.top < clientHeight && rect.bottom > 1 && rect.left < clientWidth && rect.right > 0;\n          const distanceCondition = Math.abs(nowScrollTop - targetItem.top) <= scrollEventCache.scrollDistance || Math.abs(nowScrollTop - targetItem.bottom) <= scrollEventCache.scrollDistance;\n          if (reportCondition && distanceCondition) {\n            // 滚动到两个锚点之间，超过这个距离就上报\n            scrollEventCache.anchorList.push(item.getAttribute(\"id\"));\n          }\n        }\n      });\n      if (isInitRecord) {\n        scrollEventCache.initAnchor = initAnchorListData;\n      }\n      this.setScrollEventCache(scrollEventCache);\n    } catch (e) {\n      this.reportException(\"setAnchorList\");\n    }\n  }\n  reportScrollEvent(param) {\n    try {\n      this.scrollStart = true;\n      const scrollEventCache = this.getScrollEventCache();\n      const duration = new Date().getTime() - scrollEventCache.scrollTime;\n      if (duration > scrollEventCache.scrollThreshold * 1000) {\n        const scrollParam = this.getScrollParam(duration, param);\n        window.collectEvent(\"scroll\", scrollParam);\n      }\n    } catch (e) {\n      this.reportException(\"reportScrollEvent\");\n    }\n  }\n  getCurrentUrl() {\n    try {\n      if (this.routerObject) {\n        const routeInfo = this.getCurrentRouterInfo();\n        let path = routeInfo.path;\n        if (!routeInfo.path) {\n          path = this.getNowPath(routeInfo);\n        }\n        return path;\n      }\n      const pages = this.getCurrentPagesArr();\n      this.changeCurrentPage(pages);\n      let currentUrl = this.getCacheVisitUrl();\n      if (this.pages.length > 0) {\n        currentUrl = this.pages[0];\n      } else {\n        //  如果currentPage 为空数组，那就去循环路由数组，是否部分路由是包含于完整路由的\n        const routerArr = this.routerInfo;\n        const nowFullPath = window.location.href;\n        routerArr.forEach(item => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path;\n          }\n        });\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + this.routerInfo[0].path;\n      }\n      return currentUrl;\n    } catch (e) {\n      this.reportException(\"getCurrentUrl\");\n      return \"\";\n    }\n  }\n\n  /**\n   * 获取上报y轴滚动的参数\n   */\n  getScrollParam(duration, extraParams) {\n    try {\n      const scrollEventCache = this.getScrollEventCache();\n      const anchorList = scrollEventCache.anchorList;\n      const anchorName = [];\n      if (anchorList && anchorList.length) {\n        anchorList.map(item => {\n          const dom = document.getElementById(item);\n          if (dom) {\n            anchorName.push(dom.innerText);\n          }\n        });\n      }\n      const scrollParam = {\n        custom_page_duration: duration,\n        // 停留时长\n        scrollTop: scrollEventCache.scrollTop,\n        // y轴坐标\n        anchorName: anchorName,\n        // 经过的锚点\n        ...extraParams\n      };\n      const router = this.getCurrentRouterInfo();\n      const commonParam = this.getEventParam(scrollParam, router.path, false, router);\n      return commonParam;\n    } catch (e) {\n      this.reportException(\"getScrollParam\");\n      return {};\n    }\n  }\n\n  /**\n   * 获取所有事件需要上报的参数\n   * @param {*} param 用户自定义参数\n   * @param {*} path 页面路径\n   * @param {*} isPageview 是否是要上报custom_pageview 事件\n   * @param {*} router 页面路由 仅限PC 端\n   * @returns\n   */\n  getEventParam(param, path, isPageview, router) {\n    try {\n      const commonAttr = this.getCommonAttr(path);\n      let durationParam = {};\n      if (isPageview) {\n        const lastPageVisitTime = this.getCacheTime();\n        const nowTime = new Date().getTime();\n        durationParam = {\n          custom_page_duration: nowTime - lastPageVisitTime\n        };\n        this.setCacheTime(nowTime);\n      }\n      if (router && router.meta) {\n        commonAttr[\"custom_page_title\"] = router.meta.pageName;\n        commonAttr[\"sub_app_name\"] = router.meta.subAppName || this.nullProp;\n      }\n      commonAttr[\"custom_page_url\"] = this.getCacheVisitWebUrl();\n      if (!commonAttr[\"custom_page_title\"]) {\n        const htmlTitle = this.getCacheOldRouterTitle();\n        commonAttr[\"custom_page_title\"] = htmlTitle;\n      }\n      if (!commonAttr[\"custom_page_url_path\"]) {\n        commonAttr[\"custom_page_url_path\"] = path;\n      }\n      const versionInfo = this.getVersionInfo();\n      const webRouterMeta = {};\n      if (this.routerObject) {\n        const webRouterMetaKeys = Object.keys(router.meta);\n        webRouterMetaKeys.forEach(item => {\n          const volcengineFinalKey = item.replace(/[A-Z]/g, key => `_${key.toLowerCase()}`);\n          webRouterMeta[volcengineFinalKey] = router.meta[item];\n        });\n      }\n      const oldFullUrlPath = this.getCacheVisitWebUrl();\n      const sourceObject = this.getFromQueryNameContent(oldFullUrlPath);\n      const eventParams = {\n        ...commonAttr,\n        ...durationParam,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta,\n        ...param\n      };\n      const currentPath = this.getCurrentUrl();\n      const plusCommonAttr = this.getCommonAttr(currentPath);\n      plusCommonAttr[\"custom_page_url\"] = window.location.href;\n      let plusCacheParam = {\n        ...plusCommonAttr,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta\n      };\n      if (isPageview) {\n        plusCacheParam = {\n          ...plusCacheParam,\n          ...param\n        };\n      }\n      this.setWebviewCache(plusCacheParam);\n      return eventParams;\n    } catch (e) {\n      this.reportException(\"getEventParam\");\n      return {};\n    }\n  }\n\n  /**\n   * 判断监听滚动的初始化参数是否符合要求\n   * @param {*} initParam  初始化参数\n   * @returns bool\n   */\n  checkScrollInitParams(initParam) {\n    try {\n      let isValid = true;\n      if (!this.isPC) {\n        isValid = false;\n        console.warn(\"监听滚动失败，非PC端\");\n      }\n      const anchorWrapper = this.getElement(initParam.anchorWrapper);\n      if (!anchorWrapper) {\n        isValid = false;\n        console.warn(\"监听滚动失败，非HTMLElement\");\n      }\n      const orginThreshold = initParam.threshold || 0;\n      const threshold = typeof orginThreshold === \"string\" ? parseFloat(orginThreshold) : orginThreshold;\n      if (!_.isFinite(threshold)) {\n        isValid = false;\n        console.warn(\"监听滚动失败，秒数参数非Number类型\");\n      }\n      const originDistance = initParam.distance || 400;\n      const scrollDistance = typeof originDistance === \"string\" ? parseFloat(originDistance) : originDistance;\n      if (!_.isFinite(scrollDistance)) {\n        isValid = false;\n        console.warn(\"监听滚动失败，滚动阈值参数非Number类型\");\n      }\n      const extraParams = initParam.extraParams || {};\n      if (!_.isObject(extraParams)) {\n        isValid = false;\n        console.warn(\"监听滚动失败，额外参数非Object类型\");\n      }\n      if (isValid) {\n        const scrollEventCache = this.getScrollEventCache();\n        scrollEventCache.scrollDistance = scrollDistance;\n        scrollEventCache.anchorWrapper = initParam.anchorWrapper;\n        scrollEventCache.scrollThreshold = threshold;\n        this.setScrollEventCache(scrollEventCache);\n      }\n      return isValid;\n    } catch (e) {\n      this.reportException(\"checkScrollInitParams\");\n      return false;\n    }\n  }\n  /**\n   * 获取dom 元素\n   * @param {*} el dom 元素 或 css 选择器\n   * @returns dom 元素\n   */\n  getElement(el) {\n    if (el === \"\") {\n      return document.body; // 如果什么都不传的话，就是默认为body\n    }\n\n    const element = typeof el === \"string\" ? document.querySelector(el) : el;\n    return _.isElement(element) ? element : false;\n  }\n  handleFirstSrcoll() {\n    try {\n      const scrollEventCache = this.getScrollEventCache();\n      if (!scrollEventCache.initAnchor || _.isEmpty(scrollEventCache.initAnchor)) {\n        this.recordScrollParam();\n      }\n    } catch (e) {\n      this.reportException(\"handleFirstSrcoll\");\n    }\n  }\n  /**\n   * 上报异常事件\n   * @param {*} method_name 异常API的名称\n   */\n  reportException(exception_method_name) {\n    try {\n      const reportInfo = {\n        exception_method_name,\n        exception_type: \"analytics_sdk\",\n        exception_platform: \"web\"\n      };\n      window.collectEvent(this.exceptionThrowEventName, reportInfo);\n    } catch (e) {}\n  }\n}","map":{"version":3,"names":["_","$router","Volcengine","checkIsIOS","WebVolcengine","constructor","params","type","routerObject","isCustomPageviewOpen","customPageviewOpenParam","afterEachRouter","isPC","routerInfo","UNI_ROUTES","pages","tarBar","list","getCurrentPagesArr","changeCurrentPage","e","currentRouterObject","history","current","handelRouterObject","start","init","isSuccessInit","reportException","initScroll","scrollStart","scrollEventCache","getScrollEventCache","scrollParam","isEmpty","isInited","scrollTime","Date","getTime","scrollTop","anchorList","param","scrollTimeClear","setScrollEventCache","listenRouter","afterEach","to","from","setCacheOldRouterTitle","document","title","afterGetWebPath","that","setTimeout","reportScrollEvent","initAnchor","setAnchorList","path","meta","query","setCurrentRouterInfo","reportPageView","isEmptyObject","isObject","onchange","now","old","listenVisibilityChange","listenScroll","isValid","checkScrollInitParams","body","onscroll","handleFirstSrcoll","extraParams","scrollCache","clearTimeout","documentElement","onScrollEnd","olderRouter","nowRouter","lastVisitUrl","getCacheVisitUrl","nowPath","fullPath","oldPath","volcengineProps","updateRouter","finalParam","getEventParam","window","collectEvent","setCacheVisitUrl","setCacheVisitWebUrl","location","href","customPageviewOpen","currentUrl","getCurrentUrl","nowTime","setCacheTime","customPageviewHide","isIOS","plus","commonAttr","pageviewParam","router","recordScrollParam","afterReportEvent","reportEventName","reportEventParam","getCurrentRouterInfo","pageName","getCacheOldRouterTitle","setUserUniqueId","paramUserUniqueId","userUniqueId","nullProp","user_unique_id","collectApi","collectApiTask","routeInfo","apiRequestParam","api_name","apiName","is_success","isSuccess","api_time_cost","apiTimeCost","custom_page_title","custom_page_url","reportEvent","name","profileSet","profileParam","sdkVersionProfileSet","sdkVersion","getSdkVersion","appVersionProfileSet","appVersion","getAppVersion","route","substring","length","nowScrollTop","isScrollEnd","addEventListener","event","isHidden","visibilityState","handlePageViewCloseByWeb","handlePageViewHideByWeb","handleReportScrollEvent","resetScrollDurationTime","pageviewHideParam","isInitRecord","initAnchorListData","clientHeight","clientWidth","anchorWrapper","getElement","querySelectorAll","forEach","item","rect","getBoundingClientRect","getAttribute","top","bottom","targetItem","reportCondition","left","right","distanceCondition","Math","abs","scrollDistance","push","duration","scrollThreshold","getScrollParam","getNowPath","routerArr","nowFullPath","indexOf","anchorName","map","dom","getElementById","innerText","custom_page_duration","commonParam","isPageview","getCommonAttr","durationParam","lastPageVisitTime","getCacheTime","subAppName","getCacheVisitWebUrl","htmlTitle","versionInfo","getVersionInfo","webRouterMeta","webRouterMetaKeys","Object","keys","volcengineFinalKey","replace","key","toLowerCase","oldFullUrlPath","sourceObject","getFromQueryNameContent","eventParams","currentPath","plusCommonAttr","plusCacheParam","setWebviewCache","initParam","console","warn","orginThreshold","threshold","parseFloat","isFinite","originDistance","distance","el","element","querySelector","isElement","exception_method_name","reportInfo","exception_type","exception_platform","exceptionThrowEventName"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-analytics-sdk/web/index.js"],"sourcesContent":["import _ from \"lodash\"\nimport $router from \"../common/uni-router\"\nimport { Volcengine } from \"../common\"\nimport { checkIsIOS } from \"../common/utils/env\"\nexport default class WebVolcengine extends Volcengine {\n  constructor(params) {\n    if (!params) {\n      params = {}\n    }\n    params.type = 1\n    // 表示是web 端的SDK\n    super(params)\n    this.routerObject = null\n    // web的vue-router 对象，默认为空\n    this.isCustomPageviewOpen = false\n    // 是否触发了PC端 custom_pageview_open 乾坤框架下，只能采取这样的方式上报 custom_pageview_open\n    this.customPageviewOpenParam = null\n    // PC端 custom_pageview_open 事件携带的参数\n    this.afterEachRouter = null\n    this.isPC = false\n\n    try {\n      // H5\n      this.routerInfo = UNI_ROUTES.pages\n      this.tarBar = UNI_ROUTES.tarBar ? UNI_ROUTES.tarBar.list : []\n      const pages = this.getCurrentPagesArr()\n      this.changeCurrentPage(pages)\n    } catch (e) {\n      // pc执行\n      this.routerInfo = []\n      this.tarBar = []\n      if (params.routerObject) {\n        const routerObject = params.routerObject\n        const currentRouterObject = routerObject.history.current\n        this.handelRouterObject(currentRouterObject)\n        this.routerObject = routerObject\n      }\n      this.isPC = true\n    }\n  }\n\n  start() {\n    this.init(this.routerInfo, this.tarBar)\n    if (!this.isSuccessInit) {\n      this.reportException(\"start\")\n    }\n  }\n\n  /**\n   * 初始化滚动上报的相关参数\n   */\n  initScroll() {\n    try {\n      // y轴滚动条是否开始滚动\n      this.scrollStart = false\n      const scrollEventCache = this.getScrollEventCache()\n      let scrollParam\n      if (_.isEmpty(scrollEventCache) || !scrollEventCache.isInited) {\n        scrollParam = {\n          scrollTime: new Date().getTime(),\n          scrollTop: 0,\n          anchorList: [],\n          isInited: true\n        }\n      }\n      const param = {\n        ...scrollEventCache,\n        ...scrollParam\n      }\n      this.scrollTimeClear = null // 滚动事件的定时器\n      this.setScrollEventCache(param)\n    } catch (e) {\n      this.reportException(\"initScroll\")\n    }\n  }\n\n  /**\n   * 监听路由的变化\n   * @param {*} param 开发者自定义上报的参数\n   * @returns\n   */\n  listenRouter(param) {\n    try {\n      if (this.isPC) {\n        if (!this.routerObject) {\n          return\n        }\n        this.routerObject.afterEach((to, from) => {\n          if (this.isCustomPageviewOpen) {\n            this.setCacheOldRouterTitle(document.title)\n            this.afterGetWebPath(to)\n            // 处理 custom_pageview_open 事件\n          }\n          const scrollEventCache = this.getScrollEventCache()\n          if (!_.isEmpty(scrollEventCache) && scrollEventCache.isInited) {\n            const that = this\n            setTimeout(() => {\n              that.reportScrollEvent()\n              scrollEventCache.scrollTime = new Date().getTime()\n              scrollEventCache.initAnchor = {}\n              that.setScrollEventCache(scrollEventCache)\n              that.scrollStart = false\n              that.setAnchorList()\n            }, 1000)\n          }\n          const routerInfo = {\n            path: to.path,\n            meta: to.meta,\n            query: to.query,\n            params: to.params\n          }\n          this.setCurrentRouterInfo(routerInfo)\n          this.reportPageView(param, from, to)\n          this.setCacheOldRouterTitle(document.title)\n        })\n      } else {\n        const isEmptyObject = !_.isObject(param)\n        if (isEmptyObject) {\n          param = {}\n        }\n        $router.onchange = (now, old) => {\n          this.reportPageView(param, old, now)\n        }\n      }\n      // 监听页面隐藏事件 页面关闭的时候同样也会触发\n      this.listenVisibilityChange(param)\n    } catch (e) {\n      this.reportException(\"listenRouter\")\n    }\n  }\n\n  /**\n   * 监听滚动的变化\n   * @param {*} param 开发者自定义上报的参数\n   */\n  listenScroll(param) {\n    try {\n      const isValid = this.checkScrollInitParams(param)\n      if (!isValid) {\n        return\n      }\n      this.initScroll()\n      document.body.onscroll = () => {\n        // 监听浏览器滚动事件( onscroll )\n        // 事件触发的时候获取当前的scrollTop( this.scrollTop )，执行onScrollEnd函数(延迟500 )\n        // 在执行onScrollEnd函数的时候再获取当前的scrollTop( nowScrollTop )\n        // 拿当前的scrollTop与延时500毫秒之前的scrollTop进行比较，看是否相等，相等的话说明滚动条停止了滚动\n        if (!this.scrollStart) {\n          this.handleFirstSrcoll() // 滚动开始之前调用方法\n          const extraParams = param.extraParams ? param.extraParams : {}\n          this.reportScrollEvent(extraParams)\n          const scrollCache = this.getScrollEventCache()\n          scrollCache.scrollTime = 0 // 上报完成之后重置时间，下次记录的时间为：滚动结束之后\n          scrollCache.anchorList = [] // 上报完成之后重置经过的锚点 下次记录的时间为：滚动结束之后\n          this.setScrollEventCache(scrollCache)\n        }\n        if (this.scrollTimeClear) {\n          clearTimeout(this.scrollTimeClear)\n        }\n        const scrollEventCache = this.getScrollEventCache()\n        scrollEventCache.scrollTop = document.documentElement.scrollTop\n        this.setScrollEventCache(scrollEventCache)\n        this.scrollTimeClear = setTimeout(() => {\n          this.onScrollEnd()\n        }, 500)\n      }\n    } catch (e) {\n      this.reportException(\"listenScroll\")\n    }\n  }\n\n  /**\n   *\n   * @param {*} param 自定义参数\n   * @param {*} olderRouter 之前的旧路由\n   * @param {*} nowRouter 当前路由\n   * @returns\n   */\n  reportPageView(param, olderRouter, nowRouter) {\n    try {\n      const lastVisitUrl = this.getCacheVisitUrl()\n      let nowPath = nowRouter.fullPath\n      let oldPath = olderRouter.fullPath\n      if (this.routerObject) {\n        nowPath = nowRouter.path\n        oldPath = olderRouter.path\n      }\n      if (lastVisitUrl === nowPath) {\n        return\n      }\n      if (!this.volcengineProps[oldPath]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const finalParam = this.getEventParam(param, oldPath, true, olderRouter)\n      window.collectEvent(\"custom_pageview\", finalParam)\n      this.setCacheVisitUrl(nowPath)\n      this.setCacheVisitWebUrl(window.location.href)\n    } catch (e) {\n      this.reportException(\"reportPageView\")\n    }\n  }\n\n  /**\n   * 监听用户进入页面的事件\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewOpen(param) {\n    if (this.routerObject) {\n      this.customPageviewOpenParam = param\n      this.isCustomPageviewOpen = true\n      return\n    }\n    if (!_.isObject(param)) {\n      param = {}\n    }\n    try {\n      const currentUrl = this.getCurrentUrl() // 获取当前的页面路径\n      const nowTime = new Date().getTime()\n      this.setCacheTime(nowTime) // 重新记录页面停留时间\n      this.setCacheVisitUrl(currentUrl)\n      this.setCacheVisitWebUrl(window.location.href)\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const finalParam = this.getEventParam(param, currentUrl, false, {})\n      window.collectEvent(\"custom_pageview_open\", finalParam)\n    } catch (e) {\n      this.reportException(\"customPageviewOpen\")\n    }\n  }\n\n  /**\n   * 监听H5用户隐藏页面的事件 (PC端通过对 visibilityChange 事件的监听来实现)\n   * @param {*} param 用户自定义携带参数\n   * @returns\n   */\n  customPageviewHide(param) {\n    if (this.routerObject) {\n      return\n    }\n    if (!_.isObject(param)) {\n      param = {}\n    }\n    // 安卓的webview返回App 通过onHide 生命周期触发\n    // 如果是iOS的webview 则不触发,iOS的webview 是通过 uni-app sdk 的 handleWebviewOnHide 触发\n    try {\n      const isIOS = checkIsIOS() // iOS终端\n      if (plus && isIOS) {\n        return\n      }\n    } catch (e) {}\n    try {\n      const pages = this.getCurrentPagesArr()\n      this.changeCurrentPage(pages)\n      const currentUrl = this.getCurrentUrl()\n      if (!this.volcengineProps[currentUrl]) {\n        this.updateRouter(this.routerInfo, this.tarBar)\n      }\n      const commonAttr = this.getEventParam(param, currentUrl, false, {})\n      window.collectEvent(\"custom_pageview_hide\", commonAttr)\n      // 上报当前页面的停留时间，然后onShow的时候会重新改写当前页面访问时间\n      this.setCacheVisitUrl(currentUrl)\n      this.setCacheVisitWebUrl(window.location.href)\n      const pageviewParam = this.getEventParam(param, currentUrl, true, {})\n      window.collectEvent(\"custom_pageview\", pageviewParam)\n    } catch (e) {\n      this.reportException(\"customPageviewHide\")\n    }\n  }\n\n  afterGetWebPath(router) {\n    try {\n      const nowTime = new Date().getTime()\n      this.setCacheTime(nowTime) // 重新记录页面停留时间\n      this.setCacheVisitUrl(router.path)\n      this.setCacheVisitWebUrl(window.location.href)\n      const currentUrl = router.path\n      const commonAttr = this.getEventParam(\n        this.customPageviewOpenParam,\n        currentUrl,\n        false,\n        router\n      )\n      window.collectEvent(\"custom_pageview_open\", commonAttr)\n      this.customPageviewOpenParam = null\n      this.isCustomPageviewOpen = false\n      const routerInfo = {\n        path: router.path,\n        meta: router.meta,\n        query: router.query,\n        params: router.params\n      }\n      this.setCurrentRouterInfo(routerInfo)\n      const scrollEventCache = this.getScrollEventCache()\n      if (!_.isEmpty(scrollEventCache)) {\n        const that = this\n        setTimeout(function() {\n          that.recordScrollParam()\n        }, 1000)\n      }\n    } catch (e) {\n      this.reportException(\"afterGetWebPath\")\n    }\n  }\n\n  afterReportEvent(reportEventName, reportEventParam) {\n    try {\n      const router = this.getCurrentRouterInfo()\n      const meta = router.meta\n      const title = meta ? meta.pageName || document.title : document.title\n      const commonAttr = this.getEventParam(\n        reportEventParam,\n        router.path,\n        false,\n        router\n      )\n      commonAttr[\"custom_page_url\"] = window.location.href\n      commonAttr[\"custom_page_url_path\"] = router.path\n      if (!reportEventParam[\"custom_page_title\"]) {\n        commonAttr[\"custom_page_title\"] =\n          reportEventName === \"sidebar_item_click\"\n            ? this.getCacheOldRouterTitle()\n            : title\n      }\n      window.collectEvent(reportEventName, commonAttr)\n    } catch (e) {\n      this.reportException(\"afterReportEvent\")\n    }\n  }\n\n  // 设置用户Id\n\n  setUserUniqueId(paramUserUniqueId) {\n    try {\n      const userUniqueId = paramUserUniqueId || this.nullProp\n      window.collectEvent(\"config\", {\n        user_unique_id: userUniqueId\n      })\n    } catch (e) {\n      this.reportException(\"setUserUniqueId\")\n    }\n  }\n  collectApi(param) {\n    const that = this\n    setTimeout(() => {\n      that.collectApiTask(param)\n    }, 500)\n  }\n  // 接口请求上报\n  collectApiTask(param) {\n    try {\n      const routeInfo = this.getCurrentRouterInfo()\n      const meta = routeInfo.meta\n      const title = meta ? meta.pageName || document.title : document.title\n      const currentUrl = this.getCurrentUrl()\n      this.setCacheVisitUrl(currentUrl)\n\n      const apiRequestParam = {\n        api_name: param.apiName,\n        is_success: param.isSuccess,\n        api_time_cost: param.apiTimeCost,\n        custom_page_title: title,\n        custom_page_url: window.location.href\n      }\n\n      const commonAttr = this.getEventParam(\n        apiRequestParam,\n        currentUrl,\n        false,\n        routeInfo\n      )\n      delete param.apiName\n      delete param.isSuccess\n      delete param.apiTimeCost\n\n      const finalParam = {\n        ...commonAttr,\n        ...param\n      }\n      window.collectEvent(\"api_request\", finalParam)\n    } catch (e) {\n      this.reportException(\"collectApiTask\")\n    }\n  }\n\n  reportEvent(name, param) {\n    if (this.routerObject) {\n      this.afterReportEvent(name, param)\n      return\n    }\n    try {\n      const currentUrl = this.getCurrentUrl()\n      this.setCacheVisitUrl(currentUrl)\n      const finalParam = this.getEventParam(param, currentUrl, false, {})\n      window.collectEvent(name, finalParam)\n    } catch (e) {\n      this.reportException(\"reportEvent\")\n    }\n  }\n\n  /**\n   * 上报用户属性\n   * @param {*} profileParam 用户属性组成的对象\n   */\n  profileSet(profileParam) {\n    try {\n      window.collectEvent(\"profileSet\", profileParam)\n    } catch (e) {\n      this.reportException(\"profileSet\")\n    }\n  }\n\n  sdkVersionProfileSet(param) {\n    try {\n      const sdkVersion = this.getSdkVersion()\n      const finalParam = {\n        ...param,\n        ...sdkVersion\n      }\n      this.profileSet(finalParam)\n    } catch (e) {\n      this.reportException(\"sdkVersionProfileSet\")\n    }\n  }\n\n  appVersionProfileSet(param) {\n    try {\n      const appVersion = this.getAppVersion()\n      const finalParam = {\n        ...param,\n        ...appVersion\n      }\n      this.profileSet(finalParam)\n    } catch (e) {\n      this.reportException(\"appVersionProfileSet\")\n    }\n  }\n\n  handelRouterObject(routerObject) {\n    try {\n      const route = routerObject.path\n      const meta = routerObject.meta\n      const path = route.substring(1, route.length)\n      this.routerInfo = [\n        {\n          path,\n          meta\n        }\n      ]\n      this.changeCurrentPage([route])\n    } catch (e) {\n      this.reportException(\"handelRouterObject\")\n    }\n  }\n  /**\n   * 滚动结束的时候触发\n   */\n  onScrollEnd() {\n    try {\n      const nowScrollTop =\n        document.documentElement.scrollTop || document.body.scrollTop\n      const scrollEventCache = this.getScrollEventCache()\n      const isScrollEnd = nowScrollTop === scrollEventCache.scrollTop\n      // 是否滚动结束了\n      if (isScrollEnd) {\n        this.recordScrollParam()\n      }\n    } catch (e) {\n      this.reportException(\"onScrollEnd\")\n    }\n  }\n\n  listenVisibilityChange(param) {\n    const that = this\n    try {\n      window.addEventListener(\"visibilitychange\", (event) => {\n        const isHidden = document.visibilityState === \"hidden\"\n        if (that.routerObject) {\n          if (isHidden) {\n            const router = that.getCurrentRouterInfo()\n            that.handlePageViewCloseByWeb(router, param)\n            that.handlePageViewHideByWeb(router, param)\n            that.handleReportScrollEvent()\n          } else {\n            const nowTime = new Date().getTime()\n            this.setCacheTime(nowTime)\n            // 重置滚动条停留时间\n            this.resetScrollDurationTime(nowTime)\n          }\n        }\n      })\n    } catch (e) {\n      this.reportException(\"listenVisibilityChange\")\n    }\n  }\n\n  // 上报滚动条页面停留事件\n  handleReportScrollEvent() {\n    try {\n      const scrollEventCache = this.getScrollEventCache()\n      if (!_.isEmpty(scrollEventCache)) {\n        this.reportScrollEvent()\n        this.scrollStart = false\n        // 滚动没有开始，只是隐藏的时候上报停留事件\n      }\n    } catch (e) {\n      this.reportException(\"handleReportScrollEvent\")\n    }\n  }\n\n  // 重置滚动条的开始停留时间\n  resetScrollDurationTime(nowTime) {\n    try {\n      const scrollEventCache = this.getScrollEventCache()\n      if (!_.isEmpty(scrollEventCache)) {\n        scrollEventCache.scrollTime = nowTime\n        this.setScrollEventCache(scrollEventCache)\n      }\n    } catch (e) {\n      this.reportException(\"resetScrollDurationTime\")\n    }\n  }\n\n  handlePageViewCloseByWeb(router, param) {\n    try {\n      this.setCacheVisitUrl(router.path)\n      this.setCacheVisitWebUrl(window.location.href)\n      const commonAttr = this.getEventParam(param, router.path, true, router)\n      window.collectEvent(\"custom_pageview\", commonAttr)\n    } catch (e) {\n      this.reportException(\"handlePageViewCloseByWeb\")\n    }\n  }\n\n  handlePageViewHideByWeb(router, param) {\n    try {\n      const pageviewHideParam = this.getEventParam(\n        param,\n        router.path,\n        false,\n        router\n      )\n      window.collectEvent(\"custom_pageview_hide\", pageviewHideParam)\n    } catch (e) {\n      this.reportException(\"handlePageViewHideByWeb\")\n    }\n  }\n\n  recordScrollParam() {\n    try {\n      this.scrollStart = false // 此次滚动属于结束状态\n      const scrollEventCache = this.getScrollEventCache()\n      scrollEventCache.scrollTime = new Date().getTime()\n      this.setScrollEventCache(scrollEventCache)\n      this.setAnchorList()\n    } catch (e) {\n      this.reportException(\"recordScrollParam\")\n    }\n  }\n\n  setAnchorList() {\n    try {\n      const scrollEventCache = this.getScrollEventCache()\n      const initAnchor = scrollEventCache.initAnchor || {}\n      const isInitRecord = !initAnchor || _.isEmpty(initAnchor)\n      const initAnchorListData = {}\n      const clientHeight = document.documentElement.clientHeight\n      // 浏览器可视区域高度\n      const clientWidth = document.documentElement.clientWidth\n      // 浏览器可视区域宽度\n      const nowScrollTop =\n        document.documentElement.scrollTop || document.body.scrollTop\n      const anchorWrapper = this.getElement(scrollEventCache.anchorWrapper)\n      const anchorList = anchorWrapper.querySelectorAll(\"[id]\")\n      scrollEventCache.anchorList = []\n      anchorList.forEach((item) => {\n        // 获取元素相对于视口的位置\n        const rect = item.getBoundingClientRect()\n        if (isInitRecord) {\n          initAnchorListData[item.getAttribute(\"id\")] = {\n            top: rect.top,\n            bottom: rect.bottom\n          }\n        }\n        const targetItem = isInitRecord\n          ? rect\n          : initAnchor[item.getAttribute(\"id\")]\n        if (targetItem) {\n          // 是否满足上报条件\n          const reportCondition =\n            rect.top < clientHeight &&\n            rect.bottom > 1 &&\n            rect.left < clientWidth &&\n            rect.right > 0\n          const distanceCondition =\n            Math.abs(nowScrollTop - targetItem.top) <=\n              scrollEventCache.scrollDistance ||\n            Math.abs(nowScrollTop - targetItem.bottom) <=\n              scrollEventCache.scrollDistance\n          if (reportCondition && distanceCondition) {\n            // 滚动到两个锚点之间，超过这个距离就上报\n            scrollEventCache.anchorList.push(item.getAttribute(\"id\"))\n          }\n        }\n      })\n      if (isInitRecord) {\n        scrollEventCache.initAnchor = initAnchorListData\n      }\n      this.setScrollEventCache(scrollEventCache)\n    } catch (e) {\n      this.reportException(\"setAnchorList\")\n    }\n  }\n\n  reportScrollEvent(param) {\n    try {\n      this.scrollStart = true\n      const scrollEventCache = this.getScrollEventCache()\n      const duration = new Date().getTime() - scrollEventCache.scrollTime\n      if (duration > scrollEventCache.scrollThreshold * 1000) {\n        const scrollParam = this.getScrollParam(duration, param)\n        window.collectEvent(\"scroll\", scrollParam)\n      }\n    } catch (e) {\n      this.reportException(\"reportScrollEvent\")\n    }\n  }\n\n  getCurrentUrl() {\n    try {\n      if (this.routerObject) {\n        const routeInfo = this.getCurrentRouterInfo()\n        let path = routeInfo.path\n        if (!routeInfo.path) {\n          path = this.getNowPath(routeInfo)\n        }\n        return path\n      }\n      const pages = this.getCurrentPagesArr()\n      this.changeCurrentPage(pages)\n      let currentUrl = this.getCacheVisitUrl()\n      if (this.pages.length > 0) {\n        currentUrl = this.pages[0]\n      } else {\n        //  如果currentPage 为空数组，那就去循环路由数组，是否部分路由是包含于完整路由的\n        const routerArr = this.routerInfo\n        const nowFullPath = window.location.href\n        routerArr.forEach((item) => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path\n          }\n        })\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + this.routerInfo[0].path\n      }\n      return currentUrl\n    } catch (e) {\n      this.reportException(\"getCurrentUrl\")\n      return \"\"\n    }\n  }\n\n  /**\n   * 获取上报y轴滚动的参数\n   */\n  getScrollParam(duration, extraParams) {\n    try {\n      const scrollEventCache = this.getScrollEventCache()\n      const anchorList = scrollEventCache.anchorList\n      const anchorName = []\n      if (anchorList && anchorList.length) {\n        anchorList.map((item) => {\n          const dom = document.getElementById(item)\n          if (dom) {\n            anchorName.push(dom.innerText)\n          }\n        })\n      }\n      const scrollParam = {\n        custom_page_duration: duration, // 停留时长\n        scrollTop: scrollEventCache.scrollTop, // y轴坐标\n        anchorName: anchorName, // 经过的锚点\n        ...extraParams\n      }\n      const router = this.getCurrentRouterInfo()\n      const commonParam = this.getEventParam(\n        scrollParam,\n        router.path,\n        false,\n        router\n      )\n      return commonParam\n    } catch (e) {\n      this.reportException(\"getScrollParam\")\n      return {}\n    }\n  }\n\n  /**\n   * 获取所有事件需要上报的参数\n   * @param {*} param 用户自定义参数\n   * @param {*} path 页面路径\n   * @param {*} isPageview 是否是要上报custom_pageview 事件\n   * @param {*} router 页面路由 仅限PC 端\n   * @returns\n   */\n  getEventParam(param, path, isPageview, router) {\n    try {\n      const commonAttr = this.getCommonAttr(path)\n      let durationParam = {}\n      if (isPageview) {\n        const lastPageVisitTime = this.getCacheTime()\n        const nowTime = new Date().getTime()\n        durationParam = {\n          custom_page_duration: nowTime - lastPageVisitTime\n        }\n        this.setCacheTime(nowTime)\n      }\n      if (router && router.meta) {\n        commonAttr[\"custom_page_title\"] = router.meta.pageName\n\n        commonAttr[\"sub_app_name\"] = router.meta.subAppName || this.nullProp\n      }\n      commonAttr[\"custom_page_url\"] = this.getCacheVisitWebUrl()\n      if (!commonAttr[\"custom_page_title\"]) {\n        const htmlTitle = this.getCacheOldRouterTitle()\n        commonAttr[\"custom_page_title\"] = htmlTitle\n      }\n      if (!commonAttr[\"custom_page_url_path\"]) {\n        commonAttr[\"custom_page_url_path\"] = path\n      }\n      const versionInfo = this.getVersionInfo()\n      const webRouterMeta = {}\n      if (this.routerObject) {\n        const webRouterMetaKeys = Object.keys(router.meta)\n        webRouterMetaKeys.forEach((item) => {\n          const volcengineFinalKey = item.replace(\n            /[A-Z]/g,\n            (key) => `_${key.toLowerCase()}`\n          )\n          webRouterMeta[volcengineFinalKey] = router.meta[item]\n        })\n      }\n      const oldFullUrlPath = this.getCacheVisitWebUrl()\n      const sourceObject = this.getFromQueryNameContent(oldFullUrlPath)\n      const eventParams = {\n        ...commonAttr,\n        ...durationParam,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta,\n        ...param\n      }\n      const currentPath = this.getCurrentUrl()\n      const plusCommonAttr = this.getCommonAttr(currentPath)\n      plusCommonAttr[\"custom_page_url\"] = window.location.href\n      let plusCacheParam = {\n        ...plusCommonAttr,\n        ...versionInfo,\n        ...sourceObject,\n        ...webRouterMeta\n      }\n      if (isPageview) {\n        plusCacheParam = {\n          ...plusCacheParam,\n          ...param\n        }\n      }\n      this.setWebviewCache(plusCacheParam)\n      return eventParams\n    } catch (e) {\n      this.reportException(\"getEventParam\")\n      return {}\n    }\n  }\n\n  /**\n   * 判断监听滚动的初始化参数是否符合要求\n   * @param {*} initParam  初始化参数\n   * @returns bool\n   */\n  checkScrollInitParams(initParam) {\n    try {\n      let isValid = true\n      if (!this.isPC) {\n        isValid = false\n        console.warn(\"监听滚动失败，非PC端\")\n      }\n      const anchorWrapper = this.getElement(initParam.anchorWrapper)\n      if (!anchorWrapper) {\n        isValid = false\n        console.warn(\"监听滚动失败，非HTMLElement\")\n      }\n      const orginThreshold = initParam.threshold || 0\n      const threshold =\n        typeof orginThreshold === \"string\"\n          ? parseFloat(orginThreshold)\n          : orginThreshold\n      if (!_.isFinite(threshold)) {\n        isValid = false\n        console.warn(\"监听滚动失败，秒数参数非Number类型\")\n      }\n      const originDistance = initParam.distance || 400\n      const scrollDistance =\n        typeof originDistance === \"string\"\n          ? parseFloat(originDistance)\n          : originDistance\n      if (!_.isFinite(scrollDistance)) {\n        isValid = false\n        console.warn(\"监听滚动失败，滚动阈值参数非Number类型\")\n      }\n      const extraParams = initParam.extraParams || {}\n      if (!_.isObject(extraParams)) {\n        isValid = false\n        console.warn(\"监听滚动失败，额外参数非Object类型\")\n      }\n      if (isValid) {\n        const scrollEventCache = this.getScrollEventCache()\n        scrollEventCache.scrollDistance = scrollDistance\n        scrollEventCache.anchorWrapper = initParam.anchorWrapper\n        scrollEventCache.scrollThreshold = threshold\n        this.setScrollEventCache(scrollEventCache)\n      }\n      return isValid\n    } catch (e) {\n      this.reportException(\"checkScrollInitParams\")\n      return false\n    }\n  }\n  /**\n   * 获取dom 元素\n   * @param {*} el dom 元素 或 css 选择器\n   * @returns dom 元素\n   */\n  getElement(el) {\n    if (el === \"\") {\n      return document.body // 如果什么都不传的话，就是默认为body\n    }\n    const element = typeof el === \"string\" ? document.querySelector(el) : el\n    return _.isElement(element) ? element : false\n  }\n\n  handleFirstSrcoll() {\n    try {\n      const scrollEventCache = this.getScrollEventCache()\n      if (\n        !scrollEventCache.initAnchor ||\n        _.isEmpty(scrollEventCache.initAnchor)\n      ) {\n        this.recordScrollParam()\n      }\n    } catch (e) {\n      this.reportException(\"handleFirstSrcoll\")\n    }\n  }\n  /**\n   * 上报异常事件\n   * @param {*} method_name 异常API的名称\n   */\n  reportException(exception_method_name) {\n    try {\n      const reportInfo = {\n        exception_method_name,\n        exception_type: \"analytics_sdk\",\n        exception_platform: \"web\"\n      }\n      window.collectEvent(this.exceptionThrowEventName, reportInfo)\n    } catch (e) {}\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}