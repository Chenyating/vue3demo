{"ast":null,"code":"import { defineStore, createPinia } from 'pinia';\n\n// 创建一个 Pinia store\nconst pinia = createPinia();\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {} // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Date.now().toString();\n    },\n    // 设置缓存\n    setCache(cacheKey, cacheInfo, time = 0) {\n      // 获取当前的缓存数据\n      const currentData = this.cacheData[cacheKey] || {};\n\n      // 检查是否有差异\n      const diff = this.compareObjects(currentData, cacheInfo);\n\n      // 如果有差异或间隔时间到了，保存新版本\n      if (Object.keys(diff).length > 0 || time > 0) {\n        this.cacheData[cacheKey] = cacheInfo;\n        localStorage.setItem(cacheKey, JSON.stringify(cacheInfo));\n        if (time > 0) {\n          // 如果设置了间隔时间，启动自动缓存\n          this.setupAutoSave(cacheKey, time);\n        }\n      }\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      clearInterval(this.autoSaveIntervals[cacheKey]);\n    },\n    // 清空指定缓存\n    clearCache(cacheKey) {\n      delete this.cacheData[cacheKey];\n      localStorage.removeItem(cacheKey);\n    },\n    // 获取所有缓存\n    getAllCache() {\n      const keys = Object.keys(localStorage);\n      const result = {};\n      for (const key of keys) {\n        result[key] = JSON.parse(localStorage.getItem(key));\n      }\n      return result;\n    },\n    // 获取指定缓存\n    getCache(cacheKey) {\n      return this.cacheData[cacheKey] || JSON.parse(localStorage.getItem(cacheKey));\n    },\n    // 比较两个对象的差异\n    compareObjects(obj1, obj2) {\n      // 你需要实现一个深度比较对象的逻辑，找出差异\n      // 返回一个包含差异的对象\n      const diff = {};\n      // 比较 obj1 和 obj2，将差异存储在 diff 中\n      // 例如：\n      for (const key in obj1) {\n        if (obj1[key] !== obj2[key]) {\n          diff[key] = [obj1[key], obj2[key]];\n        }\n      }\n      return diff;\n    },\n    // 设置间隔时间自动保存\n    setupAutoSave(cacheKey, time) {\n      if (!this.autoSaveIntervals) {\n        this.autoSaveIntervals = {};\n      }\n      clearInterval(this.autoSaveIntervals[cacheKey]);\n      this.autoSaveIntervals[cacheKey] = setInterval(() => {\n        this.setCache(cacheKey, this.cacheData[cacheKey], time);\n      }, time);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","createPinia","pinia","cubeCacheStore","state","cacheData","actions","getCacheKey","Date","now","toString","setCache","cacheKey","cacheInfo","time","currentData","diff","compareObjects","Object","keys","length","localStorage","setItem","JSON","stringify","setupAutoSave","cancelAutoSave","clearInterval","autoSaveIntervals","clearCache","removeItem","getAllCache","result","key","parse","getItem","getCache","obj1","obj2","setInterval"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore, createPinia } from 'pinia';\n\n// 创建一个 Pinia store\nconst pinia = createPinia();\n\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {}, // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Date.now().toString();\n    },\n\n    // 设置缓存\n    setCache(cacheKey, cacheInfo, time = 0) {\n      // 获取当前的缓存数据\n      const currentData = this.cacheData[cacheKey] || {};\n      \n      // 检查是否有差异\n      const diff = this.compareObjects(currentData, cacheInfo);\n      \n      // 如果有差异或间隔时间到了，保存新版本\n      if (Object.keys(diff).length > 0 || time > 0) {\n        this.cacheData[cacheKey] = cacheInfo;\n        localStorage.setItem(cacheKey, JSON.stringify(cacheInfo));\n\n        if (time > 0) {\n          // 如果设置了间隔时间，启动自动缓存\n          this.setupAutoSave(cacheKey, time);\n        }\n      }\n    },\n\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      clearInterval(this.autoSaveIntervals[cacheKey]);\n    },\n\n    // 清空指定缓存\n    clearCache(cacheKey) {\n      delete this.cacheData[cacheKey];\n      localStorage.removeItem(cacheKey);\n    },\n\n    // 获取所有缓存\n    getAllCache() {\n      const keys = Object.keys(localStorage);\n      const result = {};\n      for (const key of keys) {\n        result[key] = JSON.parse(localStorage.getItem(key));\n      }\n      return result;\n    },\n\n    // 获取指定缓存\n    getCache(cacheKey) {\n      return this.cacheData[cacheKey] || JSON.parse(localStorage.getItem(cacheKey));\n    },\n\n    // 比较两个对象的差异\n    compareObjects(obj1, obj2) {\n      // 你需要实现一个深度比较对象的逻辑，找出差异\n      // 返回一个包含差异的对象\n      const diff = {};\n      // 比较 obj1 和 obj2，将差异存储在 diff 中\n      // 例如：\n      for (const key in obj1) {\n        if (obj1[key] !== obj2[key]) {\n          diff[key] = [obj1[key], obj2[key]];\n        }\n      }\n      return diff;\n    },\n\n    // 设置间隔时间自动保存\n    setupAutoSave(cacheKey, time) {\n      if (!this.autoSaveIntervals) {\n        this.autoSaveIntervals = {};\n      }\n\n      clearInterval(this.autoSaveIntervals[cacheKey]);\n      this.autoSaveIntervals[cacheKey] = setInterval(() => {\n        this.setCache(cacheKey, this.cacheData[cacheKey], time);\n      }, time);\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}