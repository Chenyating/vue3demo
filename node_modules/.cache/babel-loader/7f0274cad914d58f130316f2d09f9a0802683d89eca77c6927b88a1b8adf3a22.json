{"ast":null,"code":"/**\n * 是否为外部链接\n * @param {*} path 【必填】需要校验的数据\n */\nfunction isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path);\n}\n\n/**\n   * 是否为字符串\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true;\n  }\n  return false;\n}\n\n/**\n   * 是否为空\n   * @param {*校验数据} str\n   */\nfunction isUndeFinedOrNullOrBlank(str) {\n  return str === undefined || str == null || typeof str === 'string' && str.trim() === '';\n}\n\n/**\n   * 是否为数组\n   * @param {*} arg 【必填】需要校验的数据\n   */\nfunction isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  }\n  return Array.isArray(arg);\n}\n\n/**\n   * 校验url是否规范\n   * @param {*} url 【必填】需要校验的url\n   */\nfunction validURL(url) {\n  const reg = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n  return reg.test(url);\n}\n\n/**\n   * 是否全为小写字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validLowerCase(str) {\n  const reg = /^[a-z]+$/;\n  return reg.test(str);\n}\n\n/**\n   * 是否全为大写字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validUpperCase(str) {\n  const reg = /^[A-Z]+$/;\n  return reg.test(str);\n}\n\n/**\n   * 是否全为字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validAlphabets(str) {\n  const reg = /^[A-Za-z]+$/;\n  return reg.test(str);\n}\n\n/**\n   * 邮箱校验\n   * @param {*} email 【必填】需要校验的数据\n   */\nfunction validEmail(email) {\n  const reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return reg.test(email);\n}\n\n/**\n   * 手机号校验\n   * @param {*} mobile 【必填】需要校验的数据\n   */\nfunction validMobile(mobile) {\n  const reg = /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/;\n  return reg.test(mobile);\n}\n\n/**\n   * 电话号码校验\n   * @param {*} phone 【必填】需要校验的数据\n   */\nfunction validPhone(phone) {\n  const reg = /^(\\d{3,4}-)?\\d{7,8}$/; // 座机和传真格式是一样的：区号-号码\n  return reg.test(phone);\n}\n\n/**\n   * 身份证号码校验\n   * @param {*} idCard 【必填】需要校验的数据\n   */\nfunction validIdCard(idCard) {\n  const reg = /^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[0-2])(([0-2][1-9])|10|20|30|31)\\d{3}(\\d|X|x)$/;\n  return reg.test(idCard);\n}\n/**\n * 是否json对象\n * @param str\n * @returns {boolean}\n */\nfunction isJson(str) {\n  if (typeof str === 'string') {\n    try {\n      const obj = JSON.parse(str);\n      if (typeof obj === 'object' && obj) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  } else if (typeof str === 'object') {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isDot(value) {\n  const reg = /^(-|\\+)?\\d+\\.\\d*$/;\n  if (reg.test(value)) {\n    const length = value.toString().split('.')[1].length;\n    return length;\n  }\n  return reg.test(value);\n}\n\n// 判断密码强度\nfunction validPassword(value = '', length = 8, max = Number.MAX_SAFE_INTEGER) {\n  let level = 0;\n  const vLength = value.length;\n  const regList = [/\\d/,\n  // 数字\n  /[A-Z]/,\n  // 大写字母\n  /[a-z]/,\n  // 小写字母\n  /[~!@ #$%^&*()_+`\\-={}:\";'<>?,.\\/\\[\\]\\|]/ // 特殊字符\n  ];\n\n  if (vLength >= length && vLength <= max) {\n    level += 1;\n  }\n  regList.forEach(v => {\n    if (v.test(value)) {\n      level += 1;\n    }\n  });\n  return level;\n}\nexport default {\n  isExternal,\n  isString,\n  isArray,\n  validURL,\n  validLowerCase,\n  validUpperCase,\n  validAlphabets,\n  validEmail,\n  validMobile,\n  validPhone,\n  validIdCard,\n  isUndeFinedOrNullOrBlank,\n  isJson,\n  isDot,\n  validPassword\n};","map":{"version":3,"names":["isExternal","path","test","isString","str","String","isUndeFinedOrNullOrBlank","undefined","trim","isArray","arg","Array","Object","prototype","toString","call","validURL","url","reg","validLowerCase","validUpperCase","validAlphabets","validEmail","email","validMobile","mobile","validPhone","phone","validIdCard","idCard","isJson","obj","JSON","parse","e","isDot","value","length","split","validPassword","max","Number","MAX_SAFE_INTEGER","level","vLength","regList","forEach","v"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/node_modules/@cndinfo/cube-web-utils/src/utils/validate.js"],"sourcesContent":["/**\n * 是否为外部链接\n * @param {*} path 【必填】需要校验的数据\n */\nfunction isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n\n/**\n   * 是否为字符串\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true\n  }\n  return false\n}\n\n/**\n   * 是否为空\n   * @param {*校验数据} str\n   */\nfunction isUndeFinedOrNullOrBlank(str) {\n  return str === undefined || str == null || (typeof str === 'string' && str.trim() === '')\n}\n\n/**\n   * 是否为数组\n   * @param {*} arg 【必填】需要校验的数据\n   */\nfunction isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n  return Array.isArray(arg)\n}\n\n/**\n   * 校验url是否规范\n   * @param {*} url 【必填】需要校验的url\n   */\nfunction validURL(url) {\n  const reg = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return reg.test(url)\n}\n\n/**\n   * 是否全为小写字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validLowerCase(str) {\n  const reg = /^[a-z]+$/\n  return reg.test(str)\n}\n\n/**\n   * 是否全为大写字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validUpperCase(str) {\n  const reg = /^[A-Z]+$/\n  return reg.test(str)\n}\n\n/**\n   * 是否全为字母\n   * @param {*} str 【必填】需要校验的数据\n   */\nfunction validAlphabets(str) {\n  const reg = /^[A-Za-z]+$/\n  return reg.test(str)\n}\n\n/**\n   * 邮箱校验\n   * @param {*} email 【必填】需要校验的数据\n   */\nfunction validEmail(email) {\n  const reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return reg.test(email)\n}\n\n/**\n   * 手机号校验\n   * @param {*} mobile 【必填】需要校验的数据\n   */\nfunction validMobile(mobile) {\n  const reg = /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/\n  return reg.test(mobile)\n}\n\n/**\n   * 电话号码校验\n   * @param {*} phone 【必填】需要校验的数据\n   */\nfunction validPhone(phone) {\n  const reg = /^(\\d{3,4}-)?\\d{7,8}$/// 座机和传真格式是一样的：区号-号码\n  return reg.test(phone)\n}\n\n/**\n   * 身份证号码校验\n   * @param {*} idCard 【必填】需要校验的数据\n   */\nfunction validIdCard(idCard) {\n  const reg = /^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[0-2])(([0-2][1-9])|10|20|30|31)\\d{3}(\\d|X|x)$/\n  return reg.test(idCard)\n}\n/**\n * 是否json对象\n * @param str\n * @returns {boolean}\n */\nfunction isJson(str) {\n  if (typeof str === 'string') {\n    try {\n      const obj = JSON.parse(str)\n      if (typeof obj === 'object' && obj) {\n        return true\n      } else {\n        return false\n      }\n    } catch (e) {\n      return false\n    }\n  } else if (typeof str === 'object') {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction isDot(value) {\n  const reg = /^(-|\\+)?\\d+\\.\\d*$/\n  if(reg.test(value)) {\n    const length = value.toString().split('.')[1].length\n    return length\n  }\n  return reg.test(value)\n}\n\n// 判断密码强度\nfunction validPassword(value = '', length = 8, max = Number.MAX_SAFE_INTEGER) {\n  let level = 0\n  const vLength = value.length\n  const regList = [\n      /\\d/, // 数字\n      /[A-Z]/, // 大写字母\n      /[a-z]/, // 小写字母\n      /[~!@ #$%^&*()_+`\\-={}:\";'<>?,.\\/\\[\\]\\|]/, // 特殊字符\n  ]\n  if(vLength >= length && vLength <= max) {\n      level += 1\n  }\n  regList.forEach(v => {\n      if(v.test(value)) {\n          level += 1\n      }\n  })\n  return level\n}\n\nexport default {\n  isExternal,\n  isString,\n  isArray,\n  validURL,\n  validLowerCase,\n  validUpperCase,\n  validAlphabets,\n  validEmail,\n  validMobile,\n  validPhone,\n  validIdCard,\n  isUndeFinedOrNullOrBlank,\n  isJson,\n  isDot,\n  validPassword\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}