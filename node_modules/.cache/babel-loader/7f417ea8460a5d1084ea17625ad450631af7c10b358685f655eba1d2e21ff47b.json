{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport { AgGridVue } from 'ag-grid-vue';\nimport { AllModules } from 'ag-grid-enterprise';\nimport { AG_GRID_LOCALE_CN } from '../../../../lib/lang/ag-grid.zh.js';\nimport childHeaderSelect from '../../AgGridExtend/childHeaderSelect';\nimport childSelect from '../../AgGridExtend/childSelect';\nimport headerSelect from '../../AgGridExtend/headerSelect';\nimport parentSelect from '../../AgGridExtend/parentSelect';\nimport headerDefSelect from '../../AgGridExtend/headerDefSelect';\nimport defSelect from '../../AgGridExtend/defSelect';\nimport TableInput from './TableInput.vue';\nimport imageViewer from './imageViewer.vue';\nimport gridTotal from './gridTotal';\nimport localPagination from '../../Pagination/index.js';\nimport AgGridTextTooltip from '../../AgGridTextTooltip/index';\nimport AgGridWrap from '../../AgGridWrap/index.js';\nimport { AgSelect, AgGridSelect, AgInputSelect, AgGridText, AgGridInputNumber, AgGridInputDialog, AgGridInput, AgGridDate } from '../../ForGridComponents/cell-editor';\nimport { handleGridColumnDefs, handleGridChildColumnDefs } from './columnDefs';\nimport { deepClone } from './utils.js';\nimport '../../../../lib/styles/components/CommonAgGrid.scss';\nexport default {\n  name: 'AgGrid',\n  components: {\n    AgGridVue,\n    gridTotal,\n    imageViewer,\n    localPagination,\n    AgGridTextTooltip,\n    AgSelect,\n    AgGridSelect,\n    AgInputSelect,\n    AgGridText,\n    AgGridInputNumber,\n    AgGridInputDialog,\n    AgGridInput,\n    AgGridDate,\n    AgGridWrap\n  },\n  props: {\n    // 是否需要分页\n    paginationinif: {\n      type: Boolean,\n      default: true\n    },\n    // 默认页数\n    defaultPage: {\n      type: [Number, String],\n      default: 0\n    },\n    // 默认每个页码\n    defaultPerPageSize: {\n      type: Array,\n      default: () => [10, 20, 30, 50, 100, 200]\n    },\n    // 默认页码\n    defaultPageSize: {\n      type: [Number, String],\n      default: 30\n    },\n    // heightinif 表格高度\n    heightinif: {\n      type: [Number, String],\n      default: 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: false\n    },\n    // autoHeight为true时，minHeight生效 无效\n    minHeight: {\n      type: [Number, String],\n      default: 100\n    },\n    // 主标列配置\n    columnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 提示显示延迟几毫毛\n    tooltipShowDelay: {\n      type: Number,\n      default: 0\n    },\n    frameworkComponents: {\n      type: Object,\n      default: () => {}\n    },\n    // 表格数据\n    rowData: {\n      type: Array,\n      default: () => []\n    },\n    // 选择模式\n    tableSelection: {\n      type: String,\n      default: null,\n      validator: function (value) {\n        return ['single', 'multiple', null].indexOf(value) !== -1;\n      }\n    },\n    // 自适应\n    isSizeColumnsToFit: {\n      type: Boolean,\n      default: false\n    },\n    // 自动加载数据\n    autoLoadData: {\n      type: Boolean,\n      default: true\n    },\n    // 行唯一键值\n    rowKey: {\n      type: String,\n      required: true\n    },\n    // 加载事件用于翻页\n    loadData: {\n      type: Function,\n      default: null\n    },\n    // 是否主子表\n    isSubtable: {\n      type: Boolean,\n      default: false\n    },\n    // 子表列配置\n    childColumnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 子表数据存放属性\n    childrenListKey: {\n      type: String,\n      default: '_details'\n    },\n    // 子表键值\n    childRowKey: {\n      type: String,\n      default: ''\n    },\n    // 子表是否可以全选\n    childAllSelect: {\n      type: Boolean,\n      default: false\n    },\n    // 懒加载子表方法\n    loadDetail: {\n      type: Function,\n      default: null\n    },\n    // 子表合集的处理函数\n    handleDetailCount: {\n      type: [Function, Object],\n      default: null\n    },\n    // 头部合计\n    headerTotal: {\n      type: Array,\n      default: null\n    },\n    // 底部合计\n    footerTotal: {\n      type: Array,\n      default: null\n    },\n    // 是否全行编辑 all parent child\n    fullRowType: {\n      type: String,\n      default: null\n    },\n    // 是否禁用黏贴 all parent child\n    disablePaste: {\n      type: String,\n      default: null\n    },\n    // 重新设置表头 恢复排序\n    applyColumnDefOrder: {\n      type: Boolean,\n      default: true\n    },\n    additionalOptions: {\n      type: Object,\n      default: () => {}\n    },\n    detailOptions: {\n      type: Object,\n      default: () => {}\n    },\n    // 加载数据时展示 loading\n    showLoading: {\n      type: Boolean,\n      default: true\n    },\n    // 自适应列宽度，跳过对列标题的处理\n    isAutoSizeColumns: {\n      type: Boolean,\n      default: false\n    },\n    // 后端接口页码是否 0 开始\n    hasZeroPagination: {\n      type: Boolean,\n      default: false\n    },\n    // 自适应列宽度，不跳过对列标题的处理\n    isAutoSizeColumnsHeader: {\n      type: Boolean,\n      default: false\n    },\n    enableZeroValue: {\n      type: Boolean,\n      default: false\n    },\n    // 是否保存用户个性化操作配置\n    privateColumnDefs: {\n      type: Boolean,\n      default: false\n    },\n    // 获取个性化配置\n    getPrivateColumnDefs: {\n      type: Function,\n      default: null\n    }\n  },\n  data() {\n    return {\n      originColumnDefs: {},\n      // 页面最初的列定义\n      columnDefsItems: [],\n      // 接口返回用户操作对象\n      DomObserver: null,\n      initClass1: '',\n      initClass2: '',\n      initStyle1: '',\n      initStyle2: '',\n      AllModules,\n      gridShow: true,\n      gridApi: null,\n      columnApi: null,\n      gridOptions: null,\n      gridColumnDefs: [],\n      gridChildColumnDefs: [],\n      childColumnDefs_: [],\n      columnWidth: 0,\n      gridHeight: 0,\n      pagination: {\n        total: 0,\n        page: 0,\n        limit: 30\n      },\n      onHeaderDefSelect: selected => {\n        this.$emit('headerSelected', selected);\n      },\n      onDefSelect: (params, selected) => {\n        this.$emit('rowSelected', params, selected);\n      }\n    };\n  },\n  computed: {\n    hasZeroPagination_() {\n      return this.hasZeroPagination || this.defaultPage === 0;\n    },\n    gridStyle() {\n      const style = {};\n      const gridHeight = +this.gridHeight;\n      if (gridHeight > 0) {\n        style.height = `${gridHeight}px`;\n      }\n      return style;\n    },\n    scrollStyle() {\n      const userAgent = navigator.userAgent.toLowerCase();\n      const preg = new RegExp('windows|win32|win64|wow32|wow64', 'g');\n      return preg.test(userAgent) ? 'scroll-style' : '';\n    },\n    defaultColDef() {\n      return {\n        tooltipComponent: 'AgGridTextTooltip',\n        ...this.gridOptions.AgGridTextTooltip\n      };\n    }\n  },\n  watch: {\n    fullRowType(newVal, oldVal) {\n      this.gridShow = false;\n      this.initGridOptions();\n      this.$nextTick(() => {\n        this.gridShow = true;\n      });\n    },\n    rowData: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (this.gridApi) {\n          this.$nextTick(() => {\n            this.gridApi.forEachNode(v => {\n              const _selectedKeys = v.data._selectedKeys || [];\n              const _selected = v.data._selected || _selectedKeys.length > 0;\n              v.selected = !_selected;\n              v.setSelected(_selected, true, true);\n              if (v.detailNode && v.detailNode.detailGridInfo) {\n                v.detailNode.detailGridInfo.api.forEachNode(o => {\n                  const oState = _selectedKeys.indexOf(o.data[this.childRowKey]) !== -1;\n                  o.selected = !oState;\n                  o.setSelected(oState, true, true);\n                });\n              }\n            });\n          });\n        }\n        this.$emit('selectedChange', newValue);\n        if (newValue.length <= 1) {\n          this.handleGridHeight(newValue.length);\n        }\n        this.handlePinnedBottomRowData(newValue);\n      }\n    }\n  },\n  beforeDestroy() {\n    this.DomObserver && this.DomObserver.disconnect();\n  },\n  created() {\n    this.pagination.page = this.defaultPage;\n    this.pagination.limit = this.defaultPageSize;\n    this.gridChildColumnDefs = this.childColumnDefs;\n    if (!this.autoHeight) {\n      this.gridHeight = this.heightinif;\n    }\n    const initClass1 = localStorage.getItem('spaceClass');\n    const initClass2 = localStorage.getItem('themeClass');\n    const initStyle1 = localStorage.getItem('agColorStyle');\n    const initStyle2 = localStorage.getItem('agSpaceStyle');\n    this.initClass1 = initClass1 != null ? initClass1 : 'spacing-default';\n    this.initClass2 = initClass2 != null ? initClass2 : 'spacing-default';\n    this.initStyle1 = initStyle1 != null ? initStyle1 : '';\n    this.initStyle2 = initStyle2 != null ? initStyle2 : '';\n    this.initGridOptions();\n  },\n  methods: {\n    /**\n     * ag-grid api返回的平铺数据转换成同父级map()，考虑多行表头\n     * @param {*} a 数组数据\n     * @param {*} key 判断相同父级字段\n     */\n    arrMap(a, key) {\n      var map = a.reduce((all, m) => {\n        let list = all.get(m[key]);\n        if (!list) {\n          list = [];\n          all.set(m[key], list);\n        }\n        list.push(m);\n        return all;\n      }, new Map());\n      return map;\n    },\n    /**\n      * 将原始表头数据columnDefs匹配接口返回的用户操作数据columnDefsItems(index: 顺序, hide: 隐藏, width: 宽度 , sort: 排序)\n      * @param {*} arr 原始表头数据columnDefs\n      * @param {*} ref 当前表头数组所属表头的ref值\n      * @param {*} parent arr为子级时，所属的父级元素\n      * @param {*} child 是否为子级\n      */\n    setColumnDefs(arr = this.gridColumnDefs, parent, child = false) {\n      arr.filter((item, index) => {\n        item.index = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.index : this.columnDefsItems?.[item.field]?.index;\n        item.hide = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.hide : this.columnDefsItems?.[item.field]?.hide || false;\n        item.width = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.width : this.columnDefsItems?.[item.field]?.width || item.width;\n        item.sort = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.sort : this.columnDefsItems?.[item.field]?.sort || item.sort;\n        item.pinned = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.pinned : this.columnDefsItems?.[item.field]?.pinned;\n        if (item.children) {\n          item.children = this.setColumnDefs(item.children, item, true);\n        }\n      });\n      arr.sort((a, b) => a.index < b.index ? -1 : a.index > b.index ? 1 : 0);\n      this.gridOptions.api.setColumnDefs(arr);\n      return arr;\n    },\n    setColumnDefsItems(params, columnDefsItems) {\n      const obj = {};\n      const data = params.columnApi.getAllGridColumns();\n      const arr = Array.from(this.arrMap(data, 'originalParent'));\n      arr.map((item, index) => {\n        const parent = item[0]?.colGroupDef;\n        console.log('parent', parent);\n        const children = item[1];\n        if (parent) {\n          const obj_ = {\n            field: parent.field,\n            index: index,\n            children: {}\n          };\n          if (children) {\n            children.map((child, childIndex) => {\n              const {\n                colId,\n                sort,\n                visible,\n                actualWidth\n              } = child;\n              obj_.children[colId] = {\n                index: childIndex,\n                field: colId,\n                sort: sort,\n                hide: !visible,\n                width: actualWidth,\n                headerName: child.colDef.headerName ? child.colDef.headerName : parent.headerName\n              };\n            });\n          }\n          obj[obj_.field] = obj_;\n        } else {\n          children.map((child, childIndex) => {\n            const {\n              colId,\n              sort,\n              pinned,\n              visible,\n              actualWidth\n            } = child;\n            const obj_ = {\n              pinned: pinned,\n              field: colId,\n              index: childIndex,\n              sort: sort,\n              hide: !visible,\n              width: actualWidth,\n              headerName: child.colDef.headerName\n            };\n            obj[obj_.field] = obj_;\n          });\n        }\n      });\n      this.columnDefsItems = obj;\n      this.$emit('setPrivateColumnDefs', JSON.stringify(this.columnDefsItems));\n    },\n    initGridOptions() {\n      let columnCount = 0;\n      let fillWidth = 0;\n      let _fill = 0;\n      const _this = this;\n      const fullRowType = this.fullRowType;\n      const hasSecMeter = this.columnDefs.some(item => item.children);\n      const disablePaste = this.disablePaste;\n      this.gridColumnDefs = handleGridColumnDefs(this.isSubtable, hasSecMeter, this.tableSelection, this.columnDefs, this.childAllSelect);\n      const gridOptions = {\n        // 列表隐藏/显示触发的api\n        onColumnVisible: params => {\n          params.source === 'toolPanelUi' && this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems);\n        },\n        // 列固定\n        onColumnPinned: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems);\n        },\n        // 列换位\n        onColumnMoved: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems);\n        },\n        // 列表拖拽触发的api\n        onDragStopped: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems);\n        },\n        // 列表排序触发的api\n        onSortChanged: params => {\n          console.log(this.privateColumnDefs);\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems);\n        },\n        onColumnResized: params => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode(node => {\n              const detailNode = node.detailNode;\n              detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.sizeColumnsToFit();\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi.getColumnState().filter((item, index) => {\n                  _this.gridChildColumnDefs[index].width = item.width;\n                });\n              }\n            });\n          }\n        },\n        // 开启列面板\n        sideBar: {\n          toolPanels: [{\n            id: 'columns',\n            domLayout: 'autoHeight',\n            labelDefault: 'Columns',\n            labelKey: 'columns',\n            iconKey: 'columns',\n            toolPanel: 'agColumnsToolPanel',\n            toolPanelParams: {\n              suppressRowGroups: true,\n              suppressValues: true,\n              suppressPivots: true,\n              suppressPivotMode: true,\n              suppressColumnFilter: true,\n              suppressColumnSelectAll: true,\n              suppressColumnExpandAll: true\n            }\n          }]\n        },\n        tooltipShowDelay: null,\n        tooltipHideDelay: null,\n        suppressClipboardPaste: !!(disablePaste === 'all' || disablePaste === 'parent'),\n        embedFullWidthRows: true,\n        frameworkComponents: {\n          TableInput: Vue.extend(TableInput),\n          headerSelect: Vue.extend(headerSelect),\n          parentSelect: Vue.extend(parentSelect),\n          headerDefSelect: Vue.extend(headerDefSelect),\n          defSelect: Vue.extend(defSelect),\n          imageViewer: Vue.extend(imageViewer),\n          ...this.frameworkComponents\n        },\n        context: {\n          componentParent: this,\n          rowKey: this.rowKey,\n          childRowKey: this.childRowKey,\n          childrenListKey: this.childrenListKey,\n          tableSelection: this.tableSelection,\n          onHeaderDefSelect: this.onHeaderDefSelect,\n          onDefSelect: this.onDefSelect,\n          loadDetail: this.loadDetail,\n          enableZeroValue: this.enableZeroValue\n        },\n        // rowHeight: 36,\n        headerHeight: 32,\n        defaultColDef: {\n          tooltipComponent: 'AgGridTextTooltip',\n          // cellStyle: {\n          //   'line-height': '36px'\n          // },\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        editType: fullRowType === 'all' || fullRowType === 'parent' ? 'fullRow' : null,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.('grid.others.dataLoading')}...</span>`,\n        overlayNoRowsTemplate: `<span><span>`,\n        localeText: AG_GRID_LOCALE_CN,\n        rowSelection: this.tableSelection,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        masterDetail: this.isSubtable,\n        //* *************设置固定行样式**********\n        // 公共样式已统一配置\n        // getRowStyle: (params) => {\n        //   if (params.node.rowPinned) {\n        //     return { 'color': '#3e8ddc', 'border-top': '2px solid #3e8ddc !important', 'font-weight': '600', 'border-bottom': '0' }\n        //   }\n        // },\n        isRowMaster: dataItem => {\n          const hasLoadDetail = typeof this.loadDetail === 'function';\n          return this.isSubtable && dataItem[this.childrenListKey] && dataItem[this.childrenListKey].length || hasLoadDetail;\n        },\n        onRowClicked: params => {\n          this.stopChildEditing();\n          this.$emit('rowClicked', params);\n        },\n        onRowDoubleClicked: params => {\n          const path = params.event.path || [];\n          const el = path.length ? path[0] : null;\n          if (el && el.className.includes('ag-icon')) {\n            return;\n          }\n          this.$emit('rowDoubleClicked', params);\n        },\n        onCellValueChanged: params => {\n          this.refreshTable();\n          this.$emit('cellValueChanged', params);\n        },\n        onCellEditingStopped: params => {\n          this.$emit('cellEditingStopped', params);\n        },\n        onRowValueChanged: params => {\n          this.$emit('rowValueChanged', params);\n        },\n        onRowGroupOpened: params => {\n          params.expanded ? columnCount++ : columnCount--;\n          if (_fill === 0) {\n            fillWidth = params.columnApi.getColumnState()[params.columnApi.getColumnState().length - 1].width;\n            _fill = 1;\n          }\n          columnCount === 0 && gridOptions.columnApi.setColumnWidth('fill', fillWidth, true);\n          this.$emit('rowGroupOpened', params);\n        },\n        onColumnResized: params => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode(node => {\n              const detailNode = node.detailNode;\n              detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.sizeColumnsToFit();\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi.getColumnState().filter((item, index) => {\n                  _this.gridChildColumnDefs[index].width = item.width;\n                });\n              }\n            });\n          }\n        },\n        ...this.additionalOptions\n      };\n      if (this.isSubtable) {\n        gridOptions.masterDetail = true;\n        // 子表配置\n        gridOptions.detailCellRendererParams = {\n          detailGridOptions: {\n            suppressClipboardPaste: !!(disablePaste === 'all' || disablePaste === 'child'),\n            suppressHorizontalScroll: false,\n            frameworkComponents: {\n              childHeaderSelect: Vue.extend(childHeaderSelect),\n              TableInput: Vue.extend(TableInput),\n              childSelect: Vue.extend(childSelect),\n              imageViewer: Vue.extend(imageViewer),\n              ..._this.frameworkComponents\n            },\n            columnDefs: handleGridChildColumnDefs(hasSecMeter, this.tableSelection, this.gridChildColumnDefs, this.childAllSelect),\n            context: gridOptions.context,\n            // rowHeight: 36,\n            headerHeight: 33,\n            defaultColDef: {\n              // cellStyle: {\n              //   'line-height': '36px'\n              // },\n              filter: true,\n              sortable: true,\n              resizable: true,\n              suppressMenu: true // 子表不显示头部菜单\n            },\n\n            editType: fullRowType === 'all' || fullRowType === 'child' ? 'fullRow' : null,\n            overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.('grid.others.dataLoading')}...</span>`,\n            overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.('grid.others.noData')}<span>`,\n            localeText: AG_GRID_LOCALE_CN,\n            rowSelection: 'multiple',\n            suppressRowClickSelection: true,\n            enableRangeSelection: true,\n            onRowClicked: params => {\n              this.$emit('childRowClicked', params);\n            },\n            onRowDoubleClicked: params => {\n              this.$emit('childRowDoubleClicked', params);\n            },\n            onCellEditingStarted: params => {\n              // 清空其他子级编辑 全行编辑 不执行\n              if (!(fullRowType === 'all' || fullRowType === 'child')) {\n                _this.stopChildEditing(params.data.parentId);\n              }\n            },\n            onCellEditingStopped: params => {\n              this.$emit('childCellEditingStopped', params);\n            },\n            onCellValueChanged: params => {\n              this.refreshTable();\n              this.$emit('childCellValueChanged', params);\n            },\n            onRowEditingStarted: params => {\n              // 清空其他子级编辑\n              _this.stopChildEditing(params.data.parentId);\n            },\n            onRowValueChanged: params => {\n              this.$emit('childRowValueChanged', params);\n            },\n            onGridReady: function (params) {\n              if (this.isSizeColumnsToFit) {\n                params.columnApi.sizeColumnsToFit();\n              } else {\n                columnCount === 1 && setTimeout(() => {\n                  _this.columnWidth = fillWidth + params.columnApi.columnModel.bodyWidth - params.columnApi.columnModel.scrollWidth;\n                  gridOptions.columnApi.setColumnWidth('fill', _this.columnWidth, true);\n                  params.columnApi.getColumnState().filter((item, index) => {\n                    _this.gridChildColumnDefs[index] && (_this.gridChildColumnDefs[index].width = params.columnApi.getColumnState()[index + 1].width);\n                  });\n                }, 300);\n              }\n              _this.$emit('childReady');\n            },\n            onColumnResized: function (params) {\n              if (params.source === 'uiColumnDragged' && params.finished) {\n                _this.columnWidth = _this.columnWidth + params.columnApi.columnController.bodyWidth - params.columnApi.columnController.scrollWidth;\n                gridOptions.columnApi.setColumnWidth('fill', _this.columnWidth, true);\n                gridOptions.api.forEachNode(node => {\n                  const detailNode = node.detailNode;\n                  detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.columnApi.setColumnWidth(params.columns[0].colId, params.columns[0].actualWidth, true);\n                });\n                _this.childColumnDefs_.filter((item, index) => {\n                  if (item.field === params.columns[0].colId) {\n                    _this.childColumnDefs_[index].width = params.columns[0].actualWidth;\n                  }\n                });\n              }\n            },\n            ...this.detailOptions\n          },\n          getDetailRowData: async params => {\n            const {\n              childrenListKey,\n              childRowKey\n            } = this;\n            if (typeof this.loadDetail === 'function') {\n              params.data[childrenListKey] = await this.loadDetail(params.data);\n            }\n            if (params.data[childrenListKey]) {\n              const callRecords = params.data[childrenListKey].map(item => {\n                return {\n                  ...item,\n                  parentId: params.node.parent.id\n                };\n              });\n              if (params.data._selected) {\n                params.data._selectedKeys = params.data[childrenListKey].map(item => {\n                  if (!item._selectedDisabled) {\n                    return item[childRowKey];\n                  }\n                });\n              }\n              new Promise(r => {\n                params.successCallback(callRecords);\n                r(callRecords);\n              }).then(() => {\n                if (this.gridOptions.embedFullWidthRows) {\n                  this.handleDetailRow(params, callRecords, params.data._selectedKeys.length === callRecords.length);\n                }\n              });\n            } else {\n              params.successCallback([]);\n            }\n          }\n        };\n      }\n      this.gridOptions = gridOptions;\n      if (typeof this.getPrivateColumnDefs === 'function' && this.privateColumnDefs) {\n        this.getPrivateColumnDefs().then(res => {\n          this.columnDefsItems = res;\n          JSON.stringify(res) !== \"{}\" && this.setColumnDefs();\n        });\n      }\n    },\n    handleDetailRow(params, callRecords, isSelectAll) {\n      if (!callRecords.length) return;\n      const cLength = callRecords.length;\n      const parentRowIndex = params.node.parent.id;\n      this.$nextTick(() => {\n        const queryNode = '.ag-pinned-left-cols-container .ag-details-row';\n        const detail_row = document.querySelectorAll(queryNode);\n        if (!detail_row.length) return;\n        let el = null;\n        Array.from(detail_row).forEach(item => {\n          const row_id = item.parentElement.attributes['row-id'].value;\n          const parentId = `detail_${parentRowIndex}`;\n          el = row_id === parentId ? item : null;\n        });\n        if (!el) return;\n        this.insertDom(el, cLength, isSelectAll);\n      });\n    },\n    insertDom(el, cLength, isSelectAll) {\n      const commonClass = ['ag-row-no-focus', 'ag-row', 'ag-row-level-1', 'ag-row-position-absolute', 'ag-row-first', 'customer-dom'];\n      isSelectAll ? commonClass.push(...['ag-row-focus', 'ag-row-selected']) : null;\n      const createChildRowElement = (evenOdd, commonClass, style) => {\n        const div = document.createElement('div');\n        div.classList.add(...[...commonClass, evenOdd]);\n        div.style = style;\n        return div;\n      };\n      //\n      const element = this.$el.querySelector('.ag-theme-balham');\n      const styles = window.getComputedStyle(element);\n      const rowHeight = Number(styles.getPropertyValue('--ag-grid-row-height').replace('rem', '') * 100);\n      const firstTop = rowHeight - 2;\n      const perTop = rowHeight;\n      const fragment = document.createDocumentFragment();\n      for (let i = 0; i < cLength; i++) {\n        let evenOdd = null;\n        evenOdd = (i & 1) === 0 ? 'ag-row-even' : 'ag-row-odd';\n        const top = firstTop + i * perTop + 'px';\n        const style = `top:${top}`;\n        fragment.appendChild(createChildRowElement(evenOdd, commonClass, style));\n      }\n      el.appendChild(fragment);\n    },\n    handlePinnedBottomRowData(newValue) {\n      if (typeof this.handleDetailCount === 'function') {\n        newValue.forEach((item, index) => {\n          const rowNode = this.gridApi.getDetailGridInfo(`detail_${index}`);\n          if (item._selectedKeys.length > 0) {\n            const childSelectedList = [];\n            for (const childRowKey of item._selectedKeys) {\n              const selectedItem = item[this.childrenListKey].find(el => {\n                return el[this.childRowKey] === childRowKey;\n              });\n              childSelectedList.push(selectedItem);\n            }\n            rowNode && rowNode.api.setPinnedBottomRowData([{\n              _childCount: this.handleDetailCount(childSelectedList)\n            }]);\n          } else {\n            rowNode && rowNode.api.setPinnedBottomRowData([]);\n          }\n        });\n      }\n    },\n    handlSelectionChange() {\n      const selectedNodes = this.gridApi.getSelectedNodes();\n      const selectedKeys = selectedNodes.map(item => item.data[this.rowKey]);\n      this.rowData.forEach(item => {\n        if (selectedKeys.includes(item[this.rowKey])) {\n          item._selected = true;\n        } else {\n          item._selected = false;\n        }\n      });\n    },\n    initDataSelectState(arr) {\n      return arr.map(item => {\n        item._selected = false;\n        item._selectedKeys = [];\n        return item;\n      });\n    },\n    getSelectedData(func, type = null) {\n      setTimeout(() => {\n        const newRowData = deepClone(this.rowData);\n        const filterSelectedData = newRowData.map((element, index) => {\n          return {\n            rowIndex: index + 1,\n            ...element\n          };\n        }).filter(item => {\n          return (item._selected || (item._selectedKeys ? item._selectedKeys.length : false)) && (this.childRowKey ? !!(item[this.childrenListKey] && item[this.childrenListKey].length) : true);\n        });\n        if (this.childRowKey) {\n          // 过滤子级\n          const rowData = filterSelectedData.map(item => {\n            item[this.childrenListKey] = item[this.childrenListKey].filter(child => item._selectedKeys.includes(child[this.childRowKey]));\n            return item;\n          });\n          // 返回子级合集\n          if (type === 'margeChild') {\n            return func(this.initDataSelectState(rowData.reduce((prev, next) => {\n              return prev.concat(next[this.childrenListKey]);\n            }, [])));\n          }\n          if (type === 'delete') {\n            const masterData = [];\n            const childData = [];\n            newRowData.forEach(item => {\n              if (item._selected) {\n                masterData.push(item);\n              } else if (item._selectedKeys ? item._selectedKeys.length : false) {\n                childData.push(item);\n              }\n            });\n            return func({\n              masterData: masterData,\n              childData: childData\n            });\n          }\n          return func(this.initDataSelectState(rowData));\n        }\n        func(this.tableSelection === 'single' ? this.initDataSelectState(filterSelectedData)[0] : this.initDataSelectState(filterSelectedData));\n      }, 0);\n    },\n    // 清空选中\n    clearSelection() {\n      this.rowData.forEach(item => {\n        item._selected = false;\n        item._selectedKeys = [];\n      });\n      this.refreshTable();\n    },\n    handleGridHeight(dataLength) {\n      // autoHeight=true\n      // 1、高度为自适应\n      // 2、没数据100\n      // 3、有高度 高于15条设为高度 heightinif\n      const gridHeight = this.heightinif;\n      if (this.autoHeight) {\n        if (+dataLength === 0) {\n          const headerHeight = this.headerTotal ? 34 : 0;\n          const footerHeight = this.footerTotal ? 32 : 0;\n          const paginationHeight = this.paginationinif ? 34 : 0;\n          this.gridHeight = 100 + headerHeight + footerHeight + paginationHeight;\n        } else if (+dataLength >= 15 && gridHeight) {\n          this.gridHeight = gridHeight;\n        } else {\n          this.gridHeight = 0;\n          this.$refs.stGrid.$el.style.height = 'auto';\n          this.gridApi.setDomLayout('autoHeight');\n        }\n      }\n    },\n    // 加载表格数据 不传参数从第一页\n    loadTableData(pagination) {\n      if (typeof this.loadData === 'function') {\n        if (this.showLoading) {\n          this.gridOptions.api.showLoadingOverlay();\n          this.gridOptions.overlayNoRowsTemplate = `<span class=\"ag-overlay-loading-center\">${this.$t?.('grid.others.noData')}<span>`;\n        }\n        const nextPagination = {\n          ...this.pagination,\n          page: this.hasZeroPagination_ ? 0 : 1,\n          ...pagination\n        };\n        this.loadData(nextPagination).then((data, heightCount) => {\n          let total = 0;\n          if (typeof data === 'number') {\n            total = data;\n          } else if (data && data.totalElements) {\n            total = data.totalElements;\n          } else if (data && data.length) {\n            total = data.length;\n          }\n          if (total === 0) {\n            this.gridApi.showNoRowsOverlay();\n          }\n          this.handleGridHeight(heightCount || total);\n          this.pagination.total = total;\n          this.pagination.page = nextPagination.page;\n          this.pagination.limit = nextPagination.limit;\n        }).catch(() => {\n          this.handleGridHeight(0);\n          this.gridApi.showNoRowsOverlay();\n          console.error(`请检查loadData`);\n        });\n      }\n    },\n    // 重新加载\n    reloadTableData() {\n      this.loadTableData(this.pagination);\n    },\n    // 刷新aggrid表格\n    refreshTable() {\n      this.gridApi.forEachNode(node => {\n        const detailNode = node.detailNode;\n        detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.refreshCells({\n          force: true\n        });\n      });\n      this.gridApi.refreshCells({\n        force: true\n      });\n    },\n    // 取消所有子表编辑状态\n    stopChildEditing(parentId = null) {\n      this.gridApi.forEachNode(node => {\n        const detailNode = node.detailNode;\n        if (node.id !== parentId) {\n          detailNode && detailNode.detailGridInfo && detailNode.detailGridInfo.api.stopEditing();\n        }\n      });\n    },\n    // isAutoSizeColumnsHeader\n    // isAutoSizeColumns\n    onGridReady(params) {\n      this.gridApi = params.api;\n      this.columnApi = params.columnApi;\n      if (this.isSizeColumnsToFit) {\n        this.gridApi.sizeColumnsToFit();\n      }\n      if (this.isAutoSizeColumns || this.isAutoSizeColumnsHeader) {\n        this.handleAutoSizeColumns();\n      }\n      if (this.autoLoadData) {\n        this.loadTableData();\n      }\n      const element = this.$el.querySelector('.ag-theme-balham');\n      this.DomObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (mutation.attributeName === 'class') {\n            const styles = window.getComputedStyle(element);\n            const rowHeight = styles.getPropertyValue('--ag-grid-row-height');\n            this.gridApi.forEachNode(item => {\n              item.setRowHeight(Number(rowHeight.replace('rem', '') * 100));\n            });\n            this.gridApi.onRowHeightChanged();\n          }\n        });\n      });\n      this.DomObserver.observe(element, {\n        attributes: true\n      });\n      this.$emit('gridReady', params);\n    },\n    getAutoSizeFnSkipHeaderParams() {\n      const c = this.isAutoSizeColumns;\n      const ch = this.isAutoSizeColumnsHeader;\n      // 两者设置则错误提示，默认不跳过header的自适应\n      if (c && ch) {\n        console.error('isAutoSizeColumns与isAutoSizeColumnsHeader属性仅能设置一个');\n        return false;\n      }\n      //   isAutoSizeColumns true  and isAutoSizeColumnsHeader false  skipheader = true\n      //   isAutoSizeColumns false  and isAutoSizeColumnsHeader true  skipheader = false\n      return !ch && c ? true : !(ch && !c);\n    },\n    handleAutoSizeColumns() {\n      const allColumnIds = [];\n      this.columnApi.getColumns().forEach(column => {\n        allColumnIds.push(column.getId());\n      });\n      // 获取 skipheader参数\n      this.columnApi.autoSizeColumns(allColumnIds, this.getAutoSizeFnSkipHeaderParams()); // 是否跳过header\n    },\n\n    pageChange(pagination) {\n      this.pagination.page = pagination.page;\n      this.pagination.limit = pagination.limit;\n      this.$emit('pageChange', pagination);\n      this.reloadTableData(pagination);\n    },\n    setAgContext(key, ctx) {\n      this.gridOptions.context[key] = ctx;\n    },\n    setAgDetailContext(key, ctx) {\n      this.gridOptions.detailCellRendererParams.detailGridOptions.context[key] = ctx;\n    }\n  }\n};","map":{"version":3,"names":["Vue","AgGridVue","AllModules","AG_GRID_LOCALE_CN","childHeaderSelect","childSelect","headerSelect","parentSelect","headerDefSelect","defSelect","TableInput","imageViewer","gridTotal","localPagination","AgGridTextTooltip","AgGridWrap","AgSelect","AgGridSelect","AgInputSelect","AgGridText","AgGridInputNumber","AgGridInputDialog","AgGridInput","AgGridDate","handleGridColumnDefs","handleGridChildColumnDefs","deepClone","name","components","props","paginationinif","type","Boolean","default","defaultPage","Number","String","defaultPerPageSize","Array","defaultPageSize","heightinif","autoHeight","minHeight","columnDefs","tooltipShowDelay","frameworkComponents","Object","rowData","tableSelection","validator","value","indexOf","isSizeColumnsToFit","autoLoadData","rowKey","required","loadData","Function","isSubtable","childColumnDefs","childrenListKey","childRowKey","childAllSelect","loadDetail","handleDetailCount","headerTotal","footerTotal","fullRowType","disablePaste","applyColumnDefOrder","additionalOptions","detailOptions","showLoading","isAutoSizeColumns","hasZeroPagination","isAutoSizeColumnsHeader","enableZeroValue","privateColumnDefs","getPrivateColumnDefs","data","originColumnDefs","columnDefsItems","DomObserver","initClass1","initClass2","initStyle1","initStyle2","gridShow","gridApi","columnApi","gridOptions","gridColumnDefs","gridChildColumnDefs","childColumnDefs_","columnWidth","gridHeight","pagination","total","page","limit","onHeaderDefSelect","selected","$emit","onDefSelect","params","computed","hasZeroPagination_","gridStyle","style","height","scrollStyle","userAgent","navigator","toLowerCase","preg","RegExp","test","defaultColDef","tooltipComponent","watch","newVal","oldVal","initGridOptions","$nextTick","deep","handler","newValue","oldValue","forEachNode","v","_selectedKeys","_selected","length","setSelected","detailNode","detailGridInfo","api","o","oState","handleGridHeight","handlePinnedBottomRowData","beforeDestroy","disconnect","created","localStorage","getItem","methods","arrMap","a","key","map","reduce","all","m","list","get","set","push","Map","setColumnDefs","arr","parent","child","filter","item","index","field","children","hide","width","sort","pinned","b","setColumnDefsItems","obj","getAllGridColumns","from","colGroupDef","console","log","obj_","childIndex","colId","visible","actualWidth","headerName","colDef","JSON","stringify","columnCount","fillWidth","_fill","_this","hasSecMeter","some","onColumnVisible","source","onColumnPinned","onColumnMoved","onDragStopped","onSortChanged","onColumnResized","finished","node","sizeColumnsToFit","getColumnState","sideBar","toolPanels","id","domLayout","labelDefault","labelKey","iconKey","toolPanel","toolPanelParams","suppressRowGroups","suppressValues","suppressPivots","suppressPivotMode","suppressColumnFilter","suppressColumnSelectAll","suppressColumnExpandAll","tooltipHideDelay","suppressClipboardPaste","embedFullWidthRows","extend","context","componentParent","headerHeight","sortable","resizable","editType","overlayLoadingTemplate","$t","overlayNoRowsTemplate","localeText","rowSelection","suppressRowClickSelection","enableRangeSelection","masterDetail","isRowMaster","dataItem","hasLoadDetail","onRowClicked","stopChildEditing","onRowDoubleClicked","path","event","el","className","includes","onCellValueChanged","refreshTable","onCellEditingStopped","onRowValueChanged","onRowGroupOpened","expanded","setColumnWidth","detailCellRendererParams","detailGridOptions","suppressHorizontalScroll","suppressMenu","onCellEditingStarted","parentId","onRowEditingStarted","onGridReady","setTimeout","columnModel","bodyWidth","scrollWidth","columnController","columns","getDetailRowData","callRecords","_selectedDisabled","Promise","r","successCallback","then","handleDetailRow","res","isSelectAll","cLength","parentRowIndex","queryNode","detail_row","document","querySelectorAll","forEach","row_id","parentElement","attributes","insertDom","commonClass","createChildRowElement","evenOdd","div","createElement","classList","add","element","$el","querySelector","styles","window","getComputedStyle","rowHeight","getPropertyValue","replace","firstTop","perTop","fragment","createDocumentFragment","i","top","appendChild","rowNode","getDetailGridInfo","childSelectedList","selectedItem","find","setPinnedBottomRowData","_childCount","handlSelectionChange","selectedNodes","getSelectedNodes","selectedKeys","initDataSelectState","getSelectedData","func","newRowData","filterSelectedData","rowIndex","prev","next","concat","masterData","childData","clearSelection","dataLength","footerHeight","paginationHeight","$refs","stGrid","setDomLayout","loadTableData","showLoadingOverlay","nextPagination","heightCount","totalElements","showNoRowsOverlay","catch","error","reloadTableData","refreshCells","force","stopEditing","handleAutoSizeColumns","MutationObserver","mutations","mutation","attributeName","setRowHeight","onRowHeightChanged","observe","getAutoSizeFnSkipHeaderParams","c","ch","allColumnIds","getColumns","column","getId","autoSizeColumns","pageChange","setAgContext","ctx","setAgDetailContext"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/AgGrid/src/index.vue"],"sourcesContent":["<!--\n    @component steelTradeAggrid 钢贸aggrid表格组件\n    @props\n        {Array} columnDefs - 主表列配置  []\n        {Array} rowData - 表格数据 []\n        {String} tableSelection 选择模式 null\n        {Boolean} autoLoadData 表格加载完成第一次自动加载数据\n        {String} rowKey 行唯一键值(例如sId) 必填\n        {Boolean} isSubtable 是否主子表 false\n        {Array} childColumnDefs 子表列配置 []\n        {String} childrenListKey 子表数据存在的key '_details'\n        {String} childRowKey 子表键值 若拥有子表必填 ''\n        {Boolean} childAllSelect 子表是否可以全选\n        {Function} loadDetail 懒加载子表方法 需要返回promise {}\n        {Array} headerTotal 头部合计数组 具体参考本文件夹gridTotal的countList参数\n        {Array} footerTotal 底部合计数组 具体参考本文件夹gridTotal的countList参数\n        {Funciton} handleDetailCount 子表合计方法 入参{detail object}详情对象 需要返回 Array\n          [{ count: 1,key:'count' },\n          { title: '已到票未到货数量', count: 3, unit: '吨' },\n          { title: '金额', count: 3, unit: '元' }]\n        {String} fullRowType 全行编辑配置 null 可配置all parent child\n    @events\n        {Object} rowClicked 主表点击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} rowDoubleClicked 主表双击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} childRowClicked 子表点击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} childRowDoubleClicked 子表双击行回调\n            @param {Object} 行以及aggrid源生返回数据\n        {Object} selectedChange rowData watch\n            @param {Array} 选中数据\n    @methods\n        {Function} clearSelection 清空选中\n        {Function} refreshTable 刷新表格\n        {Function} pageChange 调用传入{page: 0, limit: 20}即初始化分页重新获取\n        {Function} getSelectedData 调用返回表格选中数据 若传入margeChild则返回所选所有子级的合集\n        {Function} stopChildEditing 取消所有子表编辑状态\n    @author 青木/KYUUTA\n    @date 2020-12-15 11:00:25\n    @update 2021-02-01 17:07:20\n-->\n<template>\n  <ag-grid-wrap\n    v-if=\"gridShow\"\n    ref=\"stGrid\"\n    class=\"steel-trade-aggrid\"\n    :style=\"gridStyle\"\n  >\n    <div\n      v-if=\"rowData.length > 0 && ($slots.header || headerTotal)\"\n      class=\"steel-trade-aggrid-row steel-trade-aggrid-header\"\n    >\n      <slot v-if=\"$slots.header\" name=\"header\" />\n      <gridTotal v-else flag=\"header\" :count-list=\"headerTotal\" />\n    </div>\n    <ag-grid-vue\n      :class=\"[\n        'table',\n        'ag-theme-balham',\n        'grid-class',\n        'master-detail',\n        scrollStyle,\n        initClass1,\n        initClass2,\n      ]\"\n      :style=\"`height: 100%;${initStyle1};${initStyle2}`\"\n      :grid-options=\"gridOptions\"\n      :column-defs=\"gridColumnDefs\"\n      :row-data=\"rowData\"\n      :modules=\"AllModules\"\n      :detail-row-auto-height=\"isSubtable\"\n      :apply-column-def-order=\"applyColumnDefOrder\"\n      :tooltip-show-delay=\"tooltipShowDelay\"\n      v-bind=\"$attrs\"\n      @grid-ready=\"onGridReady\"\n      @selection-changed=\"handlSelectionChange\"\n    />\n    <local-pagination\n      v-if=\"paginationinif\"\n      :total=\"pagination.total\"\n      :page=\"pagination.page\"\n      :limit=\"pagination.limit\"\n      :event=\"pageChange\"\n      :page-sizes=\"defaultPerPageSize\"\n      :has-zero-pagination=\"hasZeroPagination_\"\n    >\n      <template slot=\"pagination-left\">\n        <div\n          v-if=\"$slots.footer || footerTotal\"\n          class=\"steel-trade-aggrid-row steel-trade-aggrid-footer\"\n        >\n          <slot v-if=\"$slots.footer\" name=\"footer\" />\n          <gridTotal v-else flag=\"footer\" :count-list=\"footerTotal\" />\n        </div>\n      </template>\n    </local-pagination>\n    <div  class=\"steel-trade-aggrid-row steel-trade-aggrid-footer\" v-else-if=\"paginationinif=== false && footerTotal\">\n      <div class=\"total-without-pagination flexC pl-20\" >\n        <gridTotal  flag=\"footer\" :count-list=\"footerTotal\" />\n      </div>\n    </div>\n  </ag-grid-wrap>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { AgGridVue } from 'ag-grid-vue'\nimport { AllModules } from 'ag-grid-enterprise'\nimport { AG_GRID_LOCALE_CN } from '../../../../lib/lang/ag-grid.zh.js'\nimport childHeaderSelect from '../../AgGridExtend/childHeaderSelect'\nimport childSelect from '../../AgGridExtend/childSelect'\nimport headerSelect from '../../AgGridExtend/headerSelect'\nimport parentSelect from '../../AgGridExtend/parentSelect'\nimport headerDefSelect from '../../AgGridExtend/headerDefSelect'\nimport defSelect from '../../AgGridExtend/defSelect'\nimport TableInput from './TableInput.vue'\nimport imageViewer from './imageViewer.vue'\nimport gridTotal from './gridTotal'\nimport localPagination from '../../Pagination/index.js'\nimport AgGridTextTooltip from '../../AgGridTextTooltip/index'\nimport AgGridWrap from '../../AgGridWrap/index.js'\n\nimport {\n  AgSelect,\n  AgGridSelect,\n  AgInputSelect,\n  AgGridText,\n  AgGridInputNumber,\n  AgGridInputDialog,\n  AgGridInput,\n  AgGridDate\n} from '../../ForGridComponents/cell-editor'\nimport { handleGridColumnDefs, handleGridChildColumnDefs } from './columnDefs'\n\nimport { deepClone } from './utils.js'\n\nimport '../../../../lib/styles/components/CommonAgGrid.scss'\n\nexport default {\n  name: 'AgGrid',\n  components: {\n    AgGridVue,\n    gridTotal,\n    imageViewer,\n    localPagination,\n    AgGridTextTooltip,\n    AgSelect,\n    AgGridSelect,\n    AgInputSelect,\n    AgGridText,\n    AgGridInputNumber,\n    AgGridInputDialog,\n    AgGridInput,\n    AgGridDate,\n    AgGridWrap\n  },\n  props: {\n    // 是否需要分页\n    paginationinif: {\n      type: Boolean,\n      default: true\n    },\n    // 默认页数\n    defaultPage: {\n      type: [Number, String],\n      default: 0\n    },\n    // 默认每个页码\n    defaultPerPageSize: {\n      type: Array,\n      default: () => [10, 20, 30, 50, 100, 200]\n    },\n    // 默认页码\n    defaultPageSize: {\n      type: [Number, String],\n      default: 30\n    },\n    // heightinif 表格高度\n    heightinif: {\n      type: [Number, String],\n      default: 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: false\n    },\n    // autoHeight为true时，minHeight生效 无效\n    minHeight: {\n      type: [Number, String],\n      default: 100\n    },\n    // 主标列配置\n    columnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 提示显示延迟几毫毛\n    tooltipShowDelay: {\n      type: Number,\n      default: 0\n    },\n    frameworkComponents: {\n      type: Object,\n      default: () => {}\n    },\n    // 表格数据\n    rowData: {\n      type: Array,\n      default: () => []\n    },\n    // 选择模式\n    tableSelection: {\n      type: String,\n      default: null,\n      validator: function(value) {\n        return ['single', 'multiple', null].indexOf(value) !== -1\n      }\n    },\n    // 自适应\n    isSizeColumnsToFit: {\n      type: Boolean,\n      default: false\n    },\n    // 自动加载数据\n    autoLoadData: {\n      type: Boolean,\n      default: true\n    },\n    // 行唯一键值\n    rowKey: {\n      type: String,\n      required: true\n    },\n    // 加载事件用于翻页\n    loadData: {\n      type: Function,\n      default: null\n    },\n    // 是否主子表\n    isSubtable: {\n      type: Boolean,\n      default: false\n    },\n    // 子表列配置\n    childColumnDefs: {\n      type: Array,\n      default: () => []\n    },\n    // 子表数据存放属性\n    childrenListKey: {\n      type: String,\n      default: '_details'\n    },\n    // 子表键值\n    childRowKey: {\n      type: String,\n      default: ''\n    },\n    // 子表是否可以全选\n    childAllSelect: {\n      type: Boolean,\n      default: false\n    },\n    // 懒加载子表方法\n    loadDetail: {\n      type: Function,\n      default: null\n    },\n    // 子表合集的处理函数\n    handleDetailCount: {\n      type: [Function, Object],\n      default: null\n    },\n    // 头部合计\n    headerTotal: {\n      type: Array,\n      default: null\n    },\n    // 底部合计\n    footerTotal: {\n      type: Array,\n      default: null\n    },\n    // 是否全行编辑 all parent child\n    fullRowType: {\n      type: String,\n      default: null\n    },\n    // 是否禁用黏贴 all parent child\n    disablePaste: {\n      type: String,\n      default: null\n    },\n    // 重新设置表头 恢复排序\n    applyColumnDefOrder: {\n      type: Boolean,\n      default: true\n    },\n    additionalOptions: {\n      type: Object,\n      default: () => {}\n    },\n    detailOptions: {\n      type: Object,\n      default: () => {}\n    },\n    // 加载数据时展示 loading\n    showLoading: {\n      type: Boolean,\n      default: true\n    },\n    // 自适应列宽度，跳过对列标题的处理\n    isAutoSizeColumns: {\n      type: Boolean,\n      default: false\n    },\n    // 后端接口页码是否 0 开始\n    hasZeroPagination: {\n      type: Boolean,\n      default: false\n    },\n    // 自适应列宽度，不跳过对列标题的处理\n    isAutoSizeColumnsHeader: {\n      type: Boolean,\n      default: false\n    },\n    enableZeroValue: {\n      type: Boolean,\n      default: false\n    },\n    // 是否保存用户个性化操作配置\n    privateColumnDefs: {\n      type: Boolean,\n      default: false\n    },\n    // 获取个性化配置\n    getPrivateColumnDefs: {\n      type: Function,\n      default: null\n    },\n  },\n  data() {\n    return {\n      originColumnDefs: {}, // 页面最初的列定义\n      columnDefsItems: [], // 接口返回用户操作对象\n      DomObserver: null,\n      initClass1: '',\n      initClass2: '',\n      initStyle1: '',\n      initStyle2: '',\n      AllModules,\n      gridShow: true,\n      gridApi: null,\n      columnApi: null,\n      gridOptions: null,\n      gridColumnDefs: [],\n      gridChildColumnDefs: [],\n      childColumnDefs_: [],\n      columnWidth: 0,\n      gridHeight: 0,\n      pagination: {\n        total: 0,\n        page: 0,\n        limit: 30\n      },\n      onHeaderDefSelect: (selected) => {\n        this.$emit('headerSelected', selected)\n      },\n      onDefSelect: (params, selected) => {\n        this.$emit('rowSelected', params, selected)\n      }\n    }\n  },\n  computed: {\n    hasZeroPagination_() {\n      return this.hasZeroPagination || this.defaultPage === 0\n    },\n    gridStyle() {\n      const style = {}\n      const gridHeight = +this.gridHeight\n      if (gridHeight > 0) {\n        style.height = `${gridHeight}px`\n      }\n      return style\n    },\n    scrollStyle() {\n      const userAgent = navigator.userAgent.toLowerCase()\n      const preg = new RegExp('windows|win32|win64|wow32|wow64', 'g')\n      return preg.test(userAgent) ? 'scroll-style' : ''\n    },\n    defaultColDef() {\n      return {\n        tooltipComponent: 'AgGridTextTooltip',\n        ...this.gridOptions.AgGridTextTooltip\n      }\n    }\n  },\n  watch: {\n    fullRowType(newVal, oldVal) {\n      this.gridShow = false\n      this.initGridOptions()\n      this.$nextTick(() => {\n        this.gridShow = true\n      })\n    },\n    rowData: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (this.gridApi) {\n          this.$nextTick(() => {\n            this.gridApi.forEachNode((v) => {\n              const _selectedKeys = v.data._selectedKeys || []\n              const _selected = v.data._selected || _selectedKeys.length > 0\n              v.selected = !_selected\n              v.setSelected(_selected, true, true)\n              if (v.detailNode && v.detailNode.detailGridInfo) {\n                v.detailNode.detailGridInfo.api.forEachNode((o) => {\n                  const oState =\n                    _selectedKeys.indexOf(o.data[this.childRowKey]) !== -1\n                  o.selected = !oState\n                  o.setSelected(oState, true, true)\n                })\n              }\n            })\n          })\n        }\n        this.$emit('selectedChange', newValue)\n        if (newValue.length <= 1) {\n          this.handleGridHeight(newValue.length)\n        }\n        this.handlePinnedBottomRowData(newValue)\n      }\n    }\n  },\n  beforeDestroy() {\n    this.DomObserver && this.DomObserver.disconnect()\n  },\n  created() {\n    this.pagination.page = this.defaultPage\n    this.pagination.limit = this.defaultPageSize\n    this.gridChildColumnDefs = this.childColumnDefs\n    if (!this.autoHeight) {\n      this.gridHeight = this.heightinif\n    }\n    const initClass1 = localStorage.getItem('spaceClass')\n    const initClass2 = localStorage.getItem('themeClass')\n    const initStyle1 = localStorage.getItem('agColorStyle')\n    const initStyle2 = localStorage.getItem('agSpaceStyle')\n    this.initClass1 = initClass1 != null ? initClass1 : 'spacing-default'\n    this.initClass2 = initClass2 != null ? initClass2 : 'spacing-default'\n    this.initStyle1 = initStyle1 != null ? initStyle1 : ''\n    this.initStyle2 = initStyle2 != null ? initStyle2 : ''\n    this.initGridOptions()\n  },\n  methods: {\n    /**\n     * ag-grid api返回的平铺数据转换成同父级map()，考虑多行表头\n     * @param {*} a 数组数据\n     * @param {*} key 判断相同父级字段\n     */\n    arrMap(a, key) {\n      var map = a.reduce((all, m) => {\n        let list = all.get(m[key])\n        if (!list) {\n          list = []\n          all.set(m[key], list)\n        }\n        list.push(m)\n        return all\n      }, new Map())\n      return map\n    },\n    /**\n      * 将原始表头数据columnDefs匹配接口返回的用户操作数据columnDefsItems(index: 顺序, hide: 隐藏, width: 宽度 , sort: 排序)\n      * @param {*} arr 原始表头数据columnDefs\n      * @param {*} ref 当前表头数组所属表头的ref值\n      * @param {*} parent arr为子级时，所属的父级元素\n      * @param {*} child 是否为子级\n      */\n    setColumnDefs(arr = this.gridColumnDefs, parent, child = false) {\n      arr.filter((item, index) => {\n        item.index = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.index : this.columnDefsItems?.[item.field]?.index\n        item.hide = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.hide : this.columnDefsItems?.[item.field]?.hide || false\n        item.width = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.width : this.columnDefsItems?.[item.field]?.width || item.width\n        item.sort = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.sort : this.columnDefsItems?.[item.field]?.sort || item.sort\n        item.pinned = child ? this.columnDefsItems?.[parent.field]?.children?.[item.field]?.pinned : this.columnDefsItems?.[item.field]?.pinned\n        if (item.children) {\n          item.children = this.setColumnDefs(item.children, item, true)\n        }\n      })\n      arr.sort((a, b) => a.index < b.index ? -1 : a.index > b.index ? 1 : 0)\n      this.gridOptions.api.setColumnDefs(arr)\n      return arr\n    },\n    setColumnDefsItems(params, columnDefsItems) {\n      const obj = {}\n      const data = params.columnApi.getAllGridColumns()\n      const arr = Array.from(this.arrMap(data, 'originalParent'))\n      arr.map((item, index) => {\n        const parent = item[0]?.colGroupDef\n        console.log('parent', parent)\n        const children = item[1]\n        if (parent) {\n          const obj_ = {\n            field: parent.field,\n            index: index,\n            children: {}\n          }\n          if (children) {\n            children.map((child, childIndex) => {\n              const { colId, sort , visible, actualWidth } = child\n              obj_.children[colId] = {\n                index: childIndex,\n                field: colId,\n                sort: sort,\n                hide: !visible,\n                width: actualWidth,\n                headerName: child.colDef.headerName ? child.colDef.headerName : parent.headerName\n              }\n            })\n          }\n          obj[obj_.field] = obj_\n        } else {\n          children.map((child, childIndex) => {\n            const { colId, sort , pinned , visible, actualWidth } = child\n            const obj_ = {\n              pinned: pinned,\n              field: colId,\n              index: childIndex,\n              sort: sort,\n              hide: !visible,\n              width: actualWidth,\n              headerName: child.colDef.headerName\n            }\n            obj[obj_.field] = obj_\n          })\n        }\n      })\n      this.columnDefsItems = obj\n      this.$emit('setPrivateColumnDefs', JSON.stringify(this.columnDefsItems))\n    },\n    initGridOptions() {\n      let columnCount = 0\n      let fillWidth = 0\n      let _fill = 0\n      const _this = this\n      const fullRowType = this.fullRowType\n      const hasSecMeter = this.columnDefs.some((item) => item.children)\n      const disablePaste = this.disablePaste\n      this.gridColumnDefs = handleGridColumnDefs(\n        this.isSubtable,\n        hasSecMeter,\n        this.tableSelection,\n        this.columnDefs,\n        this.childAllSelect\n      )\n      const gridOptions = {\n        // 列表隐藏/显示触发的api\n        onColumnVisible: params => {\n          params.source === 'toolPanelUi' && this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems)\n        },\n        // 列固定\n        onColumnPinned: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems)\n        },\n        // 列换位\n        onColumnMoved: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems)\n        },\n        // 列表拖拽触发的api\n        onDragStopped: params => {\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems)\n        },\n        // 列表排序触发的api\n        onSortChanged: params => {\n          console.log(this.privateColumnDefs)\n          this.privateColumnDefs && this.setColumnDefsItems(params, this.columnDefsItems)\n        },\n        onColumnResized: (params) => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode((node) => {\n              const detailNode = node.detailNode\n              detailNode &&\n                detailNode.detailGridInfo &&\n                detailNode.detailGridInfo.api.sizeColumnsToFit()\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi\n                  .getColumnState()\n                  .filter((item, index) => {\n                    _this.gridChildColumnDefs[index].width = item.width\n                  })\n              }\n            })\n          }\n        },\n        // 开启列面板\n        sideBar: {\n          toolPanels: [{\n            id: 'columns',\n            domLayout: 'autoHeight',\n            labelDefault: 'Columns',\n            labelKey: 'columns',\n            iconKey: 'columns',\n            toolPanel: 'agColumnsToolPanel',\n            toolPanelParams: {\n              suppressRowGroups: true,\n              suppressValues: true,\n              suppressPivots: true,\n              suppressPivotMode: true,\n              suppressColumnFilter: true,\n              suppressColumnSelectAll: true,\n              suppressColumnExpandAll: true\n            }\n          }]\n        },\n        tooltipShowDelay: null,\n        tooltipHideDelay: null,\n        suppressClipboardPaste: !!(\n          disablePaste === 'all' || disablePaste === 'parent'\n        ),\n        embedFullWidthRows: true,\n        frameworkComponents: {\n          TableInput: Vue.extend(TableInput),\n          headerSelect: Vue.extend(headerSelect),\n          parentSelect: Vue.extend(parentSelect),\n          headerDefSelect: Vue.extend(headerDefSelect),\n          defSelect: Vue.extend(defSelect),\n          imageViewer: Vue.extend(imageViewer),\n          ...this.frameworkComponents\n        },\n        context: {\n          componentParent: this,\n          rowKey: this.rowKey,\n          childRowKey: this.childRowKey,\n          childrenListKey: this.childrenListKey,\n          tableSelection: this.tableSelection,\n          onHeaderDefSelect: this.onHeaderDefSelect,\n          onDefSelect: this.onDefSelect,\n          loadDetail: this.loadDetail,\n          enableZeroValue: this.enableZeroValue\n        },\n        // rowHeight: 36,\n        headerHeight: 32,\n        defaultColDef: {\n          tooltipComponent: 'AgGridTextTooltip',\n          // cellStyle: {\n          //   'line-height': '36px'\n          // },\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        editType:\n          fullRowType === 'all' || fullRowType === 'parent' ? 'fullRow' : null,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.(\n          'grid.others.dataLoading'\n        )}...</span>`,\n        overlayNoRowsTemplate: `<span><span>`,\n        localeText: AG_GRID_LOCALE_CN,\n        rowSelection: this.tableSelection,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        masterDetail: this.isSubtable,\n        //* *************设置固定行样式**********\n        // 公共样式已统一配置\n        // getRowStyle: (params) => {\n        //   if (params.node.rowPinned) {\n        //     return { 'color': '#3e8ddc', 'border-top': '2px solid #3e8ddc !important', 'font-weight': '600', 'border-bottom': '0' }\n        //   }\n        // },\n        isRowMaster: (dataItem) => {\n          const hasLoadDetail = typeof this.loadDetail === 'function'\n          return (\n            (this.isSubtable &&\n              dataItem[this.childrenListKey] &&\n              dataItem[this.childrenListKey].length) ||\n            hasLoadDetail\n          )\n        },\n        onRowClicked: (params) => {\n          this.stopChildEditing()\n          this.$emit('rowClicked', params)\n        },\n        onRowDoubleClicked: (params) => {\n          const path = params.event.path || []\n          const el = path.length ? path[0] : null\n          if (el && el.className.includes('ag-icon')) {\n            return\n          }\n          this.$emit('rowDoubleClicked', params)\n        },\n        onCellValueChanged: (params) => {\n          this.refreshTable()\n          this.$emit('cellValueChanged', params)\n        },\n        onCellEditingStopped: (params) => {\n          this.$emit('cellEditingStopped', params)\n        },\n        onRowValueChanged: (params) => {\n          this.$emit('rowValueChanged', params)\n        },\n        onRowGroupOpened: (params) => {\n          params.expanded ? columnCount++ : columnCount--\n          if (_fill === 0) {\n            fillWidth =\n              params.columnApi.getColumnState()[\n                params.columnApi.getColumnState().length - 1\n              ].width\n            _fill = 1\n          }\n          columnCount === 0 &&\n            gridOptions.columnApi.setColumnWidth('fill', fillWidth, true)\n          this.$emit('rowGroupOpened', params)\n        },\n        onColumnResized: (params) => {\n          if (params.source === 'uiColumnDragged' && params.finished) {\n            gridOptions.api.forEachNode((node) => {\n              const detailNode = node.detailNode\n              detailNode &&\n                detailNode.detailGridInfo &&\n                detailNode.detailGridInfo.api.sizeColumnsToFit()\n              if (detailNode && detailNode.detailGridInfo) {\n                detailNode.detailGridInfo.columnApi\n                  .getColumnState()\n                  .filter((item, index) => {\n                    _this.gridChildColumnDefs[index].width = item.width\n                  })\n              }\n            })\n          }\n        },\n        ...this.additionalOptions\n      }\n      if (this.isSubtable) {\n        gridOptions.masterDetail = true\n        // 子表配置\n        gridOptions.detailCellRendererParams = {\n          detailGridOptions: {\n            suppressClipboardPaste: !!(\n              disablePaste === 'all' || disablePaste === 'child'\n            ),\n            suppressHorizontalScroll: false,\n            frameworkComponents: {\n              childHeaderSelect: Vue.extend(childHeaderSelect),\n              TableInput: Vue.extend(TableInput),\n              childSelect: Vue.extend(childSelect),\n              imageViewer: Vue.extend(imageViewer),\n              ..._this.frameworkComponents\n            },\n            columnDefs: handleGridChildColumnDefs(\n              hasSecMeter,\n              this.tableSelection,\n              this.gridChildColumnDefs,\n              this.childAllSelect\n            ),\n            context: gridOptions.context,\n            // rowHeight: 36,\n            headerHeight: 33,\n            defaultColDef: {\n              // cellStyle: {\n              //   'line-height': '36px'\n              // },\n              filter: true,\n              sortable: true,\n              resizable: true,\n              suppressMenu: true // 子表不显示头部菜单\n            },\n            editType:\n              fullRowType === 'all' || fullRowType === 'child'\n                ? 'fullRow'\n                : null,\n            overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.(\n              'grid.others.dataLoading'\n            )}...</span>`,\n            overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t?.(\n              'grid.others.noData'\n            )}<span>`,\n            localeText: AG_GRID_LOCALE_CN,\n            rowSelection: 'multiple',\n            suppressRowClickSelection: true,\n            enableRangeSelection: true,\n            onRowClicked: (params) => {\n              this.$emit('childRowClicked', params)\n            },\n            onRowDoubleClicked: (params) => {\n              this.$emit('childRowDoubleClicked', params)\n            },\n            onCellEditingStarted: (params) => {\n              // 清空其他子级编辑 全行编辑 不执行\n              if (!(fullRowType === 'all' || fullRowType === 'child')) {\n                _this.stopChildEditing(params.data.parentId)\n              }\n            },\n            onCellEditingStopped: (params) => {\n              this.$emit('childCellEditingStopped', params)\n            },\n            onCellValueChanged: (params) => {\n              this.refreshTable()\n              this.$emit('childCellValueChanged', params)\n            },\n            onRowEditingStarted: (params) => {\n              // 清空其他子级编辑\n              _this.stopChildEditing(params.data.parentId)\n            },\n            onRowValueChanged: (params) => {\n              this.$emit('childRowValueChanged', params)\n            },\n            onGridReady: function(params) {\n              if (this.isSizeColumnsToFit) {\n                params.columnApi.sizeColumnsToFit()\n              } else {\n                columnCount === 1 &&\n                  setTimeout(() => {\n                    _this.columnWidth =\n                      fillWidth +\n                      params.columnApi.columnModel.bodyWidth -\n                      params.columnApi.columnModel.scrollWidth\n\n                    gridOptions.columnApi.setColumnWidth(\n                      'fill',\n                      _this.columnWidth,\n                      true\n                    )\n                    params.columnApi.getColumnState().filter((item, index) => {\n                      _this.gridChildColumnDefs[index] &&\n                        (_this.gridChildColumnDefs[index].width =\n                          params.columnApi.getColumnState()[index + 1].width)\n                    })\n                  }, 300)\n              }\n              _this.$emit('childReady')\n            },\n            onColumnResized: function(params) {\n              if (params.source === 'uiColumnDragged' && params.finished) {\n                _this.columnWidth =\n                  _this.columnWidth +\n                  params.columnApi.columnController.bodyWidth -\n                  params.columnApi.columnController.scrollWidth\n                gridOptions.columnApi.setColumnWidth(\n                  'fill',\n                  _this.columnWidth,\n                  true\n                )\n                gridOptions.api.forEachNode((node) => {\n                  const detailNode = node.detailNode\n                  detailNode &&\n                    detailNode.detailGridInfo &&\n                    detailNode.detailGridInfo.columnApi.setColumnWidth(\n                      params.columns[0].colId,\n                      params.columns[0].actualWidth,\n                      true\n                    )\n                })\n                _this.childColumnDefs_.filter((item, index) => {\n                  if (item.field === params.columns[0].colId) {\n                    _this.childColumnDefs_[index].width =\n                      params.columns[0].actualWidth\n                  }\n                })\n              }\n            },\n            ...this.detailOptions\n          },\n          getDetailRowData: async(params) => {\n            const { childrenListKey, childRowKey } = this\n\n            if (typeof this.loadDetail === 'function') {\n              params.data[childrenListKey] = await this.loadDetail(params.data)\n            }\n\n            if (params.data[childrenListKey]) {\n              const callRecords = params.data[childrenListKey].map((item) => {\n                return {\n                  ...item,\n                  parentId: params.node.parent.id\n                }\n              })\n              if (params.data._selected) {\n                params.data._selectedKeys = params.data[childrenListKey].map(\n                  (item) => {\n                    if (!item._selectedDisabled) {\n                      return item[childRowKey]\n                    }\n                  }\n                )\n              }\n              new Promise((r) => {\n                params.successCallback(callRecords)\n                r(callRecords)\n              }).then(() => {\n                if (this.gridOptions.embedFullWidthRows) {\n                  this.handleDetailRow(\n                    params,\n                    callRecords,\n                    params.data._selectedKeys.length === callRecords.length\n                  )\n                }\n              })\n            } else {\n              params.successCallback([])\n            }\n          }\n        }\n      }\n      this.gridOptions = gridOptions\n      if(typeof this.getPrivateColumnDefs === 'function' && this.privateColumnDefs) {\n        this.getPrivateColumnDefs().then(res => {\n          this.columnDefsItems = res\n          JSON.stringify(res) !== \"{}\" && this.setColumnDefs()\n        })\n      }\n    },\n    handleDetailRow(params, callRecords, isSelectAll) {\n      if (!callRecords.length) return\n      const cLength = callRecords.length\n      const parentRowIndex = params.node.parent.id\n      this.$nextTick(() => {\n        const queryNode = '.ag-pinned-left-cols-container .ag-details-row'\n        const detail_row = document.querySelectorAll(queryNode)\n        if (!detail_row.length) return\n        let el = null\n        Array.from(detail_row).forEach((item) => {\n          const row_id = item.parentElement.attributes['row-id'].value\n          const parentId = `detail_${parentRowIndex}`\n          el = row_id === parentId ? item : null\n        })\n        if (!el) return\n        this.insertDom(el, cLength, isSelectAll)\n      })\n    },\n    insertDom(el, cLength, isSelectAll) {\n      const commonClass = [\n        'ag-row-no-focus',\n        'ag-row',\n        'ag-row-level-1',\n        'ag-row-position-absolute',\n        'ag-row-first',\n        'customer-dom'\n      ]\n      isSelectAll\n        ? commonClass.push(...['ag-row-focus', 'ag-row-selected'])\n        : null\n      const createChildRowElement = (evenOdd, commonClass, style) => {\n        const div = document.createElement('div')\n        div.classList.add(...[...commonClass, evenOdd])\n        div.style = style\n        return div\n      }\n      //\n      const element = this.$el.querySelector('.ag-theme-balham')\n      const styles = window.getComputedStyle(element)\n      const rowHeight = Number(styles.getPropertyValue('--ag-grid-row-height').replace('rem', '') * 100)\n      const firstTop = rowHeight - 2\n      const perTop = rowHeight\n      const fragment = document.createDocumentFragment()\n      for (let i = 0; i < cLength; i++) {\n        let evenOdd = null\n        evenOdd = (i & 1) === 0 ? 'ag-row-even' : 'ag-row-odd'\n        const top = firstTop + i * perTop + 'px'\n        const style = `top:${top}`\n        fragment.appendChild(createChildRowElement(evenOdd, commonClass, style))\n      }\n      el.appendChild(fragment)\n    },\n    handlePinnedBottomRowData(newValue) {\n      if (typeof this.handleDetailCount === 'function') {\n        newValue.forEach((item, index) => {\n          const rowNode = this.gridApi.getDetailGridInfo(`detail_${index}`)\n          if (item._selectedKeys.length > 0) {\n            const childSelectedList = []\n            for (const childRowKey of item._selectedKeys) {\n              const selectedItem = item[this.childrenListKey].find((el) => {\n                return el[this.childRowKey] === childRowKey\n              })\n              childSelectedList.push(selectedItem)\n            }\n            rowNode &&\n              rowNode.api.setPinnedBottomRowData([\n                { _childCount: this.handleDetailCount(childSelectedList) }\n              ])\n          } else {\n            rowNode && rowNode.api.setPinnedBottomRowData([])\n          }\n        })\n      }\n    },\n    handlSelectionChange() {\n      const selectedNodes = this.gridApi.getSelectedNodes()\n      const selectedKeys = selectedNodes.map((item) => item.data[this.rowKey])\n      this.rowData.forEach((item) => {\n        if (selectedKeys.includes(item[this.rowKey])) {\n          item._selected = true\n        } else {\n          item._selected = false\n        }\n      })\n    },\n    initDataSelectState(arr) {\n      return arr.map((item) => {\n        item._selected = false\n        item._selectedKeys = []\n        return item\n      })\n    },\n    getSelectedData(func, type = null) {\n      setTimeout(() => {\n        const newRowData = deepClone(this.rowData)\n        const filterSelectedData = newRowData\n          .map((element, index) => {\n            return {\n              rowIndex: index + 1,\n              ...element\n            }\n          })\n          .filter((item) => {\n            return (\n              (item._selected ||\n                (item._selectedKeys ? item._selectedKeys.length : false)) &&\n              (this.childRowKey\n                ? !!(\n                  item[this.childrenListKey] &&\n                    item[this.childrenListKey].length\n                )\n                : true)\n            )\n          })\n\n        if (this.childRowKey) {\n          // 过滤子级\n          const rowData = filterSelectedData.map((item) => {\n            item[this.childrenListKey] = item[this.childrenListKey].filter(\n              (child) => item._selectedKeys.includes(child[this.childRowKey])\n            )\n            return item\n          })\n          // 返回子级合集\n          if (type === 'margeChild') {\n            return func(\n              this.initDataSelectState(\n                rowData.reduce((prev, next) => {\n                  return prev.concat(next[this.childrenListKey])\n                }, [])\n              )\n            )\n          }\n          if (type === 'delete') {\n            const masterData = []\n            const childData = []\n\n            newRowData.forEach((item) => {\n              if (item._selected) {\n                masterData.push(item)\n              } else if (\n                item._selectedKeys ? item._selectedKeys.length : false\n              ) {\n                childData.push(item)\n              }\n            })\n\n            return func({\n              masterData: masterData,\n              childData: childData\n            })\n          }\n\n          return func(this.initDataSelectState(rowData))\n        }\n\n        func(\n          this.tableSelection === 'single'\n            ? this.initDataSelectState(filterSelectedData)[0]\n            : this.initDataSelectState(filterSelectedData)\n        )\n      }, 0)\n    },\n    // 清空选中\n    clearSelection() {\n      this.rowData.forEach((item) => {\n        item._selected = false\n        item._selectedKeys = []\n      })\n      this.refreshTable()\n    },\n    handleGridHeight(dataLength) {\n      // autoHeight=true\n      // 1、高度为自适应\n      // 2、没数据100\n      // 3、有高度 高于15条设为高度 heightinif\n      const gridHeight = this.heightinif\n      if (this.autoHeight) {\n        if (+dataLength === 0) {\n          const headerHeight = this.headerTotal ? 34 : 0\n          const footerHeight = this.footerTotal ? 32 : 0\n          const paginationHeight = this.paginationinif ? 34 : 0\n          this.gridHeight = 100 + headerHeight + footerHeight + paginationHeight\n        } else if (+dataLength >= 15 && gridHeight) {\n          this.gridHeight = gridHeight\n        } else {\n          this.gridHeight = 0\n          this.$refs.stGrid.$el.style.height = 'auto'\n          this.gridApi.setDomLayout('autoHeight')\n        }\n      }\n    },\n    // 加载表格数据 不传参数从第一页\n    loadTableData(pagination) {\n      if (typeof this.loadData === 'function') {\n        if (this.showLoading) {\n          this.gridOptions.api.showLoadingOverlay()\n          this.gridOptions.overlayNoRowsTemplate = `<span class=\"ag-overlay-loading-center\">${this.$t?.(\n            'grid.others.noData'\n          )}<span>`\n        }\n\n        const nextPagination = {\n          ...this.pagination,\n          page: this.hasZeroPagination_ ? 0 : 1,\n          ...pagination\n        }\n\n        this.loadData(nextPagination)\n          .then((data, heightCount) => {\n            let total = 0\n            if (typeof data === 'number') {\n              total = data\n            } else if (data && data.totalElements) {\n              total = data.totalElements\n            } else if (data && data.length) {\n              total = data.length\n            }\n            if (total === 0) {\n              this.gridApi.showNoRowsOverlay()\n            }\n            this.handleGridHeight(heightCount || total)\n            this.pagination.total = total\n            this.pagination.page = nextPagination.page\n            this.pagination.limit = nextPagination.limit\n          })\n          .catch(() => {\n            this.handleGridHeight(0)\n            this.gridApi.showNoRowsOverlay()\n            console.error(`请检查loadData`)\n          })\n      }\n    },\n    // 重新加载\n    reloadTableData() {\n      this.loadTableData(this.pagination)\n    },\n    // 刷新aggrid表格\n    refreshTable() {\n      this.gridApi.forEachNode((node) => {\n        const detailNode = node.detailNode\n        detailNode &&\n          detailNode.detailGridInfo &&\n          detailNode.detailGridInfo.api.refreshCells({ force: true })\n      })\n      this.gridApi.refreshCells({ force: true })\n    },\n    // 取消所有子表编辑状态\n    stopChildEditing(parentId = null) {\n      this.gridApi.forEachNode((node) => {\n        const detailNode = node.detailNode\n        if (node.id !== parentId) {\n          detailNode &&\n            detailNode.detailGridInfo &&\n            detailNode.detailGridInfo.api.stopEditing()\n        }\n      })\n    },\n    // isAutoSizeColumnsHeader\n    // isAutoSizeColumns\n    onGridReady(params) {\n      this.gridApi = params.api\n      this.columnApi = params.columnApi\n      if (this.isSizeColumnsToFit) {\n        this.gridApi.sizeColumnsToFit()\n      }\n      if (this.isAutoSizeColumns || this.isAutoSizeColumnsHeader) {\n        this.handleAutoSizeColumns()\n      }\n      if (this.autoLoadData) {\n        this.loadTableData()\n      }\n      const element = this.$el.querySelector('.ag-theme-balham')\n      this.DomObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.attributeName === 'class') {\n            const styles = window.getComputedStyle(element)\n            const rowHeight = styles.getPropertyValue('--ag-grid-row-height')\n            this.gridApi.forEachNode(item => {\n              item.setRowHeight(Number(rowHeight.replace('rem', '') * 100))\n            })\n            this.gridApi.onRowHeightChanged()\n          }\n        })\n      })\n      this.DomObserver.observe(element, { attributes: true })\n      this.$emit('gridReady', params)\n    },\n    getAutoSizeFnSkipHeaderParams() {\n      const c = this.isAutoSizeColumns\n      const ch = this.isAutoSizeColumnsHeader\n      // 两者设置则错误提示，默认不跳过header的自适应\n      if (c && ch) {\n        console.error(\n          'isAutoSizeColumns与isAutoSizeColumnsHeader属性仅能设置一个'\n        )\n        return false\n      }\n      //   isAutoSizeColumns true  and isAutoSizeColumnsHeader false  skipheader = true\n      //   isAutoSizeColumns false  and isAutoSizeColumnsHeader true  skipheader = false\n      return !ch && c ? true : !(ch && !c)\n    },\n    handleAutoSizeColumns() {\n      const allColumnIds = []\n      this.columnApi.getColumns().forEach((column) => {\n        allColumnIds.push(column.getId())\n      })\n      // 获取 skipheader参数\n      this.columnApi.autoSizeColumns(\n        allColumnIds,\n        this.getAutoSizeFnSkipHeaderParams()\n      ) // 是否跳过header\n    },\n    pageChange(pagination) {\n      this.pagination.page = pagination.page\n      this.pagination.limit = pagination.limit\n      this.$emit('pageChange', pagination)\n      this.reloadTableData(pagination)\n    },\n    setAgContext(key, ctx) {\n      this.gridOptions.context[key] = ctx\n    },\n    setAgDetailContext(key, ctx) {\n      this.gridOptions.detailCellRendererParams.detailGridOptions.context[key] =\n        ctx\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}