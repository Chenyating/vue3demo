{"ast":null,"code":"import { AgGridVue } from 'ag-grid-vue';\nimport { request, MessageUtil, Format } from '@cndinfo/cube-web-utils';\nimport { AllModules } from '../../../utils/agGridModules';\nimport localLayout from '../../Layout/index.js';\nimport localDialog from '../../Dialog/index.js';\nimport localPagination from '../../Pagination/index.js';\nexport default {\n  name: 'TreeTable',\n  components: {\n    AgGridVue,\n    localLayout,\n    localDialog,\n    localPagination\n  },\n  props: {\n    // 标题\n    title: {\n      type: String,\n      default: ''\n    },\n    width: {\n      type: String,\n      default: '700px'\n    },\n    height: {\n      type: Number,\n      default: 450\n    },\n    // 是否插入body(嵌套时使用)\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    // 弹窗显隐\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    // 是否单选\n    radio: {\n      type: Boolean,\n      default: true\n    },\n    // 搜索框提示文字\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    // 是否展示搜索框\n    showSearch: {\n      type: Boolean,\n      default: false\n    },\n    // 是否需要分页\n    showPagination: {\n      type: Boolean,\n      default: true\n    },\n    // 是否展示确定/取消\n    onlyShow: {\n      type: Boolean,\n      default: false\n    },\n    // 禁用选择的key值\n    disableSelectKey: {\n      type: String,\n      default: ''\n    },\n    // 禁用选择的数组\n    disableSelected: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    // 接口调用成功的回调函数\n    afterFetch: {\n      type: Function,\n      default: () => {}\n    },\n    selectChange: {\n      type: Function,\n      default: () => {}\n    },\n    customSelect: {\n      type: Boolean,\n      default: false\n    },\n    // ag-grid【列】配置\n    columnDefs: {\n      type: Array,\n      default: () => {\n        return [{\n          field: 'test1',\n          headerName: '表头1',\n          width: 100\n        }, {\n          field: 'test2',\n          headerName: '表头2',\n          width: 100\n        }];\n      }\n    },\n    // agGrid表格显示全选按钮\n    selectAll: {\n      type: Boolean,\n      default: true\n    },\n    // 其他请求参数\n    otherParams: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    reqConfig: {\n      type: Object,\n      default: () => {\n        return {\n          url: '',\n          // 接口api\n          method: '',\n          // 请求方法\n          params: {},\n          // 请求参数\n          keyword: '',\n          // 查询关键字\n          searchValue: '',\n          // 搜索框默认值设置\n          dataFormat: {},\n          // 数据格式\n          treeProps: {},\n          updataUrl: false // 更新分页信息到路径上\n        };\n      }\n    }\n  },\n\n  data() {\n    return {\n      treeData: [],\n      modules: AllModules,\n      gridColumnDefs: [],\n      // grid\n      gridOptions_rightData: {},\n      rowData_rightData: [],\n      selectedRightDataNodes: [],\n      // 分页配置\n      tempInitparams: {},\n      pagination: {\n        pageNo: 0,\n        pageSize: 10,\n        total: 0\n      },\n      filterText: '',\n      // ag-grid【列】默认配置\n      defColumnDefs: [{\n        field: 'index',\n        headerName: '',\n        maxWidth: 40,\n        minWidth: 40,\n        checkboxSelection: true,\n        headerCheckboxSelection: !this.radio,\n        cellStyle: {\n          'justify-content': 'Center',\n          textAlign: 'center'\n        },\n        cellClass: 'grid-cell-centered',\n        // headerCheckboxSelection: this.selectAll ? true : false,\n        cellRenderer: params => {\n          // let str = ''\n          let isDisable = false;\n          if (this.disableSelected && this.disableSelected.length) {\n            this.disableSelected.map(item => {\n              if (item === params.data[this.disableSelectKey]) {\n                isDisable = true;\n              }\n            });\n          }\n          if (this.disableSelectKey && isDisable) {\n            params.eGridCell.children[0].children[0].style.setProperty('display', 'flex', 'important');\n            params.eGridCell.children[0].children[0].children[0].children[1].style.background = '#e4e4e4';\n          }\n          // if (this.disableSelectKey && isDisable) {\n          //   params.colDef.cellStyle = {\n          //     'cursor': 'not-allowed'\n          //   }\n          //   params.node.setSelected(false)\n          //   params.eGridCell.children[0].children[0].children[1].style.cursor = 'not-allowed'\n          //   params.eGridCell.children[0].children[0].children[1].style.background = '#e4e4e4'\n          //   params.eGridCell.children[0].children[0].children[1].setAttribute('title', '不可选')\n          //   str = `<span class=\"ag-cell-value\" title=\"不可选\" ></span>`\n          // } else {\n          //   str = `<span class=\"ag-cell-value\" ></span>`\n          // }\n          // return str\n        }\n        // rowDrag: true,\n        // pinned: 'left',\n      }]\n    };\n  },\n\n  computed: {\n    isPlaceholder() {\n      return this.placeholder || this.$t('grid.others.pleaseEnterTheContent');\n    },\n    // 接口地址\n    url() {\n      return this.reqConfig.url;\n    },\n    tableUrl() {\n      return this.reqConfig.tableUrl;\n    },\n    //\n    updataUrl() {\n      return this.reqConfig.updataUrl;\n    },\n    // 请求方法\n    method() {\n      return this.reqConfig.method || 'get';\n    },\n    // 请求参数\n    params() {\n      return this.reqConfig.params || {};\n    },\n    // 查询关键字\n    keyword() {\n      return this.reqConfig.keyword;\n    },\n    // 查询内容\n    searchValue() {\n      return this.reqConfig.searchValue;\n    },\n    // 数据格式\n    dataFormat() {\n      return this.reqConfig.dataFormat;\n    },\n    // 当前grid配置\n    curConfig() {\n      // this.columnDefs.forEach(item => {\n      //   if (!item.width) {\n      //     item.width = 70\n      //   }\n      // })\n      if (this.onlyShow) return this.columnDefs;\n      return this.defColumnDefs.concat(this.columnDefs);\n    },\n    // 单选/多选\n    rowSelection() {\n      // multiple / single\n      return this.radio ? 'single' : 'multiple';\n    },\n    treeUrl() {\n      return this.reqConfig.treeUrl;\n    },\n    // 树展示label字段\n    treeProps() {\n      return this.reqConfig.treeProps || {\n        children: 'children',\n        label: 'name'\n      };\n    }\n  },\n  watch: {\n    visible(nv, ov) {\n      if (nv) {\n        this.filterText = this.searchValue;\n        if (this.treeData && this.treeData.length === 0) {\n          this.queryTreeList();\n        }\n      } else {\n        this.treeData = [];\n        this.rowData_rightData = [];\n      }\n    }\n  },\n  created() {\n    // 获取初始分页配置\n    this.tempInitparams = Format.deepClone(this.params);\n    if (this.showPagination) {\n      this.pagination.pageNo = this.params.pageNo ? this.params.pageNo : this.pagination.pageNo;\n      this.pagination.pageSize = this.params.pageSize ? this.params.pageSize : this.pagination.pageSize;\n    }\n    // 初始化ag-grid\n    this.initGridOptions();\n  },\n  methods: {\n    // 点击左树获取右表\n    handleNodeClick(data) {\n      // console.log(data)\n      this.pagination.id = data.id;\n      this.queryTableList();\n    },\n    // 获取【左树】列表\n    queryTreeList() {\n      request({\n        url: this.treeUrl,\n        data: {},\n        method: 'POST',\n        noLoading: true\n      }).then(res => {\n        this.treeData = res.data;\n        this.$nextTick(() => {\n          // 设置当前key\n          this.$refs.tree.setCurrentKey(res.data[0].id);\n          // 获取当前key对应的右表（测试：后续根据真实接口调整）\n          this.handleNodeClick(res.data[0]);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n      // apiList\n      //   .postList({}, this.treeUrl)\n      //   .then((res) => {\n      //     this.treeData = res.data\n      //     this.$nextTick(() => {\n      //       // 设置当前key\n      //       this.$refs.tree.setCurrentKey(res.data[0].id)\n      //       // 获取当前key对应的右表（测试：后续根据真实接口调整）\n      //       this.handleNodeClick(res.data[0])\n      //     })\n      //   })\n      //   .catch((err) => {\n      //     console.log(err)\n      //   })\n    },\n\n    filterNode(value, data) {\n      if (!value) return true;\n      if (!data.name) return false;\n      return data[this.treeProps.label].indexOf(value) !== -1;\n    },\n    initGridOptions() {\n      const _this = this;\n      const autoGroupColumnDef = {\n        headerName: 'Athlete',\n        field: 'id',\n        width: 200,\n        cellRenderer: 'agGroupCellRenderer',\n        cellRendererParams: {\n          checkbox: function (params) {\n            return params.node.group === true;\n          }\n        }\n      };\n      const gridOptions = {\n        suppressClipboardPaste: true,\n        embedFullWidthRows: true,\n        defaultColDef: {\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        rowHeight: 28,\n        rowSelection: this.rowSelection,\n        // multiple / single\n        rowMultiSelectWithClick: true,\n        autoGroupColumnDef: autoGroupColumnDef,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.dataLoading')}...</span>`,\n        overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t('grid.others.noData')}<span>`,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        onGridReady: function (params) {\n          params.api.sizeColumnsToFit();\n        },\n        isRowSelectable: function (params) {\n          let isDisable = false;\n          if (_this.disableSelected && _this.disableSelected.length) {\n            _this.disableSelected.map(item => {\n              if (item === params.data[_this.disableSelectKey]) {\n                isDisable = true;\n              }\n            });\n          }\n          return !(_this.disableSelectKey && isDisable);\n        },\n        onRowDoubleClicked: e => {\n          // 单选的情况下可以双击直接 = 确定\n          if (this.rowSelection === 'single') {\n            this.handleClose([e.data]);\n            this.selectedRightDataNodes = [];\n          }\n        }\n      };\n      this.gridColumnDefs = this.curConfig;\n      this.gridOptions_rightData = gridOptions;\n    },\n    // 数据赋值\n    assignData(rowData) {\n      if (this.dataFormat) {\n        if (this.dataFormat.key) {\n          setTimeout(() => {\n            this.gridOptions_rightData.api.setRowData(rowData.data[this.dataFormat.key]);\n          }, 300);\n        } else {\n          this.rowData_rightData = rowData.data;\n        }\n        if (this.showPagination) {\n          if (this.dataFormat.total) {\n            this.pagination.total = rowData.data[this.dataFormat.total];\n          } else {\n            this.pagination.total = rowData.data.totalElements;\n          }\n        }\n      } else {\n        this.rowData_rightData = rowData.data;\n        if (this.showPagination) {\n          this.pagination.total = rowData.data.totalElements;\n        }\n      }\n    },\n    // 格式化获取url\n    formatUrl(params, url) {\n      let urlStr = '';\n      if (url.indexOf('{') > -1) {\n        const urlArr = url.split('/');\n        // console.log('urlArr前--', urlArr)\n        urlArr.forEach((item, index) => {\n          if (index !== 0) {\n            let temp;\n            if (item.indexOf('{') > -1) {\n              // console.log(item.substring(1, item.length - 1))\n              temp = `/${params[item.substring(1, item.length - 1)]}`;\n            } else {\n              temp = `/${item}`;\n            }\n            urlStr += temp;\n          }\n        });\n      } else {\n        urlStr = url;\n      }\n      console.log('urlStr--', urlStr);\n      // 需要将分页数据更新到路径上\n      if (this.updataUrl) {\n        urlStr = this.upDataUrl(urlStr);\n      }\n      return urlStr;\n    },\n    // 获取列表\n    queryTableList(search) {\n      if (this.gridOptions_rightData && this.gridOptions_rightData.api) {\n        this.gridOptions_rightData.api.showLoadingOverlay();\n      }\n      // 有搜索框\n      if (this.showSearch && this.keyword) {\n        this.params[this.keyword] = this.filterText;\n      }\n      // 有分页\n      if (this.showPagination) {\n        this.params.pageNo = this.pagination.pageNo;\n        this.params.pageSize = this.pagination.pageSize;\n        if (search) {\n          this.params.pageNo = this.tempInitparams.pageNo;\n          this.params.pageSize = this.tempInitparams.pageSize;\n        }\n      }\n      if (this.pagination.id) {\n        this.params.supParam = this.pagination.id;\n      }\n      Object.assign(this.params, this.otherParams);\n      // 接口请求\n      if (this.method.toLowerCase() === 'get') {\n        request({\n          url: this.formatUrl(this.params, this.tableUrl),\n          method: this.method,\n          params: this.params,\n          noLoading: true\n        }).then(rowData => {\n          this.assignData(rowData);\n          this.$emit('afterFetch', rowData);\n        }).catch(error => {\n          console.log('查询错误：', error);\n          this.rowData_rightData = [];\n        });\n      } else {\n        request({\n          url: this.formatUrl(this.params, this.tableUrl),\n          method: this.method,\n          data: this.params,\n          noLoading: true\n        }).then(rowData => {\n          this.assignData(rowData);\n          this.$emit('afterFetch', rowData);\n        }).catch(error => {\n          console.log('查询错误：', error);\n          this.rowData_rightData = [];\n        });\n      }\n    },\n    // 【右表】切换分页数据\n    pageChange(obj) {\n      this.pagination.pageNo = obj.page;\n      this.pagination.pageSize = obj.limit;\n      this.queryTableList();\n    },\n    // 分页数据更新到url路径上\n    upDataUrl(v) {\n      if (!this.pagination.pageNo || !this.pagination.pageSize) {\n        return v;\n      }\n      let urlArr = [];\n      let url = '';\n      urlArr = v.split('/');\n      urlArr.pop();\n      urlArr.pop();\n      url = urlArr.join('/');\n      return `${url}/${this.pagination.pageNo}/${this.pagination.pageSize}`;\n    },\n    // 确定选择\n    handleConfirm() {\n      if (this.selectedRightDataNodes.length === 0) {\n        MessageUtil.warning(this.$t('grid.tips.selectAtLeastOne'));\n      } else {\n        this.handleClose(this.selectedRightDataNodes, 'confirm');\n        this.selectedRightDataNodes = [];\n      }\n    },\n    // 关闭/取消\n    handleClose(value = [], type = 'close') {\n      this.$emit('update:visible', false);\n      this.$emit('onSelect', value, type);\n    },\n    // 右表选择事件\n    onSelectionChangedRightData() {\n      if (this.customSelect) {\n        this.$emit('selectChange', this.gridOptions_rightData.api);\n        return;\n      }\n      if (this.gridOptions_rightData && this.gridOptions_rightData.api) {\n        const selectedNodes = this.gridOptions_rightData.api.getSelectedNodes();\n        const selectedData = selectedNodes.map(node => node.data);\n        this.selectedRightDataNodes = selectedData;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AgGridVue","request","MessageUtil","Format","AllModules","localLayout","localDialog","localPagination","name","components","props","title","type","String","default","width","height","Number","appendToBody","Boolean","visible","radio","placeholder","showSearch","showPagination","onlyShow","disableSelectKey","disableSelected","Array","afterFetch","Function","selectChange","customSelect","columnDefs","field","headerName","selectAll","otherParams","Object","nodeKey","reqConfig","url","method","params","keyword","searchValue","dataFormat","treeProps","updataUrl","data","treeData","modules","gridColumnDefs","gridOptions_rightData","rowData_rightData","selectedRightDataNodes","tempInitparams","pagination","pageNo","pageSize","total","filterText","defColumnDefs","maxWidth","minWidth","checkboxSelection","headerCheckboxSelection","cellStyle","textAlign","cellClass","cellRenderer","isDisable","length","map","item","eGridCell","children","style","setProperty","background","computed","isPlaceholder","$t","tableUrl","curConfig","concat","rowSelection","treeUrl","label","watch","nv","ov","queryTreeList","created","deepClone","initGridOptions","methods","handleNodeClick","id","queryTableList","noLoading","then","res","$nextTick","$refs","tree","setCurrentKey","catch","err","console","log","filterNode","value","indexOf","_this","autoGroupColumnDef","cellRendererParams","checkbox","node","group","gridOptions","suppressClipboardPaste","embedFullWidthRows","defaultColDef","filter","sortable","resizable","rowHeight","rowMultiSelectWithClick","overlayLoadingTemplate","overlayNoRowsTemplate","suppressRowClickSelection","enableRangeSelection","onGridReady","api","sizeColumnsToFit","isRowSelectable","onRowDoubleClicked","e","handleClose","assignData","rowData","key","setTimeout","setRowData","totalElements","formatUrl","urlStr","urlArr","split","forEach","index","temp","substring","upDataUrl","search","showLoadingOverlay","supParam","assign","toLowerCase","$emit","error","pageChange","obj","page","limit","v","pop","join","handleConfirm","warning","onSelectionChangedRightData","selectedNodes","getSelectedNodes","selectedData"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/TreeTable/src/index.vue"],"sourcesContent":["<template>\n  <!--通用表格弹窗-->\n  <local-dialog\n    :title=\"title\"\n    :visible=\"visible\"\n    :show-close=\"true\"\n    :fullscreen=\"false\"\n    :append-to-body=\"appendToBody\"\n    :width=\"width\"\n    :height=\"height\"\n    @close=\"handleClose\"\n  >\n    <template slot=\"content\">\n      <div v-if=\"showSearch\" class=\"mb-10\">\n        <el-input\n          ref=\"searchInput\"\n          v-model=\"filterText\"\n          clearable\n          :placeholder=\"isPlaceholder\"\n          size=\"mini\"\n          @keyup.native.stop.enter=\"queryTableList('search')\"\n          @clear=\"queryTableList('search')\"\n        >\n          <i\n            slot=\"suffix\"\n            class=\"el-input__icon el-icon-search pointer\"\n            @click=\"queryTableList('search')\"\n          />\n        </el-input>\n      </div>\n      <local-layout\n        height=\"100%\"\n        left-border\n        right-border\n        bottom-border\n        top-border\n      >\n        <!-- @check=\"checkGroupNode\" -->\n        <template slot=\"leftContent\">\n          <el-tree\n            ref=\"tree\"\n            :data=\"treeData\"\n            :props=\"treeProps\"\n            :filter-node-method=\"filterNode\"\n            :node-key=\"nodeKey\"\n            @keyup.native.stop.up=\"handleTreeUp\"\n            @keyup.native.enter=\"handleTreeEnter\"\n            @node-click=\"handleNodeClick\"\n          />\n        </template>\n        <template slot=\"rightContent\">\n          <div class=\"flexV h100\">\n            <ag-grid-vue\n              :class=\"[\n                'table',\n                'ag-theme-balham',\n                'grid-class',\n                'master-detail'\n              ]\"\n              :row-drag-managed=\"true\"\n              :grid-options=\"gridOptions_rightData\"\n              :row-data=\"rowData_rightData\"\n              :column-defs=\"gridColumnDefs\"\n              :modules=\"modules\"\n              @selection-changed=\"onSelectionChangedRightData\"\n            />\n            <local-pagination\n              v-if=\"showPagination\"\n              :total=\"pagination.total\"\n              :page=\"pagination.pageNo\"\n              :limit=\"pagination.pageSize\"\n              :event=\"pageChange\"\n            />\n          </div>\n        </template>\n      </local-layout>\n    </template>\n    <div v-if=\"!onlyShow\" slot=\"footer\">\n      <el-button size=\"mini\" plain @click=\"handleClose\">{{\n        $t(\"btns.cancel\")\n      }}</el-button>\n      <el-button type=\"primary\" size=\"mini\" @click=\"handleConfirm\">{{\n        $t(\"btns.confirmKey\")\n      }}</el-button>\n    </div>\n  </local-dialog>\n</template>\n\n<script>\nimport { AgGridVue } from 'ag-grid-vue'\nimport { request, MessageUtil, Format } from '@cndinfo/cube-web-utils'\nimport { AllModules } from '../../../utils/agGridModules'\nimport localLayout from '../../Layout/index.js'\nimport localDialog from '../../Dialog/index.js'\nimport localPagination from '../../Pagination/index.js'\nexport default {\n  name: 'TreeTable',\n  components: {\n    AgGridVue,\n    localLayout,\n    localDialog,\n    localPagination\n  },\n  props: {\n    // 标题\n    title: {\n      type: String,\n      default: ''\n    },\n    width: {\n      type: String,\n      default: '700px'\n    },\n    height: {\n      type: Number,\n      default: 450\n    },\n    // 是否插入body(嵌套时使用)\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    // 弹窗显隐\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    // 是否单选\n    radio: {\n      type: Boolean,\n      default: true\n    },\n    // 搜索框提示文字\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    // 是否展示搜索框\n    showSearch: {\n      type: Boolean,\n      default: false\n    },\n    // 是否需要分页\n    showPagination: {\n      type: Boolean,\n      default: true\n    },\n    // 是否展示确定/取消\n    onlyShow: {\n      type: Boolean,\n      default: false\n    },\n    // 禁用选择的key值\n    disableSelectKey: {\n      type: String,\n      default: ''\n    },\n    // 禁用选择的数组\n    disableSelected: {\n      type: Array,\n      default: () => {\n        return []\n      }\n    },\n    // 接口调用成功的回调函数\n    afterFetch: {\n      type: Function,\n      default: () => {}\n    },\n    selectChange: {\n      type: Function,\n      default: () => {}\n    },\n    customSelect: {\n      type: Boolean,\n      default: false\n    },\n    // ag-grid【列】配置\n    columnDefs: {\n      type: Array,\n      default: () => {\n        return [\n          { field: 'test1', headerName: '表头1', width: 100 },\n          { field: 'test2', headerName: '表头2', width: 100 }\n        ]\n      }\n    },\n    // agGrid表格显示全选按钮\n    selectAll: {\n      type: Boolean,\n      default: true\n    },\n    // 其他请求参数\n    otherParams: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    reqConfig: {\n      type: Object,\n      default: () => {\n        return {\n          url: '', // 接口api\n          method: '', // 请求方法\n          params: {}, // 请求参数\n          keyword: '', // 查询关键字\n          searchValue: '', // 搜索框默认值设置\n          dataFormat: {}, // 数据格式\n          treeProps: {},\n          updataUrl: false // 更新分页信息到路径上\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      treeData: [],\n      modules: AllModules,\n      gridColumnDefs: [],\n      // grid\n      gridOptions_rightData: {},\n      rowData_rightData: [],\n      selectedRightDataNodes: [],\n      // 分页配置\n      tempInitparams: {},\n      pagination: {\n        pageNo: 0,\n        pageSize: 10,\n        total: 0\n      },\n      filterText: '',\n      // ag-grid【列】默认配置\n      defColumnDefs: [\n        {\n          field: 'index',\n          headerName: '',\n          maxWidth: 40,\n          minWidth: 40,\n          checkboxSelection: true,\n          headerCheckboxSelection: !this.radio,\n          cellStyle: { 'justify-content': 'Center', textAlign: 'center' },\n          cellClass: 'grid-cell-centered',\n          // headerCheckboxSelection: this.selectAll ? true : false,\n          cellRenderer: (params) => {\n            // let str = ''\n            let isDisable = false\n            if (this.disableSelected && this.disableSelected.length) {\n              this.disableSelected.map((item) => {\n                if (item === params.data[this.disableSelectKey]) {\n                  isDisable = true\n                }\n              })\n            }\n            if (this.disableSelectKey && isDisable) {\n              params.eGridCell.children[0].children[0].style.setProperty(\n                'display',\n                'flex',\n                'important'\n              )\n              params.eGridCell.children[0].children[0].children[0].children[1].style.background =\n                '#e4e4e4'\n            }\n            // if (this.disableSelectKey && isDisable) {\n            //   params.colDef.cellStyle = {\n            //     'cursor': 'not-allowed'\n            //   }\n            //   params.node.setSelected(false)\n            //   params.eGridCell.children[0].children[0].children[1].style.cursor = 'not-allowed'\n            //   params.eGridCell.children[0].children[0].children[1].style.background = '#e4e4e4'\n            //   params.eGridCell.children[0].children[0].children[1].setAttribute('title', '不可选')\n            //   str = `<span class=\"ag-cell-value\" title=\"不可选\" ></span>`\n            // } else {\n            //   str = `<span class=\"ag-cell-value\" ></span>`\n            // }\n            // return str\n          }\n          // rowDrag: true,\n          // pinned: 'left',\n        }\n      ]\n    }\n  },\n  computed: {\n    isPlaceholder() {\n      return this.placeholder || this.$t('grid.others.pleaseEnterTheContent')\n    },\n    // 接口地址\n    url() {\n      return this.reqConfig.url\n    },\n    tableUrl() {\n      return this.reqConfig.tableUrl\n    },\n    //\n    updataUrl() {\n      return this.reqConfig.updataUrl\n    },\n    // 请求方法\n    method() {\n      return this.reqConfig.method || 'get'\n    },\n    // 请求参数\n    params() {\n      return this.reqConfig.params || {}\n    },\n    // 查询关键字\n    keyword() {\n      return this.reqConfig.keyword\n    },\n    // 查询内容\n    searchValue() {\n      return this.reqConfig.searchValue\n    },\n    // 数据格式\n    dataFormat() {\n      return this.reqConfig.dataFormat\n    },\n    // 当前grid配置\n    curConfig() {\n      // this.columnDefs.forEach(item => {\n      //   if (!item.width) {\n      //     item.width = 70\n      //   }\n      // })\n      if (this.onlyShow) return this.columnDefs\n      return this.defColumnDefs.concat(this.columnDefs)\n    },\n    // 单选/多选\n    rowSelection() {\n      // multiple / single\n      return this.radio ? 'single' : 'multiple'\n    },\n    treeUrl() {\n      return this.reqConfig.treeUrl\n    },\n    // 树展示label字段\n    treeProps() {\n      return (\n        this.reqConfig.treeProps || {\n          children: 'children',\n          label: 'name'\n        }\n      )\n    }\n  },\n  watch: {\n    visible(nv, ov) {\n      if (nv) {\n        this.filterText = this.searchValue\n        if (this.treeData && this.treeData.length === 0) {\n          this.queryTreeList()\n        }\n      } else {\n        this.treeData = []\n        this.rowData_rightData = []\n      }\n    }\n  },\n  created() {\n    // 获取初始分页配置\n    this.tempInitparams = Format.deepClone(this.params)\n    if (this.showPagination) {\n      this.pagination.pageNo = this.params.pageNo\n        ? this.params.pageNo\n        : this.pagination.pageNo\n      this.pagination.pageSize = this.params.pageSize\n        ? this.params.pageSize\n        : this.pagination.pageSize\n    }\n    // 初始化ag-grid\n    this.initGridOptions()\n  },\n  methods: {\n    // 点击左树获取右表\n    handleNodeClick(data) {\n      // console.log(data)\n      this.pagination.id = data.id\n      this.queryTableList()\n    },\n    // 获取【左树】列表\n    queryTreeList() {\n      request({\n        url: this.treeUrl,\n        data: {},\n        method: 'POST',\n        noLoading: true\n      })\n        .then((res) => {\n          this.treeData = res.data\n          this.$nextTick(() => {\n            // 设置当前key\n            this.$refs.tree.setCurrentKey(res.data[0].id)\n            // 获取当前key对应的右表（测试：后续根据真实接口调整）\n            this.handleNodeClick(res.data[0])\n          })\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n      // apiList\n      //   .postList({}, this.treeUrl)\n      //   .then((res) => {\n      //     this.treeData = res.data\n      //     this.$nextTick(() => {\n      //       // 设置当前key\n      //       this.$refs.tree.setCurrentKey(res.data[0].id)\n      //       // 获取当前key对应的右表（测试：后续根据真实接口调整）\n      //       this.handleNodeClick(res.data[0])\n      //     })\n      //   })\n      //   .catch((err) => {\n      //     console.log(err)\n      //   })\n    },\n    filterNode(value, data) {\n      if (!value) return true\n      if (!data.name) return false\n      return data[this.treeProps.label].indexOf(value) !== -1\n    },\n    initGridOptions() {\n      const _this = this\n      const autoGroupColumnDef = {\n        headerName: 'Athlete',\n        field: 'id',\n        width: 200,\n        cellRenderer: 'agGroupCellRenderer',\n        cellRendererParams: {\n          checkbox: function(params) {\n            return params.node.group === true\n          }\n        }\n      }\n      const gridOptions = {\n        suppressClipboardPaste: true,\n        embedFullWidthRows: true,\n        defaultColDef: {\n          filter: true,\n          sortable: true,\n          resizable: true\n        },\n        rowHeight: 28,\n        rowSelection: this.rowSelection, // multiple / single\n        rowMultiSelectWithClick: true,\n        autoGroupColumnDef: autoGroupColumnDef,\n        overlayLoadingTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t(\n          'grid.others.dataLoading'\n        )}...</span>`,\n        overlayNoRowsTemplate: `<span class=\"ag-overlay-loading-center\">${this.$t(\n          'grid.others.noData'\n        )}<span>`,\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        onGridReady: function(params) {\n          params.api.sizeColumnsToFit()\n        },\n        isRowSelectable: function(params) {\n          let isDisable = false\n          if (_this.disableSelected && _this.disableSelected.length) {\n            _this.disableSelected.map((item) => {\n              if (item === params.data[_this.disableSelectKey]) {\n                isDisable = true\n              }\n            })\n          }\n          return !(_this.disableSelectKey && isDisable)\n        },\n        onRowDoubleClicked: (e) => {\n          // 单选的情况下可以双击直接 = 确定\n          if (this.rowSelection === 'single') {\n            this.handleClose([e.data])\n            this.selectedRightDataNodes = []\n          }\n        }\n      }\n      this.gridColumnDefs = this.curConfig\n      this.gridOptions_rightData = gridOptions\n    },\n    // 数据赋值\n    assignData(rowData) {\n      if (this.dataFormat) {\n        if (this.dataFormat.key) {\n          setTimeout(() => {\n            this.gridOptions_rightData.api.setRowData(\n              rowData.data[this.dataFormat.key]\n            )\n          }, 300)\n        } else {\n          this.rowData_rightData = rowData.data\n        }\n        if (this.showPagination) {\n          if (this.dataFormat.total) {\n            this.pagination.total = rowData.data[this.dataFormat.total]\n          } else {\n            this.pagination.total = rowData.data.totalElements\n          }\n        }\n      } else {\n        this.rowData_rightData = rowData.data\n        if (this.showPagination) {\n          this.pagination.total = rowData.data.totalElements\n        }\n      }\n    },\n    // 格式化获取url\n    formatUrl(params, url) {\n      let urlStr = ''\n      if (url.indexOf('{') > -1) {\n        const urlArr = url.split('/')\n        // console.log('urlArr前--', urlArr)\n        urlArr.forEach((item, index) => {\n          if (index !== 0) {\n            let temp\n            if (item.indexOf('{') > -1) {\n              // console.log(item.substring(1, item.length - 1))\n              temp = `/${params[item.substring(1, item.length - 1)]}`\n            } else {\n              temp = `/${item}`\n            }\n            urlStr += temp\n          }\n        })\n      } else {\n        urlStr = url\n      }\n      console.log('urlStr--', urlStr)\n      // 需要将分页数据更新到路径上\n      if (this.updataUrl) {\n        urlStr = this.upDataUrl(urlStr)\n      }\n      return urlStr\n    },\n    // 获取列表\n    queryTableList(search) {\n      if (this.gridOptions_rightData && this.gridOptions_rightData.api) {\n        this.gridOptions_rightData.api.showLoadingOverlay()\n      }\n      // 有搜索框\n      if (this.showSearch && this.keyword) {\n        this.params[this.keyword] = this.filterText\n      }\n      // 有分页\n      if (this.showPagination) {\n        this.params.pageNo = this.pagination.pageNo\n        this.params.pageSize = this.pagination.pageSize\n        if (search) {\n          this.params.pageNo = this.tempInitparams.pageNo\n          this.params.pageSize = this.tempInitparams.pageSize\n        }\n      }\n      if (this.pagination.id) {\n        this.params.supParam = this.pagination.id\n      }\n      Object.assign(this.params, this.otherParams)\n      // 接口请求\n      if (this.method.toLowerCase() === 'get') {\n        request({\n          url: this.formatUrl(this.params, this.tableUrl),\n          method: this.method,\n          params: this.params,\n          noLoading: true\n        })\n          .then((rowData) => {\n            this.assignData(rowData)\n            this.$emit('afterFetch', rowData)\n          })\n          .catch((error) => {\n            console.log('查询错误：', error)\n            this.rowData_rightData = []\n          })\n      } else {\n        request({\n          url: this.formatUrl(this.params, this.tableUrl),\n          method: this.method,\n          data: this.params,\n          noLoading: true\n        })\n          .then((rowData) => {\n            this.assignData(rowData)\n            this.$emit('afterFetch', rowData)\n          })\n          .catch((error) => {\n            console.log('查询错误：', error)\n            this.rowData_rightData = []\n          })\n      }\n    },\n    // 【右表】切换分页数据\n    pageChange(obj) {\n      this.pagination.pageNo = obj.page\n      this.pagination.pageSize = obj.limit\n      this.queryTableList()\n    },\n    // 分页数据更新到url路径上\n    upDataUrl(v) {\n      if (!this.pagination.pageNo || !this.pagination.pageSize) {\n        return v\n      }\n      let urlArr = []\n      let url = ''\n      urlArr = v.split('/')\n      urlArr.pop()\n      urlArr.pop()\n      url = urlArr.join('/')\n      return `${url}/${this.pagination.pageNo}/${this.pagination.pageSize}`\n    },\n    // 确定选择\n    handleConfirm() {\n      if (this.selectedRightDataNodes.length === 0) {\n        MessageUtil.warning(this.$t('grid.tips.selectAtLeastOne'))\n      } else {\n        this.handleClose(this.selectedRightDataNodes, 'confirm')\n        this.selectedRightDataNodes = []\n      }\n    },\n    // 关闭/取消\n    handleClose(value = [], type = 'close') {\n      this.$emit('update:visible', false)\n      this.$emit('onSelect', value, type)\n    },\n    // 右表选择事件\n    onSelectionChangedRightData() {\n      if (this.customSelect) {\n        this.$emit('selectChange', this.gridOptions_rightData.api)\n        return\n      }\n      if (this.gridOptions_rightData && this.gridOptions_rightData.api) {\n        const selectedNodes = this.gridOptions_rightData.api.getSelectedNodes()\n        const selectedData = selectedNodes.map((node) => node.data)\n        this.selectedRightDataNodes = selectedData\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}