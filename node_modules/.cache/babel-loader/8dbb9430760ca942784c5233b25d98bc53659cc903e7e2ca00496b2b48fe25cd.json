{"ast":null,"code":"export default {\n  data() {\n    return {\n      isChecked: false,\n      indeterminate: false\n    };\n  },\n  computed: {\n    rowData() {\n      const {\n        dataKey = 'rowData'\n      } = this.params.context;\n      const rowData = this.params.context.componentParent[dataKey];\n      return rowData;\n    }\n  },\n  watch: {\n    rowData: {\n      deep: true,\n      handler() {\n        this.handlerCheckedState();\n      }\n    }\n  },\n  methods: {\n    handlerCheckedState() {\n      let isChecked = false;\n      let indeterminate = false;\n      const {\n        childrenListKey = '_details'\n      } = this.params.context;\n      const {\n        apiKey = 'gridApi'\n      } = this.params.context;\n      const fatherApi = this.params.context.componentParent[apiKey];\n      const fatherId = this.params.api.getRowNode('0').data.parentId;\n      const fatherInfo = fatherApi.getRowNode(fatherId);\n      if (!fatherInfo || !fatherInfo.data) {\n        isChecked = false;\n      }\n      isChecked = fatherInfo.data._selectedKeys.length === fatherInfo.data[childrenListKey].length;\n      this.isChecked = isChecked;\n      if (isChecked) indeterminate = false;else indeterminate = !fatherInfo ? false : fatherInfo.data._selectedKeys && !!fatherInfo.data._selectedKeys.length || fatherInfo.data._selected;\n      this.indeterminate = indeterminate;\n    },\n    handleCheckAllChange(e) {\n      const {\n        childrenListKey = '_details',\n        apiKey = 'gridApi',\n        childRowKey\n      } = this.params.context;\n      const fatherApi = this.params.context.componentParent[apiKey];\n      const fatherId = this.params.api.getRowNode('0').data.parentId;\n      const fatherInfo = fatherApi.getRowNode(fatherId);\n      fatherInfo.data._selected = e;\n      if (e && fatherInfo.data[childrenListKey]) {\n        fatherInfo.data._selectedKeys = fatherInfo.data[childrenListKey].map(item => {\n          if (!item._selectedDisabled) {\n            return item[childRowKey];\n          }\n        });\n      } else {\n        fatherInfo.data._selectedKeys = [];\n      }\n      const id = `detail_${fatherInfo.id}`;\n      const rowNode = fatherApi.getDetailGridInfo(id);\n      const parentTabel = this.$parent.$el;\n      const parentEl = parentTabel.querySelector(`[row-id=\"${id}\"] .ag-details-row`);\n      if (parentEl) {\n        const operate = e ? 'add' : 'remove';\n        Array.from(parentEl.children).forEach(item => item.classList[operate](...['ag-row-focus', 'ag-row-selected']));\n      }\n      rowNode && rowNode.api.refreshCells({\n        force: true\n      });\n      fatherApi.refreshCells({\n        force: true\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","isChecked","indeterminate","computed","rowData","dataKey","params","context","componentParent","watch","deep","handler","handlerCheckedState","methods","childrenListKey","apiKey","fatherApi","fatherId","api","getRowNode","parentId","fatherInfo","_selectedKeys","length","_selected","handleCheckAllChange","e","childRowKey","map","item","_selectedDisabled","id","rowNode","getDetailGridInfo","parentTabel","$parent","$el","parentEl","querySelector","operate","Array","from","children","forEach","classList","refreshCells","force"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/AgGridExtend/childHeaderSelect.vue"],"sourcesContent":["<template>\n  <el-checkbox\n    v-model=\"isChecked\"\n    :indeterminate=\"indeterminate\"\n    @change=\"handleCheckAllChange\"\n  />\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isChecked: false,\n      indeterminate: false\n    }\n  },\n  computed: {\n    rowData() {\n      const { dataKey = 'rowData' } = this.params.context\n      const rowData = this.params.context.componentParent[dataKey]\n      return rowData\n    }\n  },\n  watch: {\n    rowData: {\n      deep: true,\n      handler() {\n        this.handlerCheckedState()\n      }\n    }\n  },\n  methods: {\n    handlerCheckedState() {\n      let isChecked = false\n      let indeterminate = false\n      const { childrenListKey = '_details' } = this.params.context\n      const { apiKey = 'gridApi' } = this.params.context\n      const fatherApi = this.params.context.componentParent[apiKey]\n      const fatherId = this.params.api.getRowNode('0').data.parentId\n      const fatherInfo = fatherApi.getRowNode(fatherId)\n      if (!fatherInfo || !fatherInfo.data) { isChecked = false }\n      isChecked = fatherInfo.data._selectedKeys.length === fatherInfo.data[childrenListKey].length\n      this.isChecked = isChecked\n      if (isChecked) indeterminate = false\n      else indeterminate = !fatherInfo ? false : (fatherInfo.data._selectedKeys && !!fatherInfo.data._selectedKeys.length) || fatherInfo.data._selected\n      this.indeterminate = indeterminate\n    },\n    handleCheckAllChange(e) {\n      const { childrenListKey = '_details', apiKey = 'gridApi', childRowKey } = this.params.context\n      const fatherApi = this.params.context.componentParent[apiKey]\n      const fatherId = this.params.api.getRowNode('0').data.parentId\n      const fatherInfo = fatherApi.getRowNode(fatherId)\n      fatherInfo.data._selected = e\n      if (e && fatherInfo.data[childrenListKey]) {\n        fatherInfo.data._selectedKeys = fatherInfo.data[childrenListKey].map(item => {\n          if (!item._selectedDisabled) {\n            return item[childRowKey]\n          }\n        })\n      } else {\n        fatherInfo.data._selectedKeys = []\n      }\n      const id = `detail_${fatherInfo.id}`\n      const rowNode = fatherApi.getDetailGridInfo(id)\n      const parentTabel = this.$parent.$el\n      const parentEl = parentTabel.querySelector(`[row-id=\"${id}\"] .ag-details-row`)\n      if (parentEl) {\n        const operate = e ? 'add' : 'remove'\n        Array.from(parentEl.children).forEach(item => item.classList[operate](...['ag-row-focus', 'ag-row-selected']))\n      }\n      rowNode && rowNode.api.refreshCells({ force: true })\n      fatherApi.refreshCells({ force: true })\n    }\n  }\n}\n</script>\n"],"mappings":"AASA;EACAA,KAAA;IACA;MACAC,SAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACAC,QAAA;MACA;QAAAC,OAAA;MAAA,SAAAC,MAAA,CAAAC,OAAA;MACA,MAAAH,OAAA,QAAAE,MAAA,CAAAC,OAAA,CAAAC,eAAA,CAAAH,OAAA;MACA,OAAAD,OAAA;IACA;EACA;EACAK,KAAA;IACAL,OAAA;MACAM,IAAA;MACAC,QAAA;QACA,KAAAC,mBAAA;MACA;IACA;EACA;EACAC,OAAA;IACAD,oBAAA;MACA,IAAAX,SAAA;MACA,IAAAC,aAAA;MACA;QAAAY,eAAA;MAAA,SAAAR,MAAA,CAAAC,OAAA;MACA;QAAAQ,MAAA;MAAA,SAAAT,MAAA,CAAAC,OAAA;MACA,MAAAS,SAAA,QAAAV,MAAA,CAAAC,OAAA,CAAAC,eAAA,CAAAO,MAAA;MACA,MAAAE,QAAA,QAAAX,MAAA,CAAAY,GAAA,CAAAC,UAAA,MAAAnB,IAAA,CAAAoB,QAAA;MACA,MAAAC,UAAA,GAAAL,SAAA,CAAAG,UAAA,CAAAF,QAAA;MACA,KAAAI,UAAA,KAAAA,UAAA,CAAArB,IAAA;QAAAC,SAAA;MAAA;MACAA,SAAA,GAAAoB,UAAA,CAAArB,IAAA,CAAAsB,aAAA,CAAAC,MAAA,KAAAF,UAAA,CAAArB,IAAA,CAAAc,eAAA,EAAAS,MAAA;MACA,KAAAtB,SAAA,GAAAA,SAAA;MACA,IAAAA,SAAA,EAAAC,aAAA,cACAA,aAAA,IAAAmB,UAAA,WAAAA,UAAA,CAAArB,IAAA,CAAAsB,aAAA,MAAAD,UAAA,CAAArB,IAAA,CAAAsB,aAAA,CAAAC,MAAA,IAAAF,UAAA,CAAArB,IAAA,CAAAwB,SAAA;MACA,KAAAtB,aAAA,GAAAA,aAAA;IACA;IACAuB,qBAAAC,CAAA;MACA;QAAAZ,eAAA;QAAAC,MAAA;QAAAY;MAAA,SAAArB,MAAA,CAAAC,OAAA;MACA,MAAAS,SAAA,QAAAV,MAAA,CAAAC,OAAA,CAAAC,eAAA,CAAAO,MAAA;MACA,MAAAE,QAAA,QAAAX,MAAA,CAAAY,GAAA,CAAAC,UAAA,MAAAnB,IAAA,CAAAoB,QAAA;MACA,MAAAC,UAAA,GAAAL,SAAA,CAAAG,UAAA,CAAAF,QAAA;MACAI,UAAA,CAAArB,IAAA,CAAAwB,SAAA,GAAAE,CAAA;MACA,IAAAA,CAAA,IAAAL,UAAA,CAAArB,IAAA,CAAAc,eAAA;QACAO,UAAA,CAAArB,IAAA,CAAAsB,aAAA,GAAAD,UAAA,CAAArB,IAAA,CAAAc,eAAA,EAAAc,GAAA,CAAAC,IAAA;UACA,KAAAA,IAAA,CAAAC,iBAAA;YACA,OAAAD,IAAA,CAAAF,WAAA;UACA;QACA;MACA;QACAN,UAAA,CAAArB,IAAA,CAAAsB,aAAA;MACA;MACA,MAAAS,EAAA,aAAAV,UAAA,CAAAU,EAAA;MACA,MAAAC,OAAA,GAAAhB,SAAA,CAAAiB,iBAAA,CAAAF,EAAA;MACA,MAAAG,WAAA,QAAAC,OAAA,CAAAC,GAAA;MACA,MAAAC,QAAA,GAAAH,WAAA,CAAAI,aAAA,aAAAP,EAAA;MACA,IAAAM,QAAA;QACA,MAAAE,OAAA,GAAAb,CAAA;QACAc,KAAA,CAAAC,IAAA,CAAAJ,QAAA,CAAAK,QAAA,EAAAC,OAAA,CAAAd,IAAA,IAAAA,IAAA,CAAAe,SAAA,CAAAL,OAAA;MACA;MACAP,OAAA,IAAAA,OAAA,CAAAd,GAAA,CAAA2B,YAAA;QAAAC,KAAA;MAAA;MACA9B,SAAA,CAAA6B,YAAA;QAAAC,KAAA;MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}