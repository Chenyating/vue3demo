{"ast":null,"code":"import '../../../../lib/styles/components/ThemeEditor.scss';\nimport { zoom, getColorScaleCssVariable } from './util';\nimport EditorColor from './editorColor.vue';\nimport EditorSpace from './editorSpace.vue';\nexport default {\n  name: 'ThemeEditor',\n  components: {\n    EditorColor,\n    EditorSpace\n  },\n  props: {\n    themeConfig: {\n      type: Array,\n      default: () => []\n    },\n    theme: {\n      type: String,\n      default: 'theme-default'\n    }\n  },\n  data() {\n    return {\n      // 编辑配置\n      showEditorColor: false,\n      showEditorSpace: false,\n      // 缩放配置\n      scale: false,\n      spaceClass: 'spacing-default',\n      scaleClassName: ['var100', 'var110', 'var125', 'var137', 'var150'],\n      spaceClassName: ['spacing-default', 'spacing-efficient', 'spacing-compact'],\n      // 主题配置\n      themeClass: this.theme,\n      themeColor: '',\n      themeClassName: [{\n        name: '默认',\n        value: 'theme-default',\n        color: 'gray'\n      }, {\n        name: '活力蓝',\n        value: 'theme-blue',\n        color: '#0047c3'\n      }, {\n        name: '深邃黑',\n        value: 'theme-black',\n        color: '#23262E'\n      }],\n      // style\n      themeStyle: '',\n      colorStyle: '',\n      spaceStyle: ''\n    };\n  },\n  computed: {\n    themeList() {\n      return this.themeClassName.concat(this.themeConfig);\n    }\n  },\n  watch: {\n    scale(newVal, oldVal) {\n      if (newVal) {\n        window.addEventListener('resize', this.doScale);\n      }\n    },\n    themeStyle(newVal, oldVal) {\n      document.body.style = newVal + this.colorStyle + this.spaceStyle;\n    }\n  },\n  mounted() {\n    // 判断组件\n    var localColor = JSON.parse(localStorage.getItem('colorStyle'));\n    if (localColor !== null) {\n      this.colorStyle = localColor.saveStyles;\n      this.getComponentStyle({\n        type: 'color',\n        saveStyles: this.colorStyle\n      });\n    }\n    var localSpace = JSON.parse(localStorage.getItem('spaceStyle'));\n    if (localSpace !== null) {\n      this.spaceStyle = localSpace.saveStyles;\n      this.getComponentStyle({\n        type: 'space',\n        saveStyles: this.spaceStyle\n      });\n    }\n    // 判断主题\n    var localTheme = localStorage.getItem('themeClass');\n    if (localTheme !== null) {\n      this.themeClass = localTheme;\n      if (localTheme === '自定义颜色') {\n        this.themeColor = localStorage.getItem('themeColor');\n        this.addThemeStyle(this.themeColor);\n      } else {\n        this.addClass(this.themeClass, 'themeClass');\n      }\n    } else {\n      this.addClass(this.themeClass, 'themeClass');\n    }\n    // 判断布局\n    if (localStorage.getItem('spaceClass')) {\n      this.addClass(localStorage.getItem('spaceClass'), 'spaceClass');\n    } else {\n      this.addClass('spacing-default', 'spaceClass');\n    }\n  },\n  methods: {\n    // 缩放逻辑\n    doScale() {\n      const BASE_SCREEN_WIDTH = 1920;\n      const {\n        dpi,\n        browserScale,\n        windowsScale,\n        screenWidth\n      } = zoom();\n      console.log('-------------zoom--------------');\n      console.log('dpi', dpi);\n      console.log('browserScale', browserScale);\n      console.log('windowsScale', windowsScale);\n      console.log('screenWidth', screenWidth);\n      // 针对屏幕尺寸为 1920 及以下的系统缩放和浏览器进行处理\n\n      // 屏幕大于 1920，视为高分辨率屏幕，理应有足够空间显示内容，因此不对用户的缩放行为进行处理\n      if (screenWidth <= BASE_SCREEN_WIDTH && windowsScale > 0.99 && browserScale > 0.99) {\n        // 系统缩放实际缩放不能直接取 dpi, 而是根据取当前屏幕宽度与基准宽度的比例\n        const systemScale = BASE_SCREEN_WIDTH / screenWidth;\n        // 系统缩放 * 浏览器缩放 = 整体缩放比例\n        const realScale = systemScale * browserScale;\n        console.log(`当前屏幕宽度小于 1920，实际缩放比例: ${realScale} = ${systemScale} * ${browserScale}`);\n        if (realScale >= 1 && realScale < 1.1) {\n          setFontSize(100);\n          this.addClass('var100', 'scaleClass');\n        }\n        if (realScale >= 1.1 && realScale < 1.25) {\n          setFontSize(90);\n          this.addClass('var110', 'scaleClass');\n        }\n        if (realScale >= 1.25 && realScale < 1.37) {\n          setFontSize(80);\n          this.addClass('var125', 'scaleClass');\n        }\n        if (realScale >= 1.37 && realScale < 1.5) {\n          setFontSize(72);\n          this.addClass('var137', 'scaleClass');\n        }\n        if (realScale >= 1.5 && realScale < 1.75) {\n          setFontSize(72);\n          this.addClass('var150', 'scaleClass');\n        }\n        if (realScale >= 1.75) {\n          setFontSize(66);\n        }\n      }\n      function setFontSize(size) {\n        document.documentElement.style.fontSize = size + 'px';\n      }\n    },\n    // 新增class类名\n    addClass(newClass, type) {\n      // body的class新增：缩放、主题、紧凑\n      const bodyClass = document.body.classList;\n      bodyClass.remove(this[type]);\n      this.$nextTick(() => {\n        bodyClass.add(newClass);\n        this[type] = newClass;\n      });\n      // ag-表格：颜色、缩放、紧凑相关\n      const el = document.querySelectorAll('.ag-theme-balham');\n      for (let i = 0; i < el.length; i++) {\n        el[i].classList.remove(this[type]);\n        this.$nextTick(() => {\n          el[i].classList.add(newClass);\n          this[type] = newClass;\n        });\n      }\n      // 保存状态\n      if (type === 'spaceClass') {\n        localStorage.setItem('spaceClass', newClass);\n      }\n      if (type === 'themeClass') {\n        localStorage.setItem('themeClass', newClass);\n        this.checkSidebar();\n      }\n    },\n    // sidebar颜色不为灰色的时候marginRight为12px\n    checkSidebar() {\n      this.$nextTick(() => {\n        const elem = document.querySelector('.sidebar-wrapper');\n        if (elem) {\n          const styles = getComputedStyle(elem);\n          var curSidebarBg = styles.getPropertyValue('background-color');\n          if (curSidebarBg !== 'rgb(237, 239, 242)') {\n            const siderRedElements = document.querySelectorAll('.sidebar-container');\n            siderRedElements.forEach(element => {\n              element.style.marginRight = '12px';\n            });\n          } else {\n            const siderRedElements = document.querySelectorAll('.sidebar-container');\n            siderRedElements.forEach(element => {\n              element.style.marginRight = '0px';\n            });\n          }\n        }\n      });\n    },\n    // style插入主题色\n    addThemeStyle(color) {\n      document.body.classList.remove(this.themeClass);\n      this.themeClass = '自定义颜色';\n      this.themeStyle = getColorScaleCssVariable(color, 'primary');\n      localStorage.setItem('themeColor', color);\n      localStorage.setItem('themeClass', '自定义颜色');\n    },\n    changeTheme(newTheme) {\n      if (newTheme === '自定义颜色') {\n        document.body.classList.remove(this.themeClass);\n        this.themeClass = '自定义颜色';\n        this.addThemeStyle(this.themeColor);\n      } else {\n        this.themeStyle = '';\n        this.addClass(newTheme, 'themeClass');\n      }\n    },\n    // 编辑处理\n    ifEditor(type, ifEditor) {\n      switch (type) {\n        case 'color':\n          this.showEditorColor = ifEditor;\n          break;\n        case 'space':\n          this.showEditorSpace = ifEditor;\n          break;\n        default:\n          break;\n      }\n    },\n    getComponentStyle(obj) {\n      switch (obj.type) {\n        case 'color':\n          this.colorStyle = obj.saveStyles;\n          break;\n        case 'space':\n          this.spaceStyle = obj.saveStyles;\n          break;\n        default:\n          break;\n      }\n      document.body.style = this.themeStyle + this.colorStyle + this.spaceStyle;\n    }\n  }\n};","map":{"version":3,"names":["zoom","getColorScaleCssVariable","EditorColor","EditorSpace","name","components","props","themeConfig","type","Array","default","theme","String","data","showEditorColor","showEditorSpace","scale","spaceClass","scaleClassName","spaceClassName","themeClass","themeColor","themeClassName","value","color","themeStyle","colorStyle","spaceStyle","computed","themeList","concat","watch","newVal","oldVal","window","addEventListener","doScale","document","body","style","mounted","localColor","JSON","parse","localStorage","getItem","saveStyles","getComponentStyle","localSpace","localTheme","addThemeStyle","addClass","methods","BASE_SCREEN_WIDTH","dpi","browserScale","windowsScale","screenWidth","console","log","systemScale","realScale","setFontSize","size","documentElement","fontSize","newClass","bodyClass","classList","remove","$nextTick","add","el","querySelectorAll","i","length","setItem","checkSidebar","elem","querySelector","styles","getComputedStyle","curSidebarBg","getPropertyValue","siderRedElements","forEach","element","marginRight","changeTheme","newTheme","ifEditor","obj"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/ThemeEditor/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"cube-theme-editor\">\n    <el-popover width=\"250\" trigger=\"click\">\n      <div class=\"editor-tit\">\n        主题色\n        <el-tooltip effect=\"dark\" content=\"组件配色\" placement=\"top-start\">\n          <el-button\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            size=\"mini\"\n            @click=\"ifEditor('color', true)\"\n          ></el-button>\n        </el-tooltip>\n      </div>\n      <el-row justify=\"space-between\">\n        <el-col>\n          <el-tooltip\n            v-for=\"(item, index) in themeList\"\n            :key=\"index\"\n            effect=\"dark\"\n            :content=\"item.name\"\n            placement=\"top-start\"\n          >\n            <div\n              class=\"color-bar\"\n              :class=\"{ cur: themeClass == item.value }\"\n              @click=\"changeTheme(item.value)\"\n            >\n              <div\n                class=\"color-bar-inner\"\n                :style=\"'background:' + item.color\"\n              ></div>\n            </div>\n          </el-tooltip>\n          <el-tooltip effect=\"dark\" content=\"自定义颜色\" placement=\"top-start\">\n            <el-color-picker\n              v-model=\"themeColor\"\n              class=\"color-bar\"\n              :class=\"{ cur: themeClass == '自定义颜色' }\"\n              size=\"mini\"\n              @change=\"addThemeStyle\"\n              @active-change=\"addThemeStyle\"\n            ></el-color-picker>\n          </el-tooltip>\n        </el-col>\n      </el-row>\n      <div class=\"editor-tit\">\n        布局\n        <el-tooltip effect=\"dark\" content=\"更多\" placement=\"top-start\">\n          <el-button\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            size=\"mini\"\n            @click=\"ifEditor('space', true)\"\n          ></el-button>\n        </el-tooltip>\n      </div>\n      <el-row>\n        <el-col>\n          <el-radio-group\n            :value=\"spaceClass\"\n            @input=\"addClass($event, 'spaceClass')\"\n          >\n            <el-radio label=\"spacing-default\">默认</el-radio>\n            <el-radio label=\"spacing-efficient\">高效</el-radio>\n            <el-radio label=\"spacing-compact\">紧凑</el-radio>\n          </el-radio-group>\n        </el-col>\n      </el-row>\n      <div class=\"editor-tit\">缩放：</div>\n      <el-row>\n        <el-col>\n          <el-switch\n            v-model=\"scale\"\n            active-color=\"#13ce66\"\n            inactive-color=\"#ff4949\"\n          >\n          </el-switch>\n        </el-col>\n      </el-row>\n      <cnd-icon slot=\"reference\" name=\"cnd-eyes\" />\n    </el-popover>\n    <EditorColor\n      :show-editor=\"showEditorColor\"\n      @ifEditor=\"ifEditor\"\n      @getComponentStyle=\"getComponentStyle\"\n    />\n    <EditorSpace\n      :show-editor=\"showEditorSpace\"\n      @ifEditor=\"ifEditor\"\n      @getComponentStyle=\"getComponentStyle\"\n    />\n  </div>\n</template>\n\n<script>\nimport '../../../../lib/styles/components/ThemeEditor.scss'\nimport { zoom, getColorScaleCssVariable } from './util'\nimport EditorColor from './editorColor.vue'\nimport EditorSpace from './editorSpace.vue'\n\nexport default {\n  name: 'ThemeEditor',\n  components: {\n    EditorColor,\n    EditorSpace\n  },\n  props: {\n    themeConfig: {\n      type: Array,\n      default: () => []\n    },\n    theme: {\n      type: String,\n      default: 'theme-default'\n    }\n  },\n  data() {\n    return {\n      // 编辑配置\n      showEditorColor: false,\n      showEditorSpace: false,\n      // 缩放配置\n      scale: false,\n      spaceClass: 'spacing-default',\n      scaleClassName: ['var100', 'var110', 'var125', 'var137', 'var150'],\n      spaceClassName: [\n        'spacing-default',\n        'spacing-efficient',\n        'spacing-compact'\n      ],\n      // 主题配置\n      themeClass: this.theme,\n      themeColor: '',\n      themeClassName: [\n        {\n          name: '默认',\n          value: 'theme-default',\n          color: 'gray'\n        },\n        {\n          name: '活力蓝',\n          value: 'theme-blue',\n          color: '#0047c3'\n        },\n        {\n          name: '深邃黑',\n          value: 'theme-black',\n          color: '#23262E'\n        }\n      ],\n      // style\n      themeStyle: '',\n      colorStyle: '',\n      spaceStyle: ''\n    }\n  },\n  computed: {\n    themeList() {\n      return this.themeClassName.concat(this.themeConfig)\n    }\n  },\n  watch: {\n    scale(newVal, oldVal) {\n      if (newVal) {\n        window.addEventListener('resize', this.doScale)\n      }\n    },\n    themeStyle(newVal, oldVal) {\n      document.body.style = newVal + this.colorStyle + this.spaceStyle\n    }\n  },\n  mounted() {\n    // 判断组件\n    var localColor = JSON.parse(localStorage.getItem('colorStyle'))\n    if (localColor !== null) {\n      this.colorStyle = localColor.saveStyles\n      this.getComponentStyle({\n        type: 'color',\n        saveStyles: this.colorStyle\n      })\n    }\n    var localSpace = JSON.parse(localStorage.getItem('spaceStyle'))\n    if (localSpace !== null) {\n      this.spaceStyle = localSpace.saveStyles\n      this.getComponentStyle({\n        type: 'space',\n        saveStyles: this.spaceStyle\n      })\n    }\n    // 判断主题\n    var localTheme = localStorage.getItem('themeClass')\n    if (localTheme !== null) {\n      this.themeClass = localTheme\n      if (localTheme === '自定义颜色') {\n        this.themeColor = localStorage.getItem('themeColor')\n        this.addThemeStyle(this.themeColor)\n      } else {\n        this.addClass(this.themeClass, 'themeClass')\n      }\n    } else {\n      this.addClass(this.themeClass, 'themeClass')\n    }\n    // 判断布局\n    if (localStorage.getItem('spaceClass')) {\n      this.addClass(localStorage.getItem('spaceClass'), 'spaceClass')\n    } else {\n      this.addClass('spacing-default', 'spaceClass')\n    }\n  },\n  methods: {\n    // 缩放逻辑\n    doScale() {\n      const BASE_SCREEN_WIDTH = 1920\n      const { dpi, browserScale, windowsScale, screenWidth } = zoom()\n      console.log('-------------zoom--------------')\n      console.log('dpi', dpi)\n      console.log('browserScale', browserScale)\n      console.log('windowsScale', windowsScale)\n      console.log('screenWidth', screenWidth)\n      // 针对屏幕尺寸为 1920 及以下的系统缩放和浏览器进行处理\n\n      // 屏幕大于 1920，视为高分辨率屏幕，理应有足够空间显示内容，因此不对用户的缩放行为进行处理\n      if (\n        screenWidth <= BASE_SCREEN_WIDTH &&\n        windowsScale > 0.99 &&\n        browserScale > 0.99\n      ) {\n        // 系统缩放实际缩放不能直接取 dpi, 而是根据取当前屏幕宽度与基准宽度的比例\n        const systemScale = BASE_SCREEN_WIDTH / screenWidth\n        // 系统缩放 * 浏览器缩放 = 整体缩放比例\n        const realScale = systemScale * browserScale\n\n        console.log(\n          `当前屏幕宽度小于 1920，实际缩放比例: ${realScale} = ${systemScale} * ${browserScale}`\n        )\n        if (realScale >= 1 && realScale < 1.1) {\n          setFontSize(100)\n          this.addClass('var100', 'scaleClass')\n        }\n        if (realScale >= 1.1 && realScale < 1.25) {\n          setFontSize(90)\n          this.addClass('var110', 'scaleClass')\n        }\n        if (realScale >= 1.25 && realScale < 1.37) {\n          setFontSize(80)\n          this.addClass('var125', 'scaleClass')\n        }\n        if (realScale >= 1.37 && realScale < 1.5) {\n          setFontSize(72)\n          this.addClass('var137', 'scaleClass')\n        }\n        if (realScale >= 1.5 && realScale < 1.75) {\n          setFontSize(72)\n          this.addClass('var150', 'scaleClass')\n        }\n        if (realScale >= 1.75) {\n          setFontSize(66)\n        }\n      }\n      function setFontSize(size) {\n        document.documentElement.style.fontSize = size + 'px'\n      }\n    },\n    // 新增class类名\n    addClass(newClass, type) {\n      // body的class新增：缩放、主题、紧凑\n      const bodyClass = document.body.classList\n      bodyClass.remove(this[type])\n      this.$nextTick(() => {\n        bodyClass.add(newClass)\n        this[type] = newClass\n      })\n      // ag-表格：颜色、缩放、紧凑相关\n      const el = document.querySelectorAll('.ag-theme-balham')\n      for (let i = 0; i < el.length; i++) {\n        el[i].classList.remove(this[type])\n        this.$nextTick(() => {\n          el[i].classList.add(newClass)\n          this[type] = newClass\n        })\n      }\n      // 保存状态\n      if (type === 'spaceClass') {\n        localStorage.setItem('spaceClass', newClass)\n      }\n      if (type === 'themeClass') {\n        localStorage.setItem('themeClass', newClass)\n        this.checkSidebar()\n      }\n    },\n    // sidebar颜色不为灰色的时候marginRight为12px\n    checkSidebar() {\n      this.$nextTick(() => {\n        const elem = document.querySelector('.sidebar-wrapper')\n        if (elem) {\n          const styles = getComputedStyle(elem)\n          var curSidebarBg = styles.getPropertyValue('background-color')\n          if (curSidebarBg !== 'rgb(237, 239, 242)') {\n            const siderRedElements =\n              document.querySelectorAll('.sidebar-container')\n            siderRedElements.forEach((element) => {\n              element.style.marginRight = '12px'\n            })\n          } else {\n            const siderRedElements =\n              document.querySelectorAll('.sidebar-container')\n            siderRedElements.forEach((element) => {\n              element.style.marginRight = '0px'\n            })\n          }\n        }\n      })\n    },\n    // style插入主题色\n    addThemeStyle(color) {\n      document.body.classList.remove(this.themeClass)\n      this.themeClass = '自定义颜色'\n      this.themeStyle = getColorScaleCssVariable(color, 'primary')\n      localStorage.setItem('themeColor', color)\n      localStorage.setItem('themeClass', '自定义颜色')\n    },\n    changeTheme(newTheme) {\n      if (newTheme === '自定义颜色') {\n        document.body.classList.remove(this.themeClass)\n        this.themeClass = '自定义颜色'\n        this.addThemeStyle(this.themeColor)\n      } else {\n        this.themeStyle = ''\n        this.addClass(newTheme, 'themeClass')\n      }\n    },\n    // 编辑处理\n    ifEditor(type, ifEditor) {\n      switch (type) {\n        case 'color':\n          this.showEditorColor = ifEditor\n          break\n        case 'space':\n          this.showEditorSpace = ifEditor\n          break\n\n        default:\n          break\n      }\n    },\n    getComponentStyle(obj) {\n      switch (obj.type) {\n        case 'color':\n          this.colorStyle = obj.saveStyles\n          break\n        case 'space':\n          this.spaceStyle = obj.saveStyles\n          break\n\n        default:\n          break\n      }\n      document.body.style = this.themeStyle + this.colorStyle + this.spaceStyle\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}