{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nimport Validate from \"./validate.js\";\nimport { Decimal } from \"decimal.js/decimal.mjs\";\n/**\n * Created by chenjianbin on 2020/04/8.\n */\n\n/**\n * 数字金额转换为中文大写数字\n * @param {*} n 【必填】需要转换的数字金额\n */\nfunction digitalConversion(n) {\n  if (Validate.isUndeFinedOrNullOrBlank(n) || isNaN(Number(n))) return n;\n  const fraction = [\"角\", \"分\"];\n  const digit = [\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"];\n  const unit = [[\"元\", \"万\", \"亿\"], [\"\", \"拾\", \"佰\", \"仟\"]];\n  const IsNum = Number(n);\n  if (!isNaN(IsNum)) {\n    const head = n < 0 ? \"欠\" : \"\";\n    n = Math.abs(n);\n    let s = \"\";\n    for (let i = 0; i < fraction.length; i++) {\n      s += (digit[Math.floor(n * 100 / 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, \"\");\n    }\n    s = s || \"整\";\n    n = Math.floor(n);\n    for (let i = 0; i < unit[0].length && n > 0; i++) {\n      let p = \"\";\n      for (let j = 0; j < unit[1].length && n > 0; j++) {\n        p = digit[n % 10] + unit[1][j] + p;\n        n = Math.floor(n / 10);\n      }\n      s = p.replace(/(零.)*零$/, \"\").replace(/^$/, \"零\") + unit[0][i] + s;\n    }\n    return head + s.replace(/(零.)*零元/, \"元\").replace(/(零.)+/g, \"零\").replace(/^整$/, \"零元整\");\n  } else {\n    return \"\";\n  }\n}\n\n/**\n * 数字金额转为货币格式（10,000.00）\n * @param {*} value 【必填】数字金额\n */\nfunction formatPrice(value, digits = null) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return 0.0;\n  }\n  value = keepDecimalPlaces(value, digits);\n  value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function (match, p1, p2) {\n    return p1 + \",\";\n  });\n  return value;\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return '0.00'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 || !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // value = value.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //   return p1 + ','\n  // })\n  // return value\n}\n\n/**\n * 数字转为千分符展示，并保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} zero【选填】值不为数值时，是否返回空\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n */\n// function formatThousandthSign(value, digits = null, places = false ) {\nfunction formatThousandthSign(value, digits = null, zero = true, places = false) {\n  value = keepDecimalPlaces(value, digits, zero, places);\n  value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function (match, p1, p2) {\n    return p1 + \",\";\n  });\n  return value;\n\n  // if (typeof(value) !== 'number' && !zero) return ''\n  // if (!value) return '0'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 ? value.toFixed(0) : !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = digits === 0 ? parseFloat(value) : parseFloat(value) === parseFloat(Number(value).toFixed(2)) ? Number(value).toFixed(2) : value\n  //   value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     // value = value.toString().replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // if (digits){\n  //   value = value.toFixed(digits < 2 && places ? digits : 2)\n  //   return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  // }\n  // value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //   return p1 + ','\n  // })\n  // return value\n\n  // if (!value) return '0'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // // console.log(value,'value')\n  // var hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (digits) {\n  //   value = Number(value)\n  //   value = digits === 0 ? value.toFixed(digits) + '.' : hasDot ? (digits ? value.toFixed(digits) : value) : value.toFixed(digits)\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   if (digits === 0 || (!hasDot && !digits)) {\n  //     // 如果n为0或者传入的num是整数并且没有指定整数的保留位数，则去掉前面操作中的小数位\n  //     value = value.substring(0, value.indexOf('.'))\n  //   }\n  //   return value\n  // }\n  // if (hasDot) {\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return value\n  // const tempV = value.toString()\n  // if (tempV.indexOf('.') > -1) {\n  //   let valArr = tempV.split('.')\n  //   if (digits) {\n  //     if (digits === 0) {\n  //       return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  //     } else if (digits > 0) {\n  //       return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + '.' + valArr[1].substr(0, digits)\n  //     }\n  //   }\n  //   return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + '.' + valArr[1]\n  // } else {\n  //   if (digits) {\n  //     return Number(tempV).toFixed(digits).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  //   }\n  //   return tempV.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  // }\n}\n/**\n * 数字保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n */\nfunction keepDecimalPlaces(value, digits = null, zero = true, places = false, integerDigits = 2) {\n  if (isNaN(Number(value)) && !zero) return \"\";\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return 0; // value为空或者不为数值 返回0\n  if (isNaN(Number(digits)) || digits < 0) return value; // digits不为数值或为负数 返回value\n  // value = parseFloat(value)\n  const hasDot = Validate.isDot(value); // 检测是否是小数\n  if (hasDot) {\n    value = new Decimal(value).toFixed(digits === null ? 2 : hasDot < digits ? hasDot < 2 ? 2 : hasDot : digits);\n    return value;\n  }\n  if (digits === 0) {\n    value = new Decimal(value).toFixed(digits);\n  } else {\n    value = places ? value : new Decimal(value).toFixed(integerDigits);\n  }\n  return value;\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return '0.00'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 ? value.toFixed(0) : !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = digits === 0 ? parseFloat(value) : parseFloat(value) === parseFloat(Number(value).toFixed(2)) ? Number(value).toFixed(2) : value\n  //   return value\n  // }\n  // return value.toFixed(2)\n\n  // if (!value) return 0\n  // if (typeof value !== 'number') return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // var hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (digits) {\n  //   value = digits === 0\n  //     ? value.toFixed(digits) + '.'\n  //     : hasDot\n  //       ? (digits ? value.toFixed(digits) : value)\n  //       : value.toFixed(digits)\n  //   if (digits === 0 || (!hasDot && !digits)) {\n  //     // 如果n为0或者传入的num是整数并且没有指定整数的保留位数，则去掉前面操作中的小数位\n  //     value = value.substring(0, value.indexOf('.'))\n  //   }\n  //   return value\n  // }\n}\n\n/**\n * 货币格式（千分符）转为数字\n * @param {*} value 【必填】货币格式\n */\nfunction toNum(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value)) return value;\n  const reg = new RegExp(\",\", \"g\");\n  const tempArr = value.toString().split(\".\");\n  if (tempArr[1] === \"00\") {\n    return tempArr[0].replace(reg, \"\");\n  }\n  return value.toString().replace(reg, \"\");\n}\n\n/**\n * 数字金额补齐两位小数\n * @param {*} value 【必填】数字金额\n */\nfunction toFixNum(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value;\n  }\n  return (Number(value) / 1).toFixed(2);\n}\n\n/**\n * 数字转为百分比\n * @param {*} value 【必填】数字\n */\nfunction toPercent(value, digits = null) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value;\n  }\n  let afterPointLen = 0;\n  if (value.toString().indexOf(\".\") > -1) {\n    afterPointLen = value.toString().split(\".\")[1].length;\n  }\n  let str;\n  if (afterPointLen > 1) {\n    str = (Number(value) * 100).toFixed(digits || afterPointLen - 2);\n  } else if (afterPointLen === 1) {\n    str = (Number(value) * 100).toFixed(0);\n  } else {\n    str = Number(value) * 100;\n  }\n  str += \"%\";\n  return str;\n}\n\n/**\n * 百分比转数字\n * @param {*} value 【必填】百分数\n */\nfunction toPoint(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value)) return value;\n  let str = `${value}`.replace(\"%\", \"\");\n  str = accDiv(str, 100);\n  return str;\n}\n\n/**\n * 隐藏手机号中间4位\n * @param {*} phoneNum 【必填】手机号\n */\nfunction hidePhoneNum(phoneNum) {\n  const reg = /(\\d{3})\\d{4}(\\d{4})/;\n  return phoneNum.toString().replace(reg, \"$1****$2\");\n}\n\n/**\n * 去除字符串左侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimLeft(str) {\n  return str.replace(/^\\s*/, \"\");\n}\n\n/**\n * 去除字符串右侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimRight(str) {\n  return str.replace(/(\\s*$)/g, \"\");\n}\n\n/**\n * 去除字符串两侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimSide(str) {\n  return str.replace(/^\\s*|\\s*$/g, \"\");\n}\n\n/**\n * 去除字符串所有空格\n * @param {*} str 【必填】字符串\n */\nfunction trimAll(str) {\n  return str.replace(/\\s*/g, \"\");\n}\n\n/**\n * 在数组指定位置插入元素\n * @param {*} arr 【必填】要插入的数组\n * @param {*} index 【必填】要插入的位置\n * @param {*} value 【必填】要插入的元素\n */\nfunction arrayInsert(arr, index, value) {\n  const tempArr = arr;\n  tempArr.splice(index, 0, value);\n  return tempArr;\n}\n\n/**\n * 数组深拷贝\n * @param {*} arr 【必填】要拷贝的数组\n */\nfunction arrDeepCopy(arr) {\n  const sourceCopy = [];\n  for (const item in arr) {\n    sourceCopy[item] = typeof arr[item] === \"object\" ? arrDeepCopy(arr[item]) : arr[item];\n  }\n  return sourceCopy;\n}\n\n/**\n * 除法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accDiv(arg1, arg2) {\n  var t1 = 0;\n  var t2 = 0;\n  var r1;\n  var r2;\n  try {\n    t1 = arg1.toString().split(\".\")[1].length;\n  } catch (e) {}\n  try {\n    t2 = arg2.toString().split(\".\")[1].length;\n  } catch (e) {}\n  r1 = Number(arg1.toString().replace(\".\", \"\"));\n  r2 = Number(arg2.toString().replace(\".\", \"\"));\n  return accMul(r1 / r2, Math.pow(10, t2 - t1));\n}\n\n/**\n * 乘法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accMul(arg1, arg2) {\n  var m = 0;\n  var s1 = arg1.toString();\n  var s2 = arg2.toString();\n  try {\n    m += s1.split(\".\")[1].length;\n  } catch (e) {}\n  try {\n    m += s2.split(\".\")[1].length;\n  } catch (e) {}\n  return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / Math.pow(10, m);\n}\n\n/**\n * 加法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accAdd(arg1, arg2) {\n  var r1, r2, m;\n  try {\n    r1 = arg1.toString().split(\".\")[1].length;\n  } catch (e) {\n    r1 = 0;\n  }\n  try {\n    r2 = arg2.toString().split(\".\")[1].length;\n  } catch (e) {\n    r2 = 0;\n  }\n  m = Math.pow(10, Math.max(r1, r2));\n  return (arg1 * m + arg2 * m) / m;\n}\n\n/**\n * 减法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accSubtr(arg1, arg2) {\n  var r1, r2, m, n;\n  try {\n    r1 = arg1.toString().split(\".\")[1].length;\n  } catch (e) {\n    r1 = 0;\n  }\n  try {\n    r2 = arg2.toString().split(\".\")[1].length;\n  } catch (e) {\n    r2 = 0;\n  }\n  m = Math.pow(10, Math.max(r1, r2));\n  n = r1 >= r2 ? r1 : r2;\n  return ((arg1 * m - arg2 * m) / m).toFixed(n);\n}\n\n// template methods\n/**\n * 获取传递参数对象\n * @param {*} url\n */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  const search = url.substring(url.lastIndexOf(\"?\") + 1);\n  const obj = {};\n  const reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, (rs, $1, $2) => {\n    const name = decodeURIComponent($1);\n    let val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\n/**\n * @param {Sting} input value\n * @returns {number} output value\n */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  let s = str.length;\n  for (var i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;else if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xdc00 && code <= 0xdfff) i--;\n  }\n  return s;\n}\n\n/**\n * 清理数组（去除空值）\n * @param {*} actual\n */\nfunction cleanArray(actual) {\n  const newArray = [];\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\nfunction param(json) {\n  if (!json) return \"\";\n  return cleanArray(Object.keys(json).map(key => {\n    if (json[key] === undefined) return \"\";\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(json[key]);\n  })).join(\"&\");\n}\nfunction param2Obj(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}');\n}\nfunction html2Text(val) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\nfunction objectMerge(target, source) {\n  /* Merges two  objects,\n     giving the last one precedence */\n\n  if (typeof target !== \"object\") {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  Object.keys(source).forEach(property => {\n    const sourceProperty = source[property];\n    if (typeof sourceProperty === \"object\") {\n      target[property] = objectMerge(target[property], sourceProperty);\n    } else {\n      target[property] = sourceProperty;\n    }\n  });\n  return target;\n}\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  let classString = element.className;\n  const nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += \"\" + className;\n  } else {\n    classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\nconst pickerOptions = [{\n  text: \"今天\",\n  onClick(picker) {\n    const end = new Date();\n    const start = new Date(new Date().toDateString());\n    end.setTime(start.getTime());\n    picker.$emit(\"pick\", [start, end]);\n  }\n}, {\n  text: \"最近一周\",\n  onClick(picker) {\n    const end = new Date(new Date().toDateString());\n    const start = new Date();\n    start.setTime(end.getTime() - 3600 * 1000 * 24 * 7);\n    picker.$emit(\"pick\", [start, end]);\n  }\n}, {\n  text: \"最近一个月\",\n  onClick(picker) {\n    const end = new Date(new Date().toDateString());\n    const start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n    picker.$emit(\"pick\", [start, end]);\n  }\n}, {\n  text: \"最近三个月\",\n  onClick(picker) {\n    const end = new Date(new Date().toDateString());\n    const start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n    picker.$emit(\"pick\", [start, end]);\n  }\n}];\nfunction getTime(type) {\n  if (type === \"start\") {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\nfunction debounce(func, wait, immediate) {\n  let timeout, args, context, timestamp, result;\n  const later = function () {\n    // 据上一次触发时间间隔\n    const last = +new Date() - timestamp;\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function (...args) {\n    context = this;\n    timestamp = +new Date();\n    const callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n\n/**\n * This is just a simple version of deep copy\n * Has a lot of edge cases bug\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\n */\nfunction deepClone(source) {\n  if (!source && typeof source !== \"object\") {\n    throw new Error(\"error arguments\", \"deepClone\");\n  }\n  const targetObj = source.constructor === Array ? [] : {};\n  Object.keys(source).forEach(keys => {\n    if (source[keys] && typeof source[keys] === \"object\") {\n      targetObj[keys] = deepClone(source[keys]);\n    } else {\n      targetObj[keys] = source[keys];\n    }\n  });\n  return targetObj;\n}\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr));\n}\nfunction createUniqueString() {\n  const timestamp = +new Date() + \"\";\n  const randomNum = parseInt((1 + Math.random()) * 65536) + \"\";\n  return (+(randomNum + timestamp)).toString(32);\n}\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"));\n}\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += \" \" + cls;\n}\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    const reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\");\n    ele.className = ele.className.replace(reg, \" \");\n  }\n}\n/**\n * @param {Array}  要交换的数组\n * @param {number} 交换元素下标\n * @param {number} 交换元素下标\n * @return {Array} 交换后数组\n */\nfunction swapArray(arr, index1, index2) {\n  arr[index1] = arr.splice(index2, 1, arr[index1])[0];\n  return arr;\n}\n\n// 取得字典对应中文\nfunction getCnDitc(params, ditc = [], key = \"\", skey = \"sCodeValue\", sName = \"sCodeName\") {\n  if (key === \"\") return;\n  for (let index = 0; index < ditc.length; index++) {\n    const element = ditc[index];\n    if (element[skey] === params.data[key]) {\n      return element[sName];\n    }\n  }\n}\n\n/**\n * 过滤对象空属性\n * @param {Object}  过滤对象\n */\nexport function filterObj(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && (obj[key] === null || obj[key] === undefined || obj[key] === \"\")) {\n      delete obj[key]; // 删除没有的属性和空的\n    }\n  }\n\n  return obj;\n}\n\n// 工具函数\n// 判断是否带有小数并获取小数长度\nfunction isDot(value) {\n  const reg = /^(-|\\+)?\\d+\\.\\d*$/;\n  if (reg.test(value)) {\n    return value.toString().split(\".\")[1].length;\n  }\n  return reg.test(value);\n}\n// 判断是否为数字，检查其是否为有限值,对于NaN，Infinity或-Infinity的数字，返回false。\nfunction checkNumber(params) {\n  return !Number.isFinite(params);\n}\n// 错误提示函数\nfunction warn(text) {\n  console.error(text);\n}\n\n/**\n * 数字保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n * @param {Number} zero【选填】值不为数值时，是否返回空\n * @param {boolean} lowerDigits 【选填】用于判断在百分比函数使用时fixed为当前小数位\n */\nfunction toDecimalPlaces(value, digits = 2, places = false, zero = true, lowerDigits = false) {\n  if (checkNumber(value) || isNaN(Number(value)) && !!value) {\n    //值不为数值时是否返回空 zero true:返回空 false返回0\n    warn(\"参数value无法被解析为有效的数值类型\");\n    return zero ? \"\" : 0;\n  }\n  if (checkNumber(digits) || digits < 0) {\n    // digits不为数值或为负数 返回value\n    warn(\"参数digits无法被解析为有效的数值类型\");\n    return value;\n  }\n  const hasDot = isDot(value); // 检测是否是小数\n  // 是浮点数 通过传入的digits fixed小数位 不是浮点数 判断是否补全\n  // 用于处理百分比函数调用时不补0用\n  let flag = lowerDigits ? hasDot : hasDot < 2 ? 2 : hasDot;\n  if (hasDot) {\n    value = value.toFixed(hasDot < digits ? places ? digits : flag : lowerDigits ? digits : hasDot);\n    return value;\n  }\n  value = places ? value.toFixed(digits) : value;\n  return value;\n}\n// let keepDecimalPlacesValue = keepDecimalPlaces(0.1, 3)\n/*\nkeepDecimalPlaces 函数返回值测试\n1111.5555, 0   1112\n1111.4444, 0   1111\n1111.5555, 1   1111.6\n1111.4444, 1   1111.4\n1111.5555, 2   1111.56\n1111.4444, 2   1111.44\n0.1, 0          0\n0.1, 1          0.1\n0.1, 2          0.10\n0.1, 3          0.100\n*/\n\n/**\n * 数字转为千分符展示，并保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n * @param {Number} zero【选填】值不为数值时，是否返回空\n */\nfunction toThousandthSign(value, digits = 2, places = false, zero = true) {\n  value = toDecimalPlaces(value, digits, places, zero);\n  const [integer, point] = value.toString().split(\".\");\n  let res;\n  const reg = /(\\d{3})(?=\\d)/g;\n  let newStr = integer.split(\"\").reverse().join(\"\").replace(reg, (match, $1) => {\n    return match + \",\";\n  });\n  newStr = newStr.split(\"\").reverse().join(\"\");\n  point ? res = newStr + \".\" + point : res = newStr;\n  return res;\n}\n// let formatThousandthSignValue = formatThousandthSign(0.1, 3)\n// console.log(formatThousandthSignValue)\n/*\n// 函数返回值测试\n1111.5555, 0    1,112\n1111.4444, 0    1,111\n1111.5555, 1    1,111.6\n1111.4444, 1    1,111.4\n1111.5555, 2    1,111.56\n1111.4444, 2    1,111.44\n0.1, 0          0\n0.1, 1          0.1\n0.1, 2          0.10\n0.1, 3          0.100\n*/\n\n/**\n * 浮点数转百分比\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n */\nfunction toPercentage(value, digits = 2) {\n  function isUndeFinedOrNullOrBlank(str) {\n    return str === undefined || str == null || typeof str === \"string\" && str.trim() === \"\";\n  }\n  if (isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value;\n  }\n  return toDecimalPlaces(value * 100, digits, false, true, true) + \"%\";\n}\nexport default {\n  getQueryObject,\n  byteLength,\n  cleanArray,\n  param,\n  param2Obj,\n  html2Text,\n  objectMerge,\n  getTime,\n  debounce,\n  deepClone,\n  uniqueArr,\n  createUniqueString,\n  toggleClass,\n  hasClass,\n  addClass,\n  removeClass,\n  digitalConversion,\n  formatPrice,\n  formatThousandthSign,\n  toNum,\n  toFixNum,\n  toPercent,\n  toPoint,\n  hidePhoneNum,\n  trimLeft,\n  trimRight,\n  trimSide,\n  trimAll,\n  arrayInsert,\n  arrDeepCopy,\n  accDiv,\n  accMul,\n  accAdd,\n  accSubtr,\n  swapArray,\n  filterObj,\n  getCnDitc,\n  keepDecimalPlaces,\n  toPercentage,\n  toThousandthSign,\n  toDecimalPlaces\n};","map":{"version":3,"names":["Validate","Decimal","digitalConversion","n","isUndeFinedOrNullOrBlank","isNaN","Number","fraction","digit","unit","IsNum","head","Math","abs","s","i","length","floor","pow","replace","p","j","formatPrice","value","digits","keepDecimalPlaces","toString","match","p1","p2","formatThousandthSign","zero","places","integerDigits","hasDot","isDot","toFixed","toNum","reg","RegExp","tempArr","split","toFixNum","toPercent","afterPointLen","indexOf","str","toPoint","accDiv","hidePhoneNum","phoneNum","trimLeft","trimRight","trimSide","trimAll","arrayInsert","arr","index","splice","arrDeepCopy","sourceCopy","item","arg1","arg2","t1","t2","r1","r2","e","accMul","m","s1","s2","accAdd","max","accSubtr","getQueryObject","url","window","location","href","search","substring","lastIndexOf","obj","rs","$1","$2","name","decodeURIComponent","val","String","byteLength","code","charCodeAt","cleanArray","actual","newArray","push","param","json","Object","keys","map","key","undefined","encodeURIComponent","join","param2Obj","JSON","parse","html2Text","div","document","createElement","innerHTML","textContent","innerText","objectMerge","target","source","Array","isArray","slice","forEach","property","sourceProperty","toggleClass","element","className","classString","nameIndex","substr","pickerOptions","text","onClick","picker","end","Date","start","toDateString","setTime","getTime","$emit","type","debounce","func","wait","immediate","timeout","args","context","timestamp","result","later","last","setTimeout","apply","callNow","deepClone","Error","targetObj","constructor","uniqueArr","from","Set","createUniqueString","randomNum","parseInt","random","hasClass","ele","cls","addClass","removeClass","swapArray","index1","index2","getCnDitc","params","ditc","skey","sName","data","filterObj","hasOwnProperty","test","checkNumber","isFinite","warn","console","error","toDecimalPlaces","lowerDigits","flag","toThousandthSign","integer","point","res","newStr","reverse","toPercentage","trim"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/node_modules/@cndinfo/cube-web-utils/src/utils/format.js"],"sourcesContent":["/* eslint-disable */\nimport Validate from \"./validate.js\"\nimport { Decimal } from \"decimal.js/decimal.mjs\"\n/**\n * Created by chenjianbin on 2020/04/8.\n */\n\n/**\n * 数字金额转换为中文大写数字\n * @param {*} n 【必填】需要转换的数字金额\n */\nfunction digitalConversion(n) {\n  if (Validate.isUndeFinedOrNullOrBlank(n) || isNaN(Number(n))) return n\n  const fraction = [\"角\", \"分\"]\n  const digit = [\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"]\n  const unit = [\n    [\"元\", \"万\", \"亿\"],\n    [\"\", \"拾\", \"佰\", \"仟\"]\n  ]\n  const IsNum = Number(n)\n  if (!isNaN(IsNum)) {\n    const head = n < 0 ? \"欠\" : \"\"\n    n = Math.abs(n)\n    let s = \"\"\n    for (let i = 0; i < fraction.length; i++) {\n      s += (\n        digit[Math.floor(((n * 100) / 10) * Math.pow(10, i)) % 10] + fraction[i]\n      ).replace(/零./, \"\")\n    }\n    s = s || \"整\"\n    n = Math.floor(n)\n    for (let i = 0; i < unit[0].length && n > 0; i++) {\n      let p = \"\"\n      for (let j = 0; j < unit[1].length && n > 0; j++) {\n        p = digit[n % 10] + unit[1][j] + p\n        n = Math.floor(n / 10)\n      }\n      s = p.replace(/(零.)*零$/, \"\").replace(/^$/, \"零\") + unit[0][i] + s\n    }\n    return (\n      head +\n      s\n        .replace(/(零.)*零元/, \"元\")\n        .replace(/(零.)+/g, \"零\")\n        .replace(/^整$/, \"零元整\")\n    )\n  } else {\n    return \"\"\n  }\n}\n\n/**\n * 数字金额转为货币格式（10,000.00）\n * @param {*} value 【必填】数字金额\n */\nfunction formatPrice(value, digits = null) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return 0.0\n  }\n  value = keepDecimalPlaces(value, digits)\n  value = value\n    .toString()\n    .replace(\n      digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g,\n      function (match, p1, p2) {\n        return p1 + \",\"\n      }\n    )\n  return value\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return '0.00'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 || !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // value = value.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //   return p1 + ','\n  // })\n  // return value\n}\n\n/**\n * 数字转为千分符展示，并保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} zero【选填】值不为数值时，是否返回空\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n */\n// function formatThousandthSign(value, digits = null, places = false ) {\nfunction formatThousandthSign(\n  value,\n  digits = null,\n  zero = true,\n  places = false\n) {\n  value = keepDecimalPlaces(value, digits, zero, places)\n  value = value\n    .toString()\n    .replace(\n      digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g,\n      function (match, p1, p2) {\n        return p1 + \",\"\n      }\n    )\n  return value\n\n  // if (typeof(value) !== 'number' && !zero) return ''\n  // if (!value) return '0'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 ? value.toFixed(0) : !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = digits === 0 ? parseFloat(value) : parseFloat(value) === parseFloat(Number(value).toFixed(2)) ? Number(value).toFixed(2) : value\n  //   value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     // value = value.toString().replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // if (digits){\n  //   value = value.toFixed(digits < 2 && places ? digits : 2)\n  //   return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  // }\n  // value = value.toString().replace(digits === 0 ? /(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g : /(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //   return p1 + ','\n  // })\n  // return value\n\n  // if (!value) return '0'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // // console.log(value,'value')\n  // var hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (digits) {\n  //   value = Number(value)\n  //   value = digits === 0 ? value.toFixed(digits) + '.' : hasDot ? (digits ? value.toFixed(digits) : value) : value.toFixed(digits)\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   if (digits === 0 || (!hasDot && !digits)) {\n  //     // 如果n为0或者传入的num是整数并且没有指定整数的保留位数，则去掉前面操作中的小数位\n  //     value = value.substring(0, value.indexOf('.'))\n  //   }\n  //   return value\n  // }\n  // if (hasDot) {\n  //   value = value.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function(match, p1, p2) {\n  //     return p1 + ','\n  //   })\n  //   return value\n  // }\n  // return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return value\n  // const tempV = value.toString()\n  // if (tempV.indexOf('.') > -1) {\n  //   let valArr = tempV.split('.')\n  //   if (digits) {\n  //     if (digits === 0) {\n  //       return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  //     } else if (digits > 0) {\n  //       return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + '.' + valArr[1].substr(0, digits)\n  //     }\n  //   }\n  //   return valArr[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + '.' + valArr[1]\n  // } else {\n  //   if (digits) {\n  //     return Number(tempV).toFixed(digits).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  //   }\n  //   return tempV.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  // }\n}\n/**\n * 数字保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n */\nfunction keepDecimalPlaces(\n  value,\n  digits = null,\n  zero = true,\n  places = false,\n  integerDigits = 2\n) {\n  if (isNaN(Number(value)) && !zero) return \"\"\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return 0 // value为空或者不为数值 返回0\n  if (isNaN(Number(digits)) || digits < 0) return value // digits不为数值或为负数 返回value\n  // value = parseFloat(value)\n  const hasDot = Validate.isDot(value) // 检测是否是小数\n  if (hasDot) {\n    value = new Decimal(value).toFixed(\n      digits === null ? 2 : hasDot < digits ? (hasDot < 2 ? 2 : hasDot) : digits\n    )\n    return value\n  }\n  if (digits === 0) {\n    value = new Decimal(value).toFixed(digits)\n  } else {\n    value = places ? value : new Decimal(value).toFixed(integerDigits)\n  }\n  return value\n\n  // if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) return '0.00'\n  // if (isNaN(Number(digits))) return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // value = Number(value)\n  // value = parseFloat(value)\n  // const hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (hasDot) {\n  //   const _length = value.toString().split('.')[1].length\n  //   value = digits === 0 ? value.toFixed(0) : !digits || _length < 2 ? value.toFixed(2) : _length < digits ? value : value.toFixed(digits)\n  //   value = digits === 0 ? parseFloat(value) : parseFloat(value) === parseFloat(Number(value).toFixed(2)) ? Number(value).toFixed(2) : value\n  //   return value\n  // }\n  // return value.toFixed(2)\n\n  // if (!value) return 0\n  // if (typeof value !== 'number') return value\n  // if (digits < 0) throw new Error('参数n不应该小于0')\n  // var hasDot = parseInt(value) !== value // 这里检测num是否为小数，true表示小数\n  // if (digits) {\n  //   value = digits === 0\n  //     ? value.toFixed(digits) + '.'\n  //     : hasDot\n  //       ? (digits ? value.toFixed(digits) : value)\n  //       : value.toFixed(digits)\n  //   if (digits === 0 || (!hasDot && !digits)) {\n  //     // 如果n为0或者传入的num是整数并且没有指定整数的保留位数，则去掉前面操作中的小数位\n  //     value = value.substring(0, value.indexOf('.'))\n  //   }\n  //   return value\n  // }\n}\n\n/**\n * 货币格式（千分符）转为数字\n * @param {*} value 【必填】货币格式\n */\nfunction toNum(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value)) return value\n  const reg = new RegExp(\",\", \"g\")\n  const tempArr = value.toString().split(\".\")\n  if (tempArr[1] === \"00\") {\n    return tempArr[0].replace(reg, \"\")\n  }\n  return value.toString().replace(reg, \"\")\n}\n\n/**\n * 数字金额补齐两位小数\n * @param {*} value 【必填】数字金额\n */\nfunction toFixNum(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value\n  }\n  return (Number(value) / 1).toFixed(2)\n}\n\n/**\n * 数字转为百分比\n * @param {*} value 【必填】数字\n */\nfunction toPercent(value, digits = null) {\n  if (Validate.isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value\n  }\n  let afterPointLen = 0\n  if (value.toString().indexOf(\".\") > -1) {\n    afterPointLen = value.toString().split(\".\")[1].length\n  }\n  let str\n  if (afterPointLen > 1) {\n    str = (Number(value) * 100).toFixed(digits || afterPointLen - 2)\n  } else if (afterPointLen === 1) {\n    str = (Number(value) * 100).toFixed(0)\n  } else {\n    str = Number(value) * 100\n  }\n  str += \"%\"\n  return str\n}\n\n/**\n * 百分比转数字\n * @param {*} value 【必填】百分数\n */\nfunction toPoint(value) {\n  if (Validate.isUndeFinedOrNullOrBlank(value)) return value\n  let str = `${value}`.replace(\"%\", \"\")\n  str = accDiv(str, 100)\n  return str\n}\n\n/**\n * 隐藏手机号中间4位\n * @param {*} phoneNum 【必填】手机号\n */\nfunction hidePhoneNum(phoneNum) {\n  const reg = /(\\d{3})\\d{4}(\\d{4})/\n  return phoneNum.toString().replace(reg, \"$1****$2\")\n}\n\n/**\n * 去除字符串左侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimLeft(str) {\n  return str.replace(/^\\s*/, \"\")\n}\n\n/**\n * 去除字符串右侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimRight(str) {\n  return str.replace(/(\\s*$)/g, \"\")\n}\n\n/**\n * 去除字符串两侧空格\n * @param {*} str 【必填】字符串\n */\nfunction trimSide(str) {\n  return str.replace(/^\\s*|\\s*$/g, \"\")\n}\n\n/**\n * 去除字符串所有空格\n * @param {*} str 【必填】字符串\n */\nfunction trimAll(str) {\n  return str.replace(/\\s*/g, \"\")\n}\n\n/**\n * 在数组指定位置插入元素\n * @param {*} arr 【必填】要插入的数组\n * @param {*} index 【必填】要插入的位置\n * @param {*} value 【必填】要插入的元素\n */\nfunction arrayInsert(arr, index, value) {\n  const tempArr = arr\n  tempArr.splice(index, 0, value)\n  return tempArr\n}\n\n/**\n * 数组深拷贝\n * @param {*} arr 【必填】要拷贝的数组\n */\nfunction arrDeepCopy(arr) {\n  const sourceCopy = []\n  for (const item in arr) {\n    sourceCopy[item] =\n      typeof arr[item] === \"object\" ? arrDeepCopy(arr[item]) : arr[item]\n  }\n  return sourceCopy\n}\n\n/**\n * 除法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accDiv(arg1, arg2) {\n  var t1 = 0\n  var t2 = 0\n  var r1\n  var r2\n  try {\n    t1 = arg1.toString().split(\".\")[1].length\n  } catch (e) {}\n  try {\n    t2 = arg2.toString().split(\".\")[1].length\n  } catch (e) {}\n  r1 = Number(arg1.toString().replace(\".\", \"\"))\n  r2 = Number(arg2.toString().replace(\".\", \"\"))\n  return accMul(r1 / r2, Math.pow(10, t2 - t1))\n}\n\n/**\n * 乘法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accMul(arg1, arg2) {\n  var m = 0\n  var s1 = arg1.toString()\n  var s2 = arg2.toString()\n  try {\n    m += s1.split(\".\")[1].length\n  } catch (e) {}\n  try {\n    m += s2.split(\".\")[1].length\n  } catch (e) {}\n  return (\n    (Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\"))) /\n    Math.pow(10, m)\n  )\n}\n\n/**\n * 加法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accAdd(arg1, arg2) {\n  var r1, r2, m\n  try {\n    r1 = arg1.toString().split(\".\")[1].length\n  } catch (e) {\n    r1 = 0\n  }\n  try {\n    r2 = arg2.toString().split(\".\")[1].length\n  } catch (e) {\n    r2 = 0\n  }\n  m = Math.pow(10, Math.max(r1, r2))\n  return (arg1 * m + arg2 * m) / m\n}\n\n/**\n * 减法精度计算\n * @param {*} arg1 【必填】参数1\n * @param {*} arg2 【必填】参数2\n */\nfunction accSubtr(arg1, arg2) {\n  var r1, r2, m, n\n  try {\n    r1 = arg1.toString().split(\".\")[1].length\n  } catch (e) {\n    r1 = 0\n  }\n  try {\n    r2 = arg2.toString().split(\".\")[1].length\n  } catch (e) {\n    r2 = 0\n  }\n  m = Math.pow(10, Math.max(r1, r2))\n  n = r1 >= r2 ? r1 : r2\n  return ((arg1 * m - arg2 * m) / m).toFixed(n)\n}\n\n// template methods\n/**\n * 获取传递参数对象\n * @param {*} url\n */\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url\n  const search = url.substring(url.lastIndexOf(\"?\") + 1)\n  const obj = {}\n  const reg = /([^?&=]+)=([^?&=]*)/g\n  search.replace(reg, (rs, $1, $2) => {\n    const name = decodeURIComponent($1)\n    let val = decodeURIComponent($2)\n    val = String(val)\n    obj[name] = val\n    return rs\n  })\n  return obj\n}\n\n/**\n * @param {Sting} input value\n * @returns {number} output value\n */\nfunction byteLength(str) {\n  // returns the byte length of an utf8 string\n  let s = str.length\n  for (var i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i)\n    if (code > 0x7f && code <= 0x7ff) s++\n    else if (code > 0x7ff && code <= 0xffff) s += 2\n    if (code >= 0xdc00 && code <= 0xdfff) i--\n  }\n  return s\n}\n\n/**\n * 清理数组（去除空值）\n * @param {*} actual\n */\nfunction cleanArray(actual) {\n  const newArray = []\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i])\n    }\n  }\n  return newArray\n}\n\nfunction param(json) {\n  if (!json) return \"\"\n  return cleanArray(\n    Object.keys(json).map((key) => {\n      if (json[key] === undefined) return \"\"\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(json[key])\n    })\n  ).join(\"&\")\n}\n\nfunction param2Obj(url) {\n  const search = url.split(\"?\")[1]\n  if (!search) {\n    return {}\n  }\n  return JSON.parse(\n    '{\"' +\n      decodeURIComponent(search)\n        .replace(/\"/g, '\\\\\"')\n        .replace(/&/g, '\",\"')\n        .replace(/=/g, '\":\"')\n        .replace(/\\+/g, \" \") +\n      '\"}'\n  )\n}\n\nfunction html2Text(val) {\n  const div = document.createElement(\"div\")\n  div.innerHTML = val\n  return div.textContent || div.innerText\n}\n\nfunction objectMerge(target, source) {\n  /* Merges two  objects,\n     giving the last one precedence */\n\n  if (typeof target !== \"object\") {\n    target = {}\n  }\n  if (Array.isArray(source)) {\n    return source.slice()\n  }\n  Object.keys(source).forEach((property) => {\n    const sourceProperty = source[property]\n    if (typeof sourceProperty === \"object\") {\n      target[property] = objectMerge(target[property], sourceProperty)\n    } else {\n      target[property] = sourceProperty\n    }\n  })\n  return target\n}\n\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return\n  }\n  let classString = element.className\n  const nameIndex = classString.indexOf(className)\n  if (nameIndex === -1) {\n    classString += \"\" + className\n  } else {\n    classString =\n      classString.substr(0, nameIndex) +\n      classString.substr(nameIndex + className.length)\n  }\n  element.className = classString\n}\n\nconst pickerOptions = [\n  {\n    text: \"今天\",\n    onClick(picker) {\n      const end = new Date()\n      const start = new Date(new Date().toDateString())\n      end.setTime(start.getTime())\n      picker.$emit(\"pick\", [start, end])\n    }\n  },\n  {\n    text: \"最近一周\",\n    onClick(picker) {\n      const end = new Date(new Date().toDateString())\n      const start = new Date()\n      start.setTime(end.getTime() - 3600 * 1000 * 24 * 7)\n      picker.$emit(\"pick\", [start, end])\n    }\n  },\n  {\n    text: \"最近一个月\",\n    onClick(picker) {\n      const end = new Date(new Date().toDateString())\n      const start = new Date()\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\n      picker.$emit(\"pick\", [start, end])\n    }\n  },\n  {\n    text: \"最近三个月\",\n    onClick(picker) {\n      const end = new Date(new Date().toDateString())\n      const start = new Date()\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\n      picker.$emit(\"pick\", [start, end])\n    }\n  }\n]\n\nfunction getTime(type) {\n  if (type === \"start\") {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90\n  } else {\n    return new Date(new Date().toDateString())\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout, args, context, timestamp, result\n\n  const later = function () {\n    // 据上一次触发时间间隔\n    const last = +new Date() - timestamp\n\n    // 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last)\n    } else {\n      timeout = null\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args)\n        if (!timeout) context = args = null\n      }\n    }\n  }\n\n  return function (...args) {\n    context = this\n    timestamp = +new Date()\n    const callNow = immediate && !timeout\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait)\n    if (callNow) {\n      result = func.apply(context, args)\n      context = args = null\n    }\n\n    return result\n  }\n}\n\n/**\n * This is just a simple version of deep copy\n * Has a lot of edge cases bug\n * If you want to use a perfect deep copy, use lodash's _.cloneDeep\n */\nfunction deepClone(source) {\n  if (!source && typeof source !== \"object\") {\n    throw new Error(\"error arguments\", \"deepClone\")\n  }\n  const targetObj = source.constructor === Array ? [] : {}\n  Object.keys(source).forEach((keys) => {\n    if (source[keys] && typeof source[keys] === \"object\") {\n      targetObj[keys] = deepClone(source[keys])\n    } else {\n      targetObj[keys] = source[keys]\n    }\n  })\n  return targetObj\n}\n\nfunction uniqueArr(arr) {\n  return Array.from(new Set(arr))\n}\n\nfunction createUniqueString() {\n  const timestamp = +new Date() + \"\"\n  const randomNum = parseInt((1 + Math.random()) * 65536) + \"\"\n  return (+(randomNum + timestamp)).toString(32)\n}\n\nfunction hasClass(ele, cls) {\n  return !!ele.className.match(new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"))\n}\n\nfunction addClass(ele, cls) {\n  if (!hasClass(ele, cls)) ele.className += \" \" + cls\n}\n\nfunction removeClass(ele, cls) {\n  if (hasClass(ele, cls)) {\n    const reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\")\n    ele.className = ele.className.replace(reg, \" \")\n  }\n}\n/**\n * @param {Array}  要交换的数组\n * @param {number} 交换元素下标\n * @param {number} 交换元素下标\n * @return {Array} 交换后数组\n */\nfunction swapArray(arr, index1, index2) {\n  arr[index1] = arr.splice(index2, 1, arr[index1])[0]\n  return arr\n}\n\n// 取得字典对应中文\nfunction getCnDitc(\n  params,\n  ditc = [],\n  key = \"\",\n  skey = \"sCodeValue\",\n  sName = \"sCodeName\"\n) {\n  if (key === \"\") return\n  for (let index = 0; index < ditc.length; index++) {\n    const element = ditc[index]\n    if (element[skey] === params.data[key]) {\n      return element[sName]\n    }\n  }\n}\n\n/**\n * 过滤对象空属性\n * @param {Object}  过滤对象\n */\nexport function filterObj(obj) {\n  for (const key in obj) {\n    if (\n      obj.hasOwnProperty(key) &&\n      (obj[key] === null || obj[key] === undefined || obj[key] === \"\")\n    ) {\n      delete obj[key] // 删除没有的属性和空的\n    }\n  }\n  return obj\n}\n\n// 工具函数\n// 判断是否带有小数并获取小数长度\nfunction isDot(value) {\n  const reg = /^(-|\\+)?\\d+\\.\\d*$/\n  if (reg.test(value)) {\n    return value.toString().split(\".\")[1].length\n  }\n  return reg.test(value)\n}\n// 判断是否为数字，检查其是否为有限值,对于NaN，Infinity或-Infinity的数字，返回false。\nfunction checkNumber(params) {\n  return !Number.isFinite(params)\n}\n// 错误提示函数\nfunction warn(text) {\n  console.error(text)\n}\n\n/**\n * 数字保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n * @param {Number} zero【选填】值不为数值时，是否返回空\n * @param {boolean} lowerDigits 【选填】用于判断在百分比函数使用时fixed为当前小数位\n */\nfunction toDecimalPlaces(\n  value,\n  digits = 2,\n  places = false,\n  zero = true,\n  lowerDigits = false\n) {\n  if (checkNumber(value) || (isNaN(Number(value)) && !!value)) {\n    //值不为数值时是否返回空 zero true:返回空 false返回0\n    warn(\"参数value无法被解析为有效的数值类型\")\n    return zero ? \"\" : 0\n  }\n  if (checkNumber(digits) || digits < 0) {\n    // digits不为数值或为负数 返回value\n    warn(\"参数digits无法被解析为有效的数值类型\")\n    return value\n  }\n  const hasDot = isDot(value) // 检测是否是小数\n  // 是浮点数 通过传入的digits fixed小数位 不是浮点数 判断是否补全\n  // 用于处理百分比函数调用时不补0用\n  let flag = lowerDigits ? hasDot : hasDot < 2 ? 2 : hasDot\n  if (hasDot) {\n    value = value.toFixed(\n      hasDot < digits ? (places ? digits : flag) : lowerDigits ? digits : hasDot\n    )\n    return value\n  }\n  value = places ? value.toFixed(digits) : value\n  return value\n}\n// let keepDecimalPlacesValue = keepDecimalPlaces(0.1, 3)\n/*\nkeepDecimalPlaces 函数返回值测试\n1111.5555, 0   1112\n1111.4444, 0   1111\n1111.5555, 1   1111.6\n1111.4444, 1   1111.4\n1111.5555, 2   1111.56\n1111.4444, 2   1111.44\n0.1, 0          0\n0.1, 1          0.1\n0.1, 2          0.10\n0.1, 3          0.100\n*/\n\n/**\n * 数字转为千分符展示，并保留几位小数\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n * @param {Number} places【选填】小数位是否补起到00 false:不补齐, true:补齐\n * @param {Number} zero【选填】值不为数值时，是否返回空\n */\nfunction toThousandthSign(value, digits = 2, places = false, zero = true) {\n  value = toDecimalPlaces(value, digits, places, zero)\n  const [integer, point] = value.toString().split(\".\")\n  let res\n  const reg = /(\\d{3})(?=\\d)/g\n  let newStr = integer\n    .split(\"\")\n    .reverse()\n    .join(\"\")\n    .replace(reg, (match, $1) => {\n      return match + \",\"\n    })\n  newStr = newStr.split(\"\").reverse().join(\"\")\n  point ? (res = newStr + \".\" + point) : (res = newStr)\n  return res\n}\n// let formatThousandthSignValue = formatThousandthSign(0.1, 3)\n// console.log(formatThousandthSignValue)\n/*\n// 函数返回值测试\n1111.5555, 0    1,112\n1111.4444, 0    1,111\n1111.5555, 1    1,111.6\n1111.4444, 1    1,111.4\n1111.5555, 2    1,111.56\n1111.4444, 2    1,111.44\n0.1, 0          0\n0.1, 1          0.1\n0.1, 2          0.10\n0.1, 3          0.100\n*/\n\n/**\n * 浮点数转百分比\n * @param {Number} value 【必填】需格式化的数字\n * @param {Number} digits【选填】保留小数位数\n */\nfunction toPercentage(value, digits = 2) {\n  function isUndeFinedOrNullOrBlank(str) {\n    return (\n      str === undefined ||\n      str == null ||\n      (typeof str === \"string\" && str.trim() === \"\")\n    )\n  }\n  if (isUndeFinedOrNullOrBlank(value) || isNaN(Number(value))) {\n    return value\n  }\n  return toDecimalPlaces(value * 100, digits, false, true, true) + \"%\"\n}\n\nexport default {\n  getQueryObject,\n  byteLength,\n  cleanArray,\n  param,\n  param2Obj,\n  html2Text,\n  objectMerge,\n  getTime,\n  debounce,\n  deepClone,\n  uniqueArr,\n  createUniqueString,\n  toggleClass,\n  hasClass,\n  addClass,\n  removeClass,\n  digitalConversion,\n  formatPrice,\n  formatThousandthSign,\n  toNum,\n  toFixNum,\n  toPercent,\n  toPoint,\n  hidePhoneNum,\n  trimLeft,\n  trimRight,\n  trimSide,\n  trimAll,\n  arrayInsert,\n  arrDeepCopy,\n  accDiv,\n  accMul,\n  accAdd,\n  accSubtr,\n  swapArray,\n  filterObj,\n  getCnDitc,\n  keepDecimalPlaces,\n  toPercentage,\n  toThousandthSign,\n  toDecimalPlaces\n}\n"],"mappings":"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EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,oBAAoBA,CAC3BP,KAAK,EACLC,MAAM,GAAG,IAAI,EACbO,IAAI,GAAG,IAAI,EACXC,MAAM,GAAG,KAAK,EACd;EACAT,KAAK,GAAGE,iBAAiB,CAACF,KAAK,EAAEC,MAAM,EAAEO,IAAI,EAAEC,MAAM,CAAC;EACtDT,KAAK,GAAGA,KAAK,CACVG,QAAQ,CAAC,CAAC,CACVP,OAAO,CACNK,MAAM,KAAK,CAAC,GAAG,gCAAgC,GAAG,qBAAqB,EACvE,UAAUG,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACvB,OAAOD,EAAE,GAAG,GAAG;EACjB,CACF,CAAC;EACH,OAAOL,KAAK;;EAEZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiBA,CACxBF,KAAK,EACLC,MAAM,GAAG,IAAI,EACbO,IAAI,GAAG,IAAI,EACXC,MAAM,GAAG,KAAK,EACdC,aAAa,GAAG,CAAC,EACjB;EACA,IAAI5B,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,IAAI,CAACQ,IAAI,EAAE,OAAO,EAAE;EAC5C,IAAI/B,QAAQ,CAACI,wBAAwB,CAACmB,KAAK,CAAC,IAAIlB,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,EAAC;EAC/E,IAAIlB,KAAK,CAACC,MAAM,CAACkB,MAAM,CAAC,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE,OAAOD,KAAK,EAAC;EACtD;EACA,MAAMW,MAAM,GAAGlC,QAAQ,CAACmC,KAAK,CAACZ,KAAK,CAAC,EAAC;EACrC,IAAIW,MAAM,EAAE;IACVX,KAAK,GAAG,IAAItB,OAAO,CAACsB,KAAK,CAAC,CAACa,OAAO,CAChCZ,MAAM,KAAK,IAAI,GAAG,CAAC,GAAGU,MAAM,GAAGV,MAAM,GAAIU,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGA,MAAM,GAAIV,MACtE,CAAC;IACD,OAAOD,KAAK;EACd;EACA,IAAIC,MAAM,KAAK,CAAC,EAAE;IAChBD,KAAK,GAAG,IAAItB,OAAO,CAACsB,KAAK,CAAC,CAACa,OAAO,CAACZ,MAAM,CAAC;EAC5C,CAAC,MAAM;IACLD,KAAK,GAAGS,MAAM,GAAGT,KAAK,GAAG,IAAItB,OAAO,CAACsB,KAAK,CAAC,CAACa,OAAO,CAACH,aAAa,CAAC;EACpE;EACA,OAAOV,KAAK;;EAEZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASc,KAAKA,CAACd,KAAK,EAAE;EACpB,IAAIvB,QAAQ,CAACI,wBAAwB,CAACmB,KAAK,CAAC,EAAE,OAAOA,KAAK;EAC1D,MAAMe,GAAG,GAAG,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;EAChC,MAAMC,OAAO,GAAGjB,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC;EAC3C,IAAID,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACvB,OAAOA,OAAO,CAAC,CAAC,CAAC,CAACrB,OAAO,CAACmB,GAAG,EAAE,EAAE,CAAC;EACpC;EACA,OAAOf,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACP,OAAO,CAACmB,GAAG,EAAE,EAAE,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA,SAASI,QAAQA,CAACnB,KAAK,EAAE;EACvB,IAAIvB,QAAQ,CAACI,wBAAwB,CAACmB,KAAK,CAAC,IAAIlB,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,EAAE;IACpE,OAAOA,KAAK;EACd;EACA,OAAO,CAACjB,MAAM,CAACiB,KAAK,CAAC,GAAG,CAAC,EAAEa,OAAO,CAAC,CAAC,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA,SAASO,SAASA,CAACpB,KAAK,EAAEC,MAAM,GAAG,IAAI,EAAE;EACvC,IAAIxB,QAAQ,CAACI,wBAAwB,CAACmB,KAAK,CAAC,IAAIlB,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,EAAE;IACpE,OAAOA,KAAK;EACd;EACA,IAAIqB,aAAa,GAAG,CAAC;EACrB,IAAIrB,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACmB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;IACtCD,aAAa,GAAGrB,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EACvD;EACA,IAAI8B,GAAG;EACP,IAAIF,aAAa,GAAG,CAAC,EAAE;IACrBE,GAAG,GAAG,CAACxC,MAAM,CAACiB,KAAK,CAAC,GAAG,GAAG,EAAEa,OAAO,CAACZ,MAAM,IAAIoB,aAAa,GAAG,CAAC,CAAC;EAClE,CAAC,MAAM,IAAIA,aAAa,KAAK,CAAC,EAAE;IAC9BE,GAAG,GAAG,CAACxC,MAAM,CAACiB,KAAK,CAAC,GAAG,GAAG,EAAEa,OAAO,CAAC,CAAC,CAAC;EACxC,CAAC,MAAM;IACLU,GAAG,GAAGxC,MAAM,CAACiB,KAAK,CAAC,GAAG,GAAG;EAC3B;EACAuB,GAAG,IAAI,GAAG;EACV,OAAOA,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACxB,KAAK,EAAE;EACtB,IAAIvB,QAAQ,CAACI,wBAAwB,CAACmB,KAAK,CAAC,EAAE,OAAOA,KAAK;EAC1D,IAAIuB,GAAG,GAAI,GAAEvB,KAAM,EAAC,CAACJ,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EACrC2B,GAAG,GAAGE,MAAM,CAACF,GAAG,EAAE,GAAG,CAAC;EACtB,OAAOA,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAACC,QAAQ,EAAE;EAC9B,MAAMZ,GAAG,GAAG,qBAAqB;EACjC,OAAOY,QAAQ,CAACxB,QAAQ,CAAC,CAAC,CAACP,OAAO,CAACmB,GAAG,EAAE,UAAU,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA,SAASa,QAAQA,CAACL,GAAG,EAAE;EACrB,OAAOA,GAAG,CAAC3B,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA,SAASiC,SAASA,CAACN,GAAG,EAAE;EACtB,OAAOA,GAAG,CAAC3B,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA,SAASkC,QAAQA,CAACP,GAAG,EAAE;EACrB,OAAOA,GAAG,CAAC3B,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA,SAASmC,OAAOA,CAACR,GAAG,EAAE;EACpB,OAAOA,GAAG,CAAC3B,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoC,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAElC,KAAK,EAAE;EACtC,MAAMiB,OAAO,GAAGgB,GAAG;EACnBhB,OAAO,CAACkB,MAAM,CAACD,KAAK,EAAE,CAAC,EAAElC,KAAK,CAAC;EAC/B,OAAOiB,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA,SAASmB,WAAWA,CAACH,GAAG,EAAE;EACxB,MAAMI,UAAU,GAAG,EAAE;EACrB,KAAK,MAAMC,IAAI,IAAIL,GAAG,EAAE;IACtBI,UAAU,CAACC,IAAI,CAAC,GACd,OAAOL,GAAG,CAACK,IAAI,CAAC,KAAK,QAAQ,GAAGF,WAAW,CAACH,GAAG,CAACK,IAAI,CAAC,CAAC,GAAGL,GAAG,CAACK,IAAI,CAAC;EACtE;EACA,OAAOD,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASZ,MAAMA,CAACc,IAAI,EAAEC,IAAI,EAAE;EAC1B,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE;EACN,IAAIC,EAAE;EACN,IAAI;IACFH,EAAE,GAAGF,IAAI,CAACpC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE,CAAC;EACb,IAAI;IACFH,EAAE,GAAGF,IAAI,CAACrC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE,CAAC;EACbF,EAAE,GAAG5D,MAAM,CAACwD,IAAI,CAACpC,QAAQ,CAAC,CAAC,CAACP,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;EAC7CgD,EAAE,GAAG7D,MAAM,CAACyD,IAAI,CAACrC,QAAQ,CAAC,CAAC,CAACP,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;EAC7C,OAAOkD,MAAM,CAACH,EAAE,GAAGC,EAAE,EAAEvD,IAAI,CAACM,GAAG,CAAC,EAAE,EAAE+C,EAAE,GAAGD,EAAE,CAAC,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,MAAMA,CAACP,IAAI,EAAEC,IAAI,EAAE;EAC1B,IAAIO,CAAC,GAAG,CAAC;EACT,IAAIC,EAAE,GAAGT,IAAI,CAACpC,QAAQ,CAAC,CAAC;EACxB,IAAI8C,EAAE,GAAGT,IAAI,CAACrC,QAAQ,CAAC,CAAC;EACxB,IAAI;IACF4C,CAAC,IAAIC,EAAE,CAAC9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC9B,CAAC,CAAC,OAAOoD,CAAC,EAAE,CAAC;EACb,IAAI;IACFE,CAAC,IAAIE,EAAE,CAAC/B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC9B,CAAC,CAAC,OAAOoD,CAAC,EAAE,CAAC;EACb,OACG9D,MAAM,CAACiE,EAAE,CAACpD,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAGb,MAAM,CAACkE,EAAE,CAACrD,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAC1DP,IAAI,CAACM,GAAG,CAAC,EAAE,EAAEoD,CAAC,CAAC;AAEnB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACX,IAAI,EAAEC,IAAI,EAAE;EAC1B,IAAIG,EAAE,EAAEC,EAAE,EAAEG,CAAC;EACb,IAAI;IACFJ,EAAE,GAAGJ,IAAI,CAACpC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE;IACVF,EAAE,GAAG,CAAC;EACR;EACA,IAAI;IACFC,EAAE,GAAGJ,IAAI,CAACrC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE;IACVD,EAAE,GAAG,CAAC;EACR;EACAG,CAAC,GAAG1D,IAAI,CAACM,GAAG,CAAC,EAAE,EAAEN,IAAI,CAAC8D,GAAG,CAACR,EAAE,EAAEC,EAAE,CAAC,CAAC;EAClC,OAAO,CAACL,IAAI,GAAGQ,CAAC,GAAGP,IAAI,GAAGO,CAAC,IAAIA,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQA,CAACb,IAAI,EAAEC,IAAI,EAAE;EAC5B,IAAIG,EAAE,EAAEC,EAAE,EAAEG,CAAC,EAAEnE,CAAC;EAChB,IAAI;IACF+D,EAAE,GAAGJ,IAAI,CAACpC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE;IACVF,EAAE,GAAG,CAAC;EACR;EACA,IAAI;IACFC,EAAE,GAAGJ,IAAI,CAACrC,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC3C,CAAC,CAAC,OAAOoD,CAAC,EAAE;IACVD,EAAE,GAAG,CAAC;EACR;EACAG,CAAC,GAAG1D,IAAI,CAACM,GAAG,CAAC,EAAE,EAAEN,IAAI,CAAC8D,GAAG,CAACR,EAAE,EAAEC,EAAE,CAAC,CAAC;EAClChE,CAAC,GAAG+D,EAAE,IAAIC,EAAE,GAAGD,EAAE,GAAGC,EAAE;EACtB,OAAO,CAAC,CAACL,IAAI,GAAGQ,CAAC,GAAGP,IAAI,GAAGO,CAAC,IAAIA,CAAC,EAAElC,OAAO,CAACjC,CAAC,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASyE,cAAcA,CAACC,GAAG,EAAE;EAC3BA,GAAG,GAAGA,GAAG,IAAI,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGH,GAAG;EAC9C,MAAMI,MAAM,GAAGJ,GAAG,CAACK,SAAS,CAACL,GAAG,CAACM,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtD,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,MAAM9C,GAAG,GAAG,sBAAsB;EAClC2C,MAAM,CAAC9D,OAAO,CAACmB,GAAG,EAAE,CAAC+C,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAK;IAClC,MAAMC,IAAI,GAAGC,kBAAkB,CAACH,EAAE,CAAC;IACnC,IAAII,GAAG,GAAGD,kBAAkB,CAACF,EAAE,CAAC;IAChCG,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC;IACjBN,GAAG,CAACI,IAAI,CAAC,GAAGE,GAAG;IACf,OAAOL,EAAE;EACX,CAAC,CAAC;EACF,OAAOD,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA,SAASQ,UAAUA,CAAC9C,GAAG,EAAE;EACvB;EACA,IAAIhC,CAAC,GAAGgC,GAAG,CAAC9B,MAAM;EAClB,KAAK,IAAID,CAAC,GAAG+B,GAAG,CAAC9B,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxC,MAAM8E,IAAI,GAAG/C,GAAG,CAACgD,UAAU,CAAC/E,CAAC,CAAC;IAC9B,IAAI8E,IAAI,GAAG,IAAI,IAAIA,IAAI,IAAI,KAAK,EAAE/E,CAAC,EAAE,MAChC,IAAI+E,IAAI,GAAG,KAAK,IAAIA,IAAI,IAAI,MAAM,EAAE/E,CAAC,IAAI,CAAC;IAC/C,IAAI+E,IAAI,IAAI,MAAM,IAAIA,IAAI,IAAI,MAAM,EAAE9E,CAAC,EAAE;EAC3C;EACA,OAAOD,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA,SAASiF,UAAUA,CAACC,MAAM,EAAE;EAC1B,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIlF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiF,MAAM,CAAChF,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIiF,MAAM,CAACjF,CAAC,CAAC,EAAE;MACbkF,QAAQ,CAACC,IAAI,CAACF,MAAM,CAACjF,CAAC,CAAC,CAAC;IAC1B;EACF;EACA,OAAOkF,QAAQ;AACjB;AAEA,SAASE,KAAKA,CAACC,IAAI,EAAE;EACnB,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,OAAOL,UAAU,CACfM,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,GAAG,CAAEC,GAAG,IAAK;IAC7B,IAAIJ,IAAI,CAACI,GAAG,CAAC,KAAKC,SAAS,EAAE,OAAO,EAAE;IACtC,OAAOC,kBAAkB,CAACF,GAAG,CAAC,GAAG,GAAG,GAAGE,kBAAkB,CAACN,IAAI,CAACI,GAAG,CAAC,CAAC;EACtE,CAAC,CACH,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;AACb;AAEA,SAASC,SAASA,CAAC/B,GAAG,EAAE;EACtB,MAAMI,MAAM,GAAGJ,GAAG,CAACpC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChC,IAAI,CAACwC,MAAM,EAAE;IACX,OAAO,CAAC,CAAC;EACX;EACA,OAAO4B,IAAI,CAACC,KAAK,CACf,IAAI,GACFrB,kBAAkB,CAACR,MAAM,CAAC,CACvB9D,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CACpBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GACtB,IACJ,CAAC;AACH;AAEA,SAAS4F,SAASA,CAACrB,GAAG,EAAE;EACtB,MAAMsB,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EACzCF,GAAG,CAACG,SAAS,GAAGzB,GAAG;EACnB,OAAOsB,GAAG,CAACI,WAAW,IAAIJ,GAAG,CAACK,SAAS;AACzC;AAEA,SAASC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACnC;AACF;;EAEE,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9BA,MAAM,GAAG,CAAC,CAAC;EACb;EACA,IAAIE,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACzB,OAAOA,MAAM,CAACG,KAAK,CAAC,CAAC;EACvB;EACAtB,MAAM,CAACC,IAAI,CAACkB,MAAM,CAAC,CAACI,OAAO,CAAEC,QAAQ,IAAK;IACxC,MAAMC,cAAc,GAAGN,MAAM,CAACK,QAAQ,CAAC;IACvC,IAAI,OAAOC,cAAc,KAAK,QAAQ,EAAE;MACtCP,MAAM,CAACM,QAAQ,CAAC,GAAGP,WAAW,CAACC,MAAM,CAACM,QAAQ,CAAC,EAAEC,cAAc,CAAC;IAClE,CAAC,MAAM;MACLP,MAAM,CAACM,QAAQ,CAAC,GAAGC,cAAc;IACnC;EACF,CAAC,CAAC;EACF,OAAOP,MAAM;AACf;AAEA,SAASQ,WAAWA,CAACC,OAAO,EAAEC,SAAS,EAAE;EACvC,IAAI,CAACD,OAAO,IAAI,CAACC,SAAS,EAAE;IAC1B;EACF;EACA,IAAIC,WAAW,GAAGF,OAAO,CAACC,SAAS;EACnC,MAAME,SAAS,GAAGD,WAAW,CAACrF,OAAO,CAACoF,SAAS,CAAC;EAChD,IAAIE,SAAS,KAAK,CAAC,CAAC,EAAE;IACpBD,WAAW,IAAI,EAAE,GAAGD,SAAS;EAC/B,CAAC,MAAM;IACLC,WAAW,GACTA,WAAW,CAACE,MAAM,CAAC,CAAC,EAAED,SAAS,CAAC,GAChCD,WAAW,CAACE,MAAM,CAACD,SAAS,GAAGF,SAAS,CAACjH,MAAM,CAAC;EACpD;EACAgH,OAAO,CAACC,SAAS,GAAGC,WAAW;AACjC;AAEA,MAAMG,aAAa,GAAG,CACpB;EACEC,IAAI,EAAE,IAAI;EACVC,OAAOA,CAACC,MAAM,EAAE;IACd,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,KAAK,GAAG,IAAID,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;IACjDH,GAAG,CAACI,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;IAC5BN,MAAM,CAACO,KAAK,CAAC,MAAM,EAAE,CAACJ,KAAK,EAAEF,GAAG,CAAC,CAAC;EACpC;AACF,CAAC,EACD;EACEH,IAAI,EAAE,MAAM;EACZC,OAAOA,CAACC,MAAM,EAAE;IACd,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;IAC/C,MAAMD,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxBC,KAAK,CAACE,OAAO,CAACJ,GAAG,CAACK,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC;IACnDN,MAAM,CAACO,KAAK,CAAC,MAAM,EAAE,CAACJ,KAAK,EAAEF,GAAG,CAAC,CAAC;EACpC;AACF,CAAC,EACD;EACEH,IAAI,EAAE,OAAO;EACbC,OAAOA,CAACC,MAAM,EAAE;IACd,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;IAC/C,MAAMD,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxBC,KAAK,CAACE,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACtDN,MAAM,CAACO,KAAK,CAAC,MAAM,EAAE,CAACJ,KAAK,EAAEF,GAAG,CAAC,CAAC;EACpC;AACF,CAAC,EACD;EACEH,IAAI,EAAE,OAAO;EACbC,OAAOA,CAACC,MAAM,EAAE;IACd,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;IAC/C,MAAMD,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxBC,KAAK,CAACE,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACtDN,MAAM,CAACO,KAAK,CAAC,MAAM,EAAE,CAACJ,KAAK,EAAEF,GAAG,CAAC,CAAC;EACpC;AACF,CAAC,CACF;AAED,SAASK,OAAOA,CAACE,IAAI,EAAE;EACrB,IAAIA,IAAI,KAAK,OAAO,EAAE;IACpB,OAAO,IAAIN,IAAI,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE;EACrD,CAAC,MAAM;IACL,OAAO,IAAIJ,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;EAC5C;AACF;AAEA,SAASK,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAE;EACvC,IAAIC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,MAAM;EAE7C,MAAMC,KAAK,GAAG,SAAAA,CAAA,EAAY;IACxB;IACA,MAAMC,IAAI,GAAG,CAAC,IAAIjB,IAAI,CAAC,CAAC,GAAGc,SAAS;;IAEpC;IACA,IAAIG,IAAI,GAAGR,IAAI,IAAIQ,IAAI,GAAG,CAAC,EAAE;MAC3BN,OAAO,GAAGO,UAAU,CAACF,KAAK,EAAEP,IAAI,GAAGQ,IAAI,CAAC;IAC1C,CAAC,MAAM;MACLN,OAAO,GAAG,IAAI;MACd;MACA,IAAI,CAACD,SAAS,EAAE;QACdK,MAAM,GAAGP,IAAI,CAACW,KAAK,CAACN,OAAO,EAAED,IAAI,CAAC;QAClC,IAAI,CAACD,OAAO,EAAEE,OAAO,GAAGD,IAAI,GAAG,IAAI;MACrC;IACF;EACF,CAAC;EAED,OAAO,UAAU,GAAGA,IAAI,EAAE;IACxBC,OAAO,GAAG,IAAI;IACdC,SAAS,GAAG,CAAC,IAAId,IAAI,CAAC,CAAC;IACvB,MAAMoB,OAAO,GAAGV,SAAS,IAAI,CAACC,OAAO;IACrC;IACA,IAAI,CAACA,OAAO,EAAEA,OAAO,GAAGO,UAAU,CAACF,KAAK,EAAEP,IAAI,CAAC;IAC/C,IAAIW,OAAO,EAAE;MACXL,MAAM,GAAGP,IAAI,CAACW,KAAK,CAACN,OAAO,EAAED,IAAI,CAAC;MAClCC,OAAO,GAAGD,IAAI,GAAG,IAAI;IACvB;IAEA,OAAOG,MAAM;EACf,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASM,SAASA,CAACvC,MAAM,EAAE;EACzB,IAAI,CAACA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IACzC,MAAM,IAAIwC,KAAK,CAAC,iBAAiB,EAAE,WAAW,CAAC;EACjD;EACA,MAAMC,SAAS,GAAGzC,MAAM,CAAC0C,WAAW,KAAKzC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC;EACxDpB,MAAM,CAACC,IAAI,CAACkB,MAAM,CAAC,CAACI,OAAO,CAAEtB,IAAI,IAAK;IACpC,IAAIkB,MAAM,CAAClB,IAAI,CAAC,IAAI,OAAOkB,MAAM,CAAClB,IAAI,CAAC,KAAK,QAAQ,EAAE;MACpD2D,SAAS,CAAC3D,IAAI,CAAC,GAAGyD,SAAS,CAACvC,MAAM,CAAClB,IAAI,CAAC,CAAC;IAC3C,CAAC,MAAM;MACL2D,SAAS,CAAC3D,IAAI,CAAC,GAAGkB,MAAM,CAAClB,IAAI,CAAC;IAChC;EACF,CAAC,CAAC;EACF,OAAO2D,SAAS;AAClB;AAEA,SAASE,SAASA,CAAC3G,GAAG,EAAE;EACtB,OAAOiE,KAAK,CAAC2C,IAAI,CAAC,IAAIC,GAAG,CAAC7G,GAAG,CAAC,CAAC;AACjC;AAEA,SAAS8G,kBAAkBA,CAAA,EAAG;EAC5B,MAAMd,SAAS,GAAG,CAAC,IAAId,IAAI,CAAC,CAAC,GAAG,EAAE;EAClC,MAAM6B,SAAS,GAAGC,QAAQ,CAAC,CAAC,CAAC,GAAG5J,IAAI,CAAC6J,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,EAAE;EAC5D,OAAO,CAAC,EAAEF,SAAS,GAAGf,SAAS,CAAC,EAAE9H,QAAQ,CAAC,EAAE,CAAC;AAChD;AAEA,SAASgJ,QAAQA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC1B,OAAO,CAAC,CAACD,GAAG,CAAC1C,SAAS,CAACtG,KAAK,CAAC,IAAIY,MAAM,CAAC,SAAS,GAAGqI,GAAG,GAAG,SAAS,CAAC,CAAC;AACvE;AAEA,SAASC,QAAQA,CAACF,GAAG,EAAEC,GAAG,EAAE;EAC1B,IAAI,CAACF,QAAQ,CAACC,GAAG,EAAEC,GAAG,CAAC,EAAED,GAAG,CAAC1C,SAAS,IAAI,GAAG,GAAG2C,GAAG;AACrD;AAEA,SAASE,WAAWA,CAACH,GAAG,EAAEC,GAAG,EAAE;EAC7B,IAAIF,QAAQ,CAACC,GAAG,EAAEC,GAAG,CAAC,EAAE;IACtB,MAAMtI,GAAG,GAAG,IAAIC,MAAM,CAAC,SAAS,GAAGqI,GAAG,GAAG,SAAS,CAAC;IACnDD,GAAG,CAAC1C,SAAS,GAAG0C,GAAG,CAAC1C,SAAS,CAAC9G,OAAO,CAACmB,GAAG,EAAE,GAAG,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyI,SAASA,CAACvH,GAAG,EAAEwH,MAAM,EAAEC,MAAM,EAAE;EACtCzH,GAAG,CAACwH,MAAM,CAAC,GAAGxH,GAAG,CAACE,MAAM,CAACuH,MAAM,EAAE,CAAC,EAAEzH,GAAG,CAACwH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,OAAOxH,GAAG;AACZ;;AAEA;AACA,SAAS0H,SAASA,CAChBC,MAAM,EACNC,IAAI,GAAG,EAAE,EACT5E,GAAG,GAAG,EAAE,EACR6E,IAAI,GAAG,YAAY,EACnBC,KAAK,GAAG,WAAW,EACnB;EACA,IAAI9E,GAAG,KAAK,EAAE,EAAE;EAChB,KAAK,IAAI/C,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG2H,IAAI,CAACpK,MAAM,EAAEyC,KAAK,EAAE,EAAE;IAChD,MAAMuE,OAAO,GAAGoD,IAAI,CAAC3H,KAAK,CAAC;IAC3B,IAAIuE,OAAO,CAACqD,IAAI,CAAC,KAAKF,MAAM,CAACI,IAAI,CAAC/E,GAAG,CAAC,EAAE;MACtC,OAAOwB,OAAO,CAACsD,KAAK,CAAC;IACvB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,SAASA,CAACpG,GAAG,EAAE;EAC7B,KAAK,MAAMoB,GAAG,IAAIpB,GAAG,EAAE;IACrB,IACEA,GAAG,CAACqG,cAAc,CAACjF,GAAG,CAAC,KACtBpB,GAAG,CAACoB,GAAG,CAAC,KAAK,IAAI,IAAIpB,GAAG,CAACoB,GAAG,CAAC,KAAKC,SAAS,IAAIrB,GAAG,CAACoB,GAAG,CAAC,KAAK,EAAE,CAAC,EAChE;MACA,OAAOpB,GAAG,CAACoB,GAAG,CAAC,EAAC;IAClB;EACF;;EACA,OAAOpB,GAAG;AACZ;;AAEA;AACA;AACA,SAASjD,KAAKA,CAACZ,KAAK,EAAE;EACpB,MAAMe,GAAG,GAAG,mBAAmB;EAC/B,IAAIA,GAAG,CAACoJ,IAAI,CAACnK,KAAK,CAAC,EAAE;IACnB,OAAOA,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACzB,MAAM;EAC9C;EACA,OAAOsB,GAAG,CAACoJ,IAAI,CAACnK,KAAK,CAAC;AACxB;AACA;AACA,SAASoK,WAAWA,CAACR,MAAM,EAAE;EAC3B,OAAO,CAAC7K,MAAM,CAACsL,QAAQ,CAACT,MAAM,CAAC;AACjC;AACA;AACA,SAASU,IAAIA,CAACvD,IAAI,EAAE;EAClBwD,OAAO,CAACC,KAAK,CAACzD,IAAI,CAAC;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0D,eAAeA,CACtBzK,KAAK,EACLC,MAAM,GAAG,CAAC,EACVQ,MAAM,GAAG,KAAK,EACdD,IAAI,GAAG,IAAI,EACXkK,WAAW,GAAG,KAAK,EACnB;EACA,IAAIN,WAAW,CAACpK,KAAK,CAAC,IAAKlB,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,IAAI,CAAC,CAACA,KAAM,EAAE;IAC3D;IACAsK,IAAI,CAAC,sBAAsB,CAAC;IAC5B,OAAO9J,IAAI,GAAG,EAAE,GAAG,CAAC;EACtB;EACA,IAAI4J,WAAW,CAACnK,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;IACrC;IACAqK,IAAI,CAAC,uBAAuB,CAAC;IAC7B,OAAOtK,KAAK;EACd;EACA,MAAMW,MAAM,GAAGC,KAAK,CAACZ,KAAK,CAAC,EAAC;EAC5B;EACA;EACA,IAAI2K,IAAI,GAAGD,WAAW,GAAG/J,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGA,MAAM;EACzD,IAAIA,MAAM,EAAE;IACVX,KAAK,GAAGA,KAAK,CAACa,OAAO,CACnBF,MAAM,GAAGV,MAAM,GAAIQ,MAAM,GAAGR,MAAM,GAAG0K,IAAI,GAAID,WAAW,GAAGzK,MAAM,GAAGU,MACtE,CAAC;IACD,OAAOX,KAAK;EACd;EACAA,KAAK,GAAGS,MAAM,GAAGT,KAAK,CAACa,OAAO,CAACZ,MAAM,CAAC,GAAGD,KAAK;EAC9C,OAAOA,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4K,gBAAgBA,CAAC5K,KAAK,EAAEC,MAAM,GAAG,CAAC,EAAEQ,MAAM,GAAG,KAAK,EAAED,IAAI,GAAG,IAAI,EAAE;EACxER,KAAK,GAAGyK,eAAe,CAACzK,KAAK,EAAEC,MAAM,EAAEQ,MAAM,EAAED,IAAI,CAAC;EACpD,MAAM,CAACqK,OAAO,EAAEC,KAAK,CAAC,GAAG9K,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACe,KAAK,CAAC,GAAG,CAAC;EACpD,IAAI6J,GAAG;EACP,MAAMhK,GAAG,GAAG,gBAAgB;EAC5B,IAAIiK,MAAM,GAAGH,OAAO,CACjB3J,KAAK,CAAC,EAAE,CAAC,CACT+J,OAAO,CAAC,CAAC,CACT7F,IAAI,CAAC,EAAE,CAAC,CACRxF,OAAO,CAACmB,GAAG,EAAE,CAACX,KAAK,EAAE2D,EAAE,KAAK;IAC3B,OAAO3D,KAAK,GAAG,GAAG;EACpB,CAAC,CAAC;EACJ4K,MAAM,GAAGA,MAAM,CAAC9J,KAAK,CAAC,EAAE,CAAC,CAAC+J,OAAO,CAAC,CAAC,CAAC7F,IAAI,CAAC,EAAE,CAAC;EAC5C0F,KAAK,GAAIC,GAAG,GAAGC,MAAM,GAAG,GAAG,GAAGF,KAAK,GAAKC,GAAG,GAAGC,MAAO;EACrD,OAAOD,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAAClL,KAAK,EAAEC,MAAM,GAAG,CAAC,EAAE;EACvC,SAASpB,wBAAwBA,CAAC0C,GAAG,EAAE;IACrC,OACEA,GAAG,KAAK2D,SAAS,IACjB3D,GAAG,IAAI,IAAI,IACV,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAAC4J,IAAI,CAAC,CAAC,KAAK,EAAG;EAElD;EACA,IAAItM,wBAAwB,CAACmB,KAAK,CAAC,IAAIlB,KAAK,CAACC,MAAM,CAACiB,KAAK,CAAC,CAAC,EAAE;IAC3D,OAAOA,KAAK;EACd;EACA,OAAOyK,eAAe,CAACzK,KAAK,GAAG,GAAG,EAAEC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,GAAG;AACtE;AAEA,eAAe;EACboD,cAAc;EACdgB,UAAU;EACVG,UAAU;EACVI,KAAK;EACLS,SAAS;EACTG,SAAS;EACTO,WAAW;EACXwB,OAAO;EACPG,QAAQ;EACRc,SAAS;EACTI,SAAS;EACTG,kBAAkB;EAClBvC,WAAW;EACX2C,QAAQ;EACRG,QAAQ;EACRC,WAAW;EACX5K,iBAAiB;EACjBoB,WAAW;EACXQ,oBAAoB;EACpBO,KAAK;EACLK,QAAQ;EACRC,SAAS;EACTI,OAAO;EACPE,YAAY;EACZE,QAAQ;EACRC,SAAS;EACTC,QAAQ;EACRC,OAAO;EACPC,WAAW;EACXI,WAAW;EACXX,MAAM;EACNqB,MAAM;EACNI,MAAM;EACNE,QAAQ;EACRoG,SAAS;EACTS,SAAS;EACTN,SAAS;EACTzJ,iBAAiB;EACjBgL,YAAY;EACZN,gBAAgB;EAChBH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}