{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore, createPinia } from 'pinia';\nconst initialCacheData = JSON.parse(localStorage.getItem('cacheData')) || {};\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: initialCacheData // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7);\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        // 如果cacheKey不存在，将cacheInfo设置为初始版本\n        this.cacheData[cacheKey] = {\n          latestVersion: {\n            data: cacheInfo,\n            number: 0\n          }\n        };\n      }\n      const lastVersion = this.cacheData[cacheKey].latestVersion;\n      if (JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)) {\n        // 只有在cacheInfo与上一个版本存在差异时才存储为最新版本\n        const versionNumber = lastVersion.number + 1;\n        this.cacheData[cacheKey][`version${versionNumber}`] = {\n          data: cacheInfo\n        };\n        this.cacheData[cacheKey].latestVersion = {\n          data: cacheInfo,\n          number: versionNumber\n        };\n        if (time > 0) {\n          // 自动缓存\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo);\n          }, time);\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer;\n        }\n      }\n      localStorage.setItem('cacheData', JSON.stringify(this.cacheData));\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer);\n      }\n    },\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey];\n        localStorage.setItem('cacheData', JSON.stringify(this.cacheData));\n        return true;\n      }\n      return false;\n    },\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey);\n      }\n      this.cacheData = {};\n    },\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData;\n    },\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (!cacheKey) {\n        return {};\n      }\n      if (this.cacheData[cacheKey]) {\n        // 直接将最新版本的数据存储在cacheObj中\n        const cacheObj = this.cacheData[cacheKey].latestVersion.data;\n\n        // 添加getVersion方法\n        cacheObj.getVersion = versionNum => {\n          if (versionNum >= 0) {\n            const versionKey = `version${versionNum}`;\n            return this.cacheData[cacheKey][versionKey] ? this.cacheData[cacheKey][versionKey].data : {};\n          }\n          return {};\n        };\n\n        // 添加getAllVersion方法\n        cacheObj.getAllVersion = () => {\n          const allVersions = [];\n          for (const key in this.cacheData[cacheKey]) {\n            if (key.startsWith('version')) {\n              allVersions.push(this.cacheData[cacheKey][key].data);\n            }\n          }\n          return allVersions;\n        };\n\n        // 添加diff方法\n        cacheObj.diff = versionNum => {\n          if (versionNum >= 0) {\n            const currentVersion = cacheObj.getVersion(versionNum);\n            const previousVersion = cacheObj.getVersion(versionNum - 1);\n            if (currentVersion && previousVersion) {\n              const diff = {};\n              for (const key in currentVersion) {\n                if (JSON.stringify(currentVersion[key]) !== JSON.stringify(previousVersion[key])) {\n                  diff[key] = [previousVersion[key], currentVersion[key]];\n                }\n              }\n              return diff;\n            }\n          }\n          return {};\n        };\n\n        // 添加diffWithInfo方法\n        cacheObj.diffWithInfo = (infoObj, versionNum) => {\n          if (versionNum >= 0) {\n            const currentVersion = cacheObj.getVersion(versionNum);\n            if (currentVersion) {\n              const diff = {};\n              for (const key in infoObj) {\n                if (JSON.stringify(currentVersion[key]) !== JSON.stringify(infoObj[key])) {\n                  diff[key] = [infoObj[key], currentVersion[key]];\n                }\n              }\n              return diff;\n            }\n          }\n          return {};\n        };\n        return cacheObj;\n      }\n      return {};\n    },\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey][`version${versionNum}`]) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data;\n      }\n      return {};\n    },\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (versionNum === undefined || versionNum === this.cacheData[cacheKey].latestVersion.number) {\n        return {};\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`];\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`];\n      const diff = {};\n      for (const key in currentVersion.data) {\n        if (JSON.stringify(currentVersion.data[key]) !== JSON.stringify(nextVersion.data[key])) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]];\n        }\n      }\n      return diff;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","createPinia","initialCacheData","JSON","parse","localStorage","getItem","cubeCacheStore","state","cacheData","actions","getCacheKey","Math","random","toString","substring","set","cacheKey","cacheInfo","time","latestVersion","data","number","lastVersion","stringify","versionNumber","autoSaveTimer","setInterval","setItem","cancelAutoSave","clearInterval","clear","clearAll","getAll","get","cacheObj","getVersion","versionNum","versionKey","getAllVersion","allVersions","key","startsWith","push","diff","currentVersion","previousVersion","diffWithInfo","infoObj","undefined","nextVersion"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore, createPinia } from 'pinia'\n\nconst initialCacheData = JSON.parse(localStorage.getItem('cacheData')) || {}\n\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: initialCacheData, // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7)\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        // 如果cacheKey不存在，将cacheInfo设置为初始版本\n        this.cacheData[cacheKey] = {\n          latestVersion: {\n            data: cacheInfo,\n            number: 0,\n          },\n        }\n      }\n\n      const lastVersion = this.cacheData[cacheKey].latestVersion\n\n      if (JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)) {\n        // 只有在cacheInfo与上一个版本存在差异时才存储为最新版本\n        const versionNumber = lastVersion.number + 1\n        this.cacheData[cacheKey][`version${versionNumber}`] = {\n          data: cacheInfo,\n        }\n        this.cacheData[cacheKey].latestVersion = {\n          data: cacheInfo,\n          number: versionNumber,\n        }\n\n        if (time > 0) {\n          // 自动缓存\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo)\n          }, time)\n\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer\n        }\n      }\n      localStorage.setItem('cacheData', JSON.stringify(this.cacheData))\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer)\n      }\n    },\n\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey]\n        localStorage.setItem('cacheData', JSON.stringify(this.cacheData))\n        return true\n      }\n      return false\n    },\n\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey)\n      }\n      this.cacheData = {}\n    },\n\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData\n    },\n\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (!cacheKey) {\n        return {};\n      }\n\n      if (this.cacheData[cacheKey]) {\n        // 直接将最新版本的数据存储在cacheObj中\n        const cacheObj = this.cacheData[cacheKey].latestVersion.data;\n\n        // 添加getVersion方法\n        cacheObj.getVersion = (versionNum) => {\n          if (versionNum >= 0) {\n            const versionKey = `version${versionNum}`;\n            return this.cacheData[cacheKey][versionKey]\n              ? this.cacheData[cacheKey][versionKey].data\n              : {};\n          }\n          return {};\n        };\n\n        // 添加getAllVersion方法\n        cacheObj.getAllVersion = () => {\n          const allVersions = [];\n          for (const key in this.cacheData[cacheKey]) {\n            if (key.startsWith('version')) {\n              allVersions.push(this.cacheData[cacheKey][key].data);\n            }\n          }\n          return allVersions;\n        };\n\n        // 添加diff方法\n        cacheObj.diff = (versionNum) => {\n          if (versionNum >= 0) {\n            const currentVersion = cacheObj.getVersion(versionNum);\n            const previousVersion = cacheObj.getVersion(versionNum - 1);\n            if (currentVersion && previousVersion) {\n              const diff = {};\n              for (const key in currentVersion) {\n                if (\n                  JSON.stringify(currentVersion[key]) !==\n                  JSON.stringify(previousVersion[key])\n                ) {\n                  diff[key] = [previousVersion[key], currentVersion[key]];\n                }\n              }\n              return diff;\n            }\n          }\n          return {};\n        };\n\n        // 添加diffWithInfo方法\n        cacheObj.diffWithInfo = (infoObj, versionNum) => {\n          if (versionNum >= 0) {\n            const currentVersion = cacheObj.getVersion(versionNum);\n            if (currentVersion) {\n              const diff = {};\n              for (const key in infoObj) {\n                if (\n                  JSON.stringify(currentVersion[key]) !== JSON.stringify(infoObj[key])\n                ) {\n                  diff[key] = [infoObj[key], currentVersion[key]];\n                }\n              }\n              return diff;\n            }\n          }\n          return {};\n        };\n\n        return cacheObj;\n      }\n      return {};\n    },\n    \n\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (\n        this.cacheData[cacheKey] &&\n        this.cacheData[cacheKey][`version${versionNum}`]\n      ) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data\n      }\n      return {}\n    },\n\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (\n        versionNum === undefined ||\n        versionNum === this.cacheData[cacheKey].latestVersion.number\n      ) {\n        return {}\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`]\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`]\n      const diff = {}\n\n      for (const key in currentVersion.data) {\n        if (\n          JSON.stringify(currentVersion.data[key]) !==\n          JSON.stringify(nextVersion.data[key])\n        ) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]]\n        }\n      }\n\n      return diff\n    },\n  },\n})\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,OAAO;AAEhD,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;AAE5E,OAAO,MAAMC,cAAc,GAAGP,WAAW,CAAC,WAAW,EAAE;EACrDQ,KAAK,EAAEA,CAAA,MAAO;IACZC,SAAS,EAAEP,gBAAgB,CAAE;EAC/B,CAAC,CAAC;;EAEFQ,OAAO,EAAE;IACP;IACAC,WAAWA,CAAA,EAAG;MACZ;MACA,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;IAChD,CAAC;IACD;IACAC,GAAGA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,GAAG,CAAC,EAAE;MACjC,IAAI,CAAC,IAAI,CAACV,SAAS,CAACQ,QAAQ,CAAC,EAAE;QAC7B;QACA,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,GAAG;UACzBG,aAAa,EAAE;YACbC,IAAI,EAAEH,SAAS;YACfI,MAAM,EAAE;UACV;QACF,CAAC;MACH;MAEA,MAAMC,WAAW,GAAG,IAAI,CAACd,SAAS,CAACQ,QAAQ,CAAC,CAACG,aAAa;MAE1D,IAAIjB,IAAI,CAACqB,SAAS,CAACD,WAAW,CAACF,IAAI,CAAC,KAAKlB,IAAI,CAACqB,SAAS,CAACN,SAAS,CAAC,EAAE;QAClE;QACA,MAAMO,aAAa,GAAGF,WAAW,CAACD,MAAM,GAAG,CAAC;QAC5C,IAAI,CAACb,SAAS,CAACQ,QAAQ,CAAC,CAAE,UAASQ,aAAc,EAAC,CAAC,GAAG;UACpDJ,IAAI,EAAEH;QACR,CAAC;QACD,IAAI,CAACT,SAAS,CAACQ,QAAQ,CAAC,CAACG,aAAa,GAAG;UACvCC,IAAI,EAAEH,SAAS;UACfI,MAAM,EAAEG;QACV,CAAC;QAED,IAAIN,IAAI,GAAG,CAAC,EAAE;UACZ;UACA,MAAMO,aAAa,GAAGC,WAAW,CAAC,MAAM;YACtC,IAAI,CAACX,GAAG,CAACC,QAAQ,EAAEC,SAAS,CAAC;UAC/B,CAAC,EAAEC,IAAI,CAAC;UAER,IAAI,CAACV,SAAS,CAACQ,QAAQ,CAAC,CAACS,aAAa,GAAGA,aAAa;QACxD;MACF;MACArB,YAAY,CAACuB,OAAO,CAAC,WAAW,EAAEzB,IAAI,CAACqB,SAAS,CAAC,IAAI,CAACf,SAAS,CAAC,CAAC;IACnE,CAAC;IACD;IACAoB,cAAcA,CAACZ,QAAQ,EAAE;MACvB,IAAI,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,IAAI,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,CAACS,aAAa,EAAE;QACtEI,aAAa,CAAC,IAAI,CAACrB,SAAS,CAACQ,QAAQ,CAAC,CAACS,aAAa,CAAC;MACvD;IACF,CAAC;IAED;IACAK,KAAKA,CAACd,QAAQ,EAAE;MACd,IAAI,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,EAAE;QAC5B,OAAO,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC;QAC/BZ,YAAY,CAACuB,OAAO,CAAC,WAAW,EAAEzB,IAAI,CAACqB,SAAS,CAAC,IAAI,CAACf,SAAS,CAAC,CAAC;QACjE,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC;IAED;IACAuB,QAAQA,CAAA,EAAG;MACT,KAAK,MAAMf,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;QACrC,IAAI,CAACsB,KAAK,CAACd,QAAQ,CAAC;MACtB;MACA,IAAI,CAACR,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAED;IACAwB,MAAMA,CAAA,EAAG;MACP,OAAO,IAAI,CAACxB,SAAS;IACvB,CAAC;IAED;IACAyB,GAAGA,CAACjB,QAAQ,EAAE;MACZ,IAAI,CAACA,QAAQ,EAAE;QACb,OAAO,CAAC,CAAC;MACX;MAEA,IAAI,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,EAAE;QAC5B;QACA,MAAMkB,QAAQ,GAAG,IAAI,CAAC1B,SAAS,CAACQ,QAAQ,CAAC,CAACG,aAAa,CAACC,IAAI;;QAE5D;QACAc,QAAQ,CAACC,UAAU,GAAIC,UAAU,IAAK;UACpC,IAAIA,UAAU,IAAI,CAAC,EAAE;YACnB,MAAMC,UAAU,GAAI,UAASD,UAAW,EAAC;YACzC,OAAO,IAAI,CAAC5B,SAAS,CAACQ,QAAQ,CAAC,CAACqB,UAAU,CAAC,GACvC,IAAI,CAAC7B,SAAS,CAACQ,QAAQ,CAAC,CAACqB,UAAU,CAAC,CAACjB,IAAI,GACzC,CAAC,CAAC;UACR;UACA,OAAO,CAAC,CAAC;QACX,CAAC;;QAED;QACAc,QAAQ,CAACI,aAAa,GAAG,MAAM;UAC7B,MAAMC,WAAW,GAAG,EAAE;UACtB,KAAK,MAAMC,GAAG,IAAI,IAAI,CAAChC,SAAS,CAACQ,QAAQ,CAAC,EAAE;YAC1C,IAAIwB,GAAG,CAACC,UAAU,CAAC,SAAS,CAAC,EAAE;cAC7BF,WAAW,CAACG,IAAI,CAAC,IAAI,CAAClC,SAAS,CAACQ,QAAQ,CAAC,CAACwB,GAAG,CAAC,CAACpB,IAAI,CAAC;YACtD;UACF;UACA,OAAOmB,WAAW;QACpB,CAAC;;QAED;QACAL,QAAQ,CAACS,IAAI,GAAIP,UAAU,IAAK;UAC9B,IAAIA,UAAU,IAAI,CAAC,EAAE;YACnB,MAAMQ,cAAc,GAAGV,QAAQ,CAACC,UAAU,CAACC,UAAU,CAAC;YACtD,MAAMS,eAAe,GAAGX,QAAQ,CAACC,UAAU,CAACC,UAAU,GAAG,CAAC,CAAC;YAC3D,IAAIQ,cAAc,IAAIC,eAAe,EAAE;cACrC,MAAMF,IAAI,GAAG,CAAC,CAAC;cACf,KAAK,MAAMH,GAAG,IAAII,cAAc,EAAE;gBAChC,IACE1C,IAAI,CAACqB,SAAS,CAACqB,cAAc,CAACJ,GAAG,CAAC,CAAC,KACnCtC,IAAI,CAACqB,SAAS,CAACsB,eAAe,CAACL,GAAG,CAAC,CAAC,EACpC;kBACAG,IAAI,CAACH,GAAG,CAAC,GAAG,CAACK,eAAe,CAACL,GAAG,CAAC,EAAEI,cAAc,CAACJ,GAAG,CAAC,CAAC;gBACzD;cACF;cACA,OAAOG,IAAI;YACb;UACF;UACA,OAAO,CAAC,CAAC;QACX,CAAC;;QAED;QACAT,QAAQ,CAACY,YAAY,GAAG,CAACC,OAAO,EAAEX,UAAU,KAAK;UAC/C,IAAIA,UAAU,IAAI,CAAC,EAAE;YACnB,MAAMQ,cAAc,GAAGV,QAAQ,CAACC,UAAU,CAACC,UAAU,CAAC;YACtD,IAAIQ,cAAc,EAAE;cAClB,MAAMD,IAAI,GAAG,CAAC,CAAC;cACf,KAAK,MAAMH,GAAG,IAAIO,OAAO,EAAE;gBACzB,IACE7C,IAAI,CAACqB,SAAS,CAACqB,cAAc,CAACJ,GAAG,CAAC,CAAC,KAAKtC,IAAI,CAACqB,SAAS,CAACwB,OAAO,CAACP,GAAG,CAAC,CAAC,EACpE;kBACAG,IAAI,CAACH,GAAG,CAAC,GAAG,CAACO,OAAO,CAACP,GAAG,CAAC,EAAEI,cAAc,CAACJ,GAAG,CAAC,CAAC;gBACjD;cACF;cACA,OAAOG,IAAI;YACb;UACF;UACA,OAAO,CAAC,CAAC;QACX,CAAC;QAED,OAAOT,QAAQ;MACjB;MACA,OAAO,CAAC,CAAC;IACX,CAAC;IAGD;IACAC,UAAUA,CAACnB,QAAQ,EAAEoB,UAAU,EAAE;MAC/B,IACE,IAAI,CAAC5B,SAAS,CAACQ,QAAQ,CAAC,IACxB,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,CAAE,UAASoB,UAAW,EAAC,CAAC,EAChD;QACA,OAAO,IAAI,CAAC5B,SAAS,CAACQ,QAAQ,CAAC,CAAE,UAASoB,UAAW,EAAC,CAAC,CAAChB,IAAI;MAC9D;MACA,OAAO,CAAC,CAAC;IACX,CAAC;IAED;IACAuB,IAAIA,CAAC3B,QAAQ,EAAEoB,UAAU,EAAE;MACzB,IACEA,UAAU,KAAKY,SAAS,IACxBZ,UAAU,KAAK,IAAI,CAAC5B,SAAS,CAACQ,QAAQ,CAAC,CAACG,aAAa,CAACE,MAAM,EAC5D;QACA,OAAO,CAAC,CAAC;MACX;MACA,MAAMuB,cAAc,GAAG,IAAI,CAACpC,SAAS,CAACQ,QAAQ,CAAC,CAAE,UAASoB,UAAW,EAAC,CAAC;MACvE,MAAMa,WAAW,GAAG,IAAI,CAACzC,SAAS,CAACQ,QAAQ,CAAC,CAAE,UAASoB,UAAU,GAAG,CAAE,EAAC,CAAC;MACxE,MAAMO,IAAI,GAAG,CAAC,CAAC;MAEf,KAAK,MAAMH,GAAG,IAAII,cAAc,CAACxB,IAAI,EAAE;QACrC,IACElB,IAAI,CAACqB,SAAS,CAACqB,cAAc,CAACxB,IAAI,CAACoB,GAAG,CAAC,CAAC,KACxCtC,IAAI,CAACqB,SAAS,CAAC0B,WAAW,CAAC7B,IAAI,CAACoB,GAAG,CAAC,CAAC,EACrC;UACAG,IAAI,CAACH,GAAG,CAAC,GAAG,CAACI,cAAc,CAACxB,IAAI,CAACoB,GAAG,CAAC,EAAES,WAAW,CAAC7B,IAAI,CAACoB,GAAG,CAAC,CAAC;QAC/D;MACF;MAEA,OAAOG,IAAI;IACb;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}