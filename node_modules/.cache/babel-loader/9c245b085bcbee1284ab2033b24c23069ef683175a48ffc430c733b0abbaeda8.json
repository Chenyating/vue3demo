{"ast":null,"code":"import VolcengineAnalytics from '@cndinfo/cube-analytics-sdk';\nconst volcengine = {\n  bind(el, binding, vNode) {\n    const dom = el;\n    const tagName = dom.tagName.toLowerCase();\n    let actionType = '';\n    const vNodeItem = vNode.componentInstance.$options;\n    const propsData = vNodeItem.propsData;\n    const router = vNode.componentInstance.$router;\n    // 初始化\n    const params = {\n      routerObject: router // 完整 vue-router 对象\n    };\n\n    const analyticsInstance = new VolcengineAnalytics(params);\n    analyticsInstance.start();\n    switch (tagName) {\n      case 'button':\n        actionType = 'button';\n        break;\n      case 'div':\n        if (tagName === 'div' && propsData.gridOptions) {\n          actionType = 'AgGridVue';\n        }\n        break;\n    }\n    switch (actionType) {\n      // button 和 el-button的火山引擎采集事件\n      case 'button':\n        el.onclick = function () {\n          try {\n            analyticsInstance.reportEvent('button_click', {\n              button_name: el.innerText\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        };\n        break;\n      // agGrid 埋点\n      case 'AgGridVue':\n        var gridOptions = propsData.gridOptions;\n        var columnsWidthObject = {};\n        var columnsMovingObject = {};\n        var vNodeData = vNode.componentInstance.$vnode.data;\n        var tableName = vNodeData.ref ? vNodeData.ref : '';\n        var movingColumnName;\n        var widthChangeName;\n        var movingColId;\n        var widthChangeId;\n        gridOptions.onGridReady = function (params) {\n          console.log('onGridReady');\n          const columns = params.columnApi.getAllColumns();\n          columns.forEach(item => {\n            item.addEventListener('sortChanged', event => {\n              const columnName = event.column.colDef.headerName;\n              console.log('aggrid_column_sort_changed');\n              try {\n                analyticsInstance.reportEvent('aggrid_column_sort_changed', {\n                  aggrid_name: tableName,\n                  aggrid_column_name: columnName\n                });\n              } catch (e) {\n                console.log(e);\n              }\n            });\n            item.addEventListener('movingChanged', event => {\n              movingColId = event.column.colId;\n            });\n            item.addEventListener('widthChanged', event => {\n              console.log('aggrid_column_width_changed');\n              // 宽度改变的时候触发\n              widthChangeId = event.column.colId;\n            });\n          });\n        };\n        // 拖拽结束之前触发 但是 widthChanged 也会触发\n        gridOptions.onDragStarted = function (params) {\n          const oldColumns = params.columnApi.columnController.gridColumns;\n          oldColumns.forEach((item, index) => {\n            columnsMovingObject[item.colId] = {\n              index,\n              name: item.colDef.headerName\n            };\n            columnsWidthObject[item.colId] = {\n              width: item.actualWidth,\n              name: item.colDef.headerName\n            };\n          });\n        };\n        // 拖拽结束之后触发 但是 widthChanged 也会触发\n        gridOptions.onDragStopped = function (params) {\n          const nowColumns = params.columnApi.columnController.gridColumns;\n          let beforeIndex = 0;\n          let afterIndex = 0;\n          let oldWith = 0;\n          nowColumns.forEach((item, index) => {\n            if (item.colId === movingColId) {\n              movingColumnName = columnsMovingObject[item.colId].name;\n              beforeIndex = columnsMovingObject[item.colId].index;\n              afterIndex = index;\n            }\n            if (item.colId === widthChangeId) {\n              oldWith = columnsWidthObject[widthChangeId].width;\n              widthChangeName = columnsWidthObject[widthChangeId].name;\n              columnsWidthObject[widthChangeId].width = item.actualWidth;\n            }\n          });\n          if (beforeIndex === afterIndex) {\n            const isWidthNotChanged = oldWith === columnsWidthObject[widthChangeId].width;\n            const isNotDragSort = gridOptions.suppressMovableColumns;\n            if (isNotDragSort && isWidthNotChanged) {\n              // 表明设置了禁止拖拽排序\n              return;\n            }\n            // 表明是 widthChanged 触发的\n            try {\n              analyticsInstance.reportEvent('aggrid_column_width_changed', {\n                aggrid_name: tableName,\n                aggrid_column_name: widthChangeName,\n                aggrid_column_width_before: oldWith,\n                aggrid_column_width_after: columnsWidthObject[widthChangeId].width\n              });\n            } catch (e) {\n              console.log('');\n            }\n          } else {\n            // 拖动排序触发的\n            try {\n              analyticsInstance.reportEvent('aggrid_column_moving_changed', {\n                aggrid_name: tableName,\n                aggrid_column_name: movingColumnName,\n                aggrid_column_sort_index_before: beforeIndex,\n                aggrid_column_sort_index_after: afterIndex\n              });\n            } catch (e) {\n              console.log(e);\n            }\n          }\n        };\n        break;\n    }\n  }\n};\nexport default volcengine;","map":{"version":3,"names":["VolcengineAnalytics","volcengine","bind","el","binding","vNode","dom","tagName","toLowerCase","actionType","vNodeItem","componentInstance","$options","propsData","router","$router","params","routerObject","analyticsInstance","start","gridOptions","onclick","reportEvent","button_name","innerText","e","console","log","columnsWidthObject","columnsMovingObject","vNodeData","$vnode","data","tableName","ref","movingColumnName","widthChangeName","movingColId","widthChangeId","onGridReady","columns","columnApi","getAllColumns","forEach","item","addEventListener","event","columnName","column","colDef","headerName","aggrid_name","aggrid_column_name","colId","onDragStarted","oldColumns","columnController","gridColumns","index","name","width","actualWidth","onDragStopped","nowColumns","beforeIndex","afterIndex","oldWith","isWidthNotChanged","isNotDragSort","suppressMovableColumns","aggrid_column_width_before","aggrid_column_width_after","aggrid_column_sort_index_before","aggrid_column_sort_index_after"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/src/directives/volcengine/index.js"],"sourcesContent":["import VolcengineAnalytics from '@cndinfo/cube-analytics-sdk'\nconst volcengine = {\n  bind(el, binding, vNode) {\n    const dom = el\n    const tagName = dom.tagName.toLowerCase()\n    let actionType = ''\n    const vNodeItem = vNode.componentInstance.$options\n    const propsData = vNodeItem.propsData\n    const router = vNode.componentInstance.$router\n    // 初始化\n    const params = {\n      routerObject: router // 完整 vue-router 对象\n    }\n    const analyticsInstance = new VolcengineAnalytics(params)\n    analyticsInstance.start()\n    switch (tagName) {\n      case 'button':\n        actionType = 'button'\n        break\n      case 'div':\n        if (tagName === 'div' && propsData.gridOptions) {\n          actionType = 'AgGridVue'\n        }\n        break\n    }\n    switch (actionType) {\n      // button 和 el-button的火山引擎采集事件\n      case 'button':\n        el.onclick = function() {\n          try {\n            analyticsInstance.reportEvent('button_click', {\n              button_name: el.innerText\n            })\n          } catch (e) {\n            console.log(e)\n          }\n        }\n        break\n      // agGrid 埋点\n      case 'AgGridVue':\n        var gridOptions = propsData.gridOptions\n        var columnsWidthObject = {}\n        var columnsMovingObject = {}\n        var vNodeData = vNode.componentInstance.$vnode.data\n        var tableName = vNodeData.ref ? vNodeData.ref : ''\n        var movingColumnName\n        var widthChangeName\n        var movingColId\n        var widthChangeId\n        gridOptions.onGridReady = function(params) {\n          console.log('onGridReady')\n          const columns = params.columnApi.getAllColumns()\n          columns.forEach((item) => {\n            item.addEventListener('sortChanged', (event) => {\n              const columnName = event.column.colDef.headerName\n              console.log('aggrid_column_sort_changed')\n              try {\n                analyticsInstance.reportEvent('aggrid_column_sort_changed', {\n                  aggrid_name: tableName,\n                  aggrid_column_name: columnName\n                })\n              } catch (e) {\n                console.log(e)\n              }\n            })\n            item.addEventListener('movingChanged', (event) => {\n              movingColId = event.column.colId\n            })\n            item.addEventListener('widthChanged', (event) => {\n              console.log('aggrid_column_width_changed')\n              // 宽度改变的时候触发\n              widthChangeId = event.column.colId\n            })\n          })\n        }\n        // 拖拽结束之前触发 但是 widthChanged 也会触发\n        gridOptions.onDragStarted = function(params) {\n          const oldColumns = params.columnApi.columnController.gridColumns\n          oldColumns.forEach((item, index) => {\n            columnsMovingObject[item.colId] = {\n              index,\n              name: item.colDef.headerName\n            }\n            columnsWidthObject[item.colId] = {\n              width: item.actualWidth,\n              name: item.colDef.headerName\n            }\n          })\n        }\n        // 拖拽结束之后触发 但是 widthChanged 也会触发\n        gridOptions.onDragStopped = function(params) {\n          const nowColumns = params.columnApi.columnController.gridColumns\n          let beforeIndex = 0\n          let afterIndex = 0\n          let oldWith = 0\n          nowColumns.forEach((item, index) => {\n            if (item.colId === movingColId) {\n              movingColumnName = columnsMovingObject[item.colId].name\n              beforeIndex = columnsMovingObject[item.colId].index\n              afterIndex = index\n            }\n            if (item.colId === widthChangeId) {\n              oldWith = columnsWidthObject[widthChangeId].width\n              widthChangeName = columnsWidthObject[widthChangeId].name\n              columnsWidthObject[widthChangeId].width = item.actualWidth\n            }\n          })\n          if (beforeIndex === afterIndex) {\n            const isWidthNotChanged =\n              oldWith === columnsWidthObject[widthChangeId].width\n            const isNotDragSort = gridOptions.suppressMovableColumns\n            if (isNotDragSort && isWidthNotChanged) {\n              // 表明设置了禁止拖拽排序\n              return\n            }\n            // 表明是 widthChanged 触发的\n            try {\n              analyticsInstance.reportEvent('aggrid_column_width_changed', {\n                aggrid_name: tableName,\n                aggrid_column_name: widthChangeName,\n                aggrid_column_width_before: oldWith,\n                aggrid_column_width_after:\n                  columnsWidthObject[widthChangeId].width\n              })\n            } catch (e) {\n              console.log('')\n            }\n          } else {\n            // 拖动排序触发的\n            try {\n              analyticsInstance.reportEvent('aggrid_column_moving_changed', {\n                aggrid_name: tableName,\n                aggrid_column_name: movingColumnName,\n                aggrid_column_sort_index_before: beforeIndex,\n                aggrid_column_sort_index_after: afterIndex\n              })\n            } catch (e) {\n              console.log(e)\n            }\n          }\n        }\n        break\n    }\n  }\n}\nexport default volcengine\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}