{"ast":null,"code":"import '../../../../lib/styles/components/Dialog.scss';\nimport analytics from '../../../utils/analytics';\nexport default {\n  name: 'Dialog',\n  props: {\n    // close: {\n    //   type: Function,\n    //   default: () => {}\n    // },\n    // 是否显示\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    // 标题\n    title: {\n      type: String,\n      default: ''\n    },\n    // 宽度\n    width: {\n      type: String,\n      default: '50%'\n    },\n    // 是否为全屏 Dialog\n    fullscreen: {\n      type: Boolean,\n      default: true\n    },\n    // 弹窗 margin-top 值\n    top: {\n      type: String,\n      default: '15vh'\n    },\n    // 是否需要遮罩层\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    // 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Dialog 的父元素上\n    modalAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    // Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    // 是否在 Dialog 出现时将 body 滚动锁定\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    // 自定义类名\n    className: {\n      type: String,\n      default: ''\n    },\n    // 是否可以通过点击 modal 关闭 Dialog\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    // 是否可以通过按下 ESC 关闭 Dialog\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示关闭按钮\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    // 关闭前的回调，会暂停 Dialog 的关闭\n    // beforeClose: {\n    //   type: Function,\n    //   default: () => {}\n    // },\n    // 是否对头部和底部采用居中布局\n    center: {\n      type: Boolean,\n      default: false\n    },\n    // 关闭时销毁 Dialog 中的元素\n    destroyOnClose: {\n      type: Boolean,\n      default: false\n    },\n    // 不明生物\n    // fixedHeader: {\n    //   type: Boolean,\n    //   default: true\n    // },\n    drag: {\n      type: String,\n      default: 'all' // 'all'、'move'、'zoom'\n    },\n\n    height: {\n      type: [String, Number],\n      default: ''\n    },\n    autoZoom: {\n      type: Boolean,\n      default: false\n    },\n    // 高度为插槽元素高度\n    enabledSlotHeight: {\n      type: Boolean,\n      default: true\n    },\n    // 初始状态是否全屏，在fullscreen为true时有效\n    fullOpend: {\n      type: Boolean,\n      default: false\n    },\n    // 全屏按钮显示/隐藏，在fullscreen为true时有效\n    fullControl: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      timeout: null,\n      isOpened: true,\n      fullscreenEffect: false,\n      flagZoom: false,\n      fullscreenTop: 0,\n      dialogShowTime: 0,\n      slotHeight: 0,\n      fullPath: '',\n      // 记录当前页面路径\n      preFullscreenEffect: false // 离开前的状态\n    };\n  },\n\n  computed: {\n    dialogClass_() {\n      const dialogDetailsState = this.getEditState(); // 编辑状态\n      // const sidebarList = document.getElementsByClassName('sidebar-container')\n      // const sidebarWidth = 180\n      // if (sidebarList && sidebarList.length > 0) {\n      //   sidebarWidth = sidebarList[0].clientWidth\n      // }\n      return {\n        'mark-class': this.fullscreen,\n        // 'full-screen-opened': sidebarWidth > 180 && !this.fullscreenEffect, // 打开菜单栏时候的样式\n        // 'full-screen-closed': sidebarWidth <= 180 && !this.fullscreenEffect, // 收起菜单栏时候的样式\n        'full-screen-opened': this.fullscreenEffect,\n        // 打开菜单栏时候的样式\n        'full-screen-closed': !this.fullscreenEffect,\n        // 收起菜单栏时候的样式\n        'details-state-disable': !dialogDetailsState // details-state-disable 为不可编辑样式\n      };\n    },\n\n    initHeightComputed() {\n      console.log('this.height', this.height);\n      if (this.fullscreen || !this.height || this.height === 'auto') {\n        return 'auto';\n      }\n      if (Number.isFinite(Number(this.height))) return `${this.height}px`;\n      return this.height;\n    },\n    // initHeightComputed(e) {\n    //   // 如果传入height 就使用height ，并且移除了props.height 的500 默认值\n    //   // 若没有传入height 则使用计算的slotheight\n    //   let height = this.height\n    //   if (this.fullscreen || this.height === \"auto\") {\n    //     return \"auto\"\n    //   }\n    //   if (\n    //     this.slotHeight &&\n    //     Number.isFinite(Number(this.slotHeight)) &&\n    //     this.enabledSlotHeight\n    //   ) {\n    //     if (this.slotHeight > height || !height) {\n    //       return `${this.slotHeight}px`\n    //     }\n    //   }\n    //   if (height && Number.isFinite(Number(height))) {\n    //     return `${height}px`\n    //   }\n    //   console.log(\"dialog-height\", height)\n    //   return height\n    // },\n    customClassComputed() {\n      const className = `dialog-wrap ${this.fullscreen ? '' : 'suspended-dialog'} ${this.autoZoomComputed ? 'zoom' : ''} ${this?.$slots?.footer ? '' : 'no-footer'} ${this.className}`;\n      return className;\n    },\n    modalAppendToBodyComputed() {\n      if (this.fullscreen) return false;\n      return this.modalAppendToBody;\n    },\n    modalComputed() {\n      if (this.fullscreen) return false;\n      return this.modal;\n    },\n    dragComputed() {\n      if (this.fullscreen) return 'none';\n      return this.drag;\n    },\n    autoZoomComputed() {\n      if (this.height && this.height !== 'auto' || this.slotHeight) {\n        return true;\n      }\n      return this.autoZoom;\n    }\n  },\n  watch: {\n    visible(value) {\n      const that = this;\n      that.setDialogTime(value);\n      if (value) {\n        try {\n          const analyticsInstance = analytics.getAnalyticsInstance(that);\n          analyticsInstance.reportEvent('dialog_show', {\n            dialog_name: that.title\n          });\n        } catch (e) {\n          console.log(e);\n        }\n        if (this.enabledSlotHeight) {\n          // 获取插槽元素高度\n          this.getContentSlotHeight();\n        }\n      }\n    },\n    $route(to, from) {\n      if (!this.fullscreen) return;\n      // 回到当前页\n      // if (\n      //   to.fullPath === this.fullPath &&\n      //   this.fullOpend &&\n      //   this.preFullscreenEffect\n      // ) {\n      //   this.setDialogPosition('effect')\n      // }\n\n      // // 从当前页离开的记录最后状态\n      // if (from.fullPath === this.fullPath) {\n      //   this.preFullscreenEffect = this.fullscreenEffect\n      //   // 如果时全屏状态则还原\n      //   if (this.fullscreenEffect) {\n      //     this.setDialogPosition()\n      //   }\n      // }\n    }\n  },\n\n  created() {\n    // 记录当前页面地址\n    this.fullPath = this.$route.fullPath;\n    // this.resetTableHeight()\n  },\n\n  mounted() {\n    if (this.fullscreen && this.fullOpend) {\n      this.setDialogPosition('effect');\n    } else {\n      // 为init状态的时候不移除 full-screen-opened 属性，防止内部嵌套dialog导致full-screen-opened属性被移除\n      this.setDialogPosition('init');\n    }\n    // 监听菜单展开 / 收起事件\n    // window.addEventListener(\n    //   'menuResize',\n    //   this.debounce((ev) => {\n    //     const fullDialogList = Array.from(\n    //       document.getElementsByClassName('mark-class')\n    //     )\n    //     this.isOpened = ev.detail.isOpened\n    //     fullDialogList.length > 0 &&\n    //       fullDialogList.forEach((dom) => {\n    //         const navbarEl = document.querySelectorAll(\n    //           '.navbar-banner'\n    //         )[0]\n    //         const isFull = ['full-screen-opened', 'full-screen-closed'].some(\n    //           (v) => navbarEl.hasAttribute(v)\n    //         )\n    //         if (isFull) return\n    //         if (this.isOpened) {\n    //           dom.classList.add('full-screen-opened')\n    //           dom.classList.remove('full-screen-closed')\n    //         } else {\n    //           dom.classList.remove('full-screen-opened')\n    //           dom.classList.add('full-screen-closed')\n    //         }\n    //       })\n    //   }, 10),\n    //   false\n    // )\n    // 监听弹框缩放事件\n    window.addEventListener('dialogResize', this.dResizeHandlder);\n    window.addEventListener('dialogOnmouseup', this.dOnmouseupHandlder);\n  },\n  methods: {\n    // Dialog 打开的回调\n    open() {\n      this.$emit('open');\n    },\n    // Dialog 打开动画结束时的回调\n    opened() {\n      this.$emit('opened');\n    },\n    // Dialog 关闭的回调\n    close() {\n      this.$emit('close');\n    },\n    // Dialog 关闭动画结束时的回调\n    closed() {\n      this.$emit('closed');\n    },\n    getContentSlotHeight() {\n      this.$nextTick(() => {\n        if (this.$slots.content && this.$slots.content.length >= 1) {\n          // 获取slot content的元素高度\n          let num = 0;\n          this.$slots.content.forEach(item => {\n            num += item.elm.clientHeight;\n          });\n          this.slotHeight = num;\n        }\n        // 若获取不到高度，例如content slot 为 el-form 由于form-item组件原因高度塌陷\n        // 则使用slot 外层div的高度\n        if (!this.slotHeight) {\n          const h = this.$refs.reference.clientHeight || this.$refs.reference.scrollHeight;\n          this.slotHeight = h || 0;\n        }\n      });\n    },\n    resetTableHeight() {\n      this.fullscreenTop = this.$refs['header-btn'] ? this.$refs['header-btn'].offsetHeight + 10 + 'px' : 0;\n      console.log('fullscreenTop', this.$refs['header-btn'].offsetHeight, this.fullscreenTop);\n    },\n    setDialogPosition(type = '') {\n      const navbarEl = document.querySelectorAll('.navbar-banner')[0];\n      const navbarLogo = document.querySelectorAll('.sidebar-logo')[0];\n      if (type === 'effect') {\n        this.fullscreenEffect = true;\n        // 用于判断当前是否处于全屏\n        navbarEl.setAttribute('full-screen-opened', true);\n        navbarLogo.setAttribute('full-screen-opened', true);\n      } else {\n        this.fullscreenEffect = false;\n        if (type !== 'init') {\n          navbarEl.removeAttribute('full-screen-opened');\n          navbarLogo.removeAttribute('full-screen-opened');\n        }\n      }\n    },\n    beforeClose() {\n      this.$emit('update:visible', false);\n      this.$emit('close');\n    },\n    // 防抖debounce代码：\n    debounce(fn, delay) {\n      this.timeout = null; // 创建一个标记用来存放定时器的返回值\n      return function (e) {\n        // 每当用户输入的时候把前一个 setTimeout clear 掉\n        this.timeout && clearTimeout(this.timeout);\n        // 然后又创建一个新的 setTimeout, 这样就能保证interval 间隔内如果时间持续触发，就不会执行 fn 函数\n        this.timeout = setTimeout(() => {\n          fn.apply(this, arguments);\n        }, delay);\n      };\n    },\n    dResizeHandlder(myEvent) {\n      this.flagZoom = true;\n      console.log('dResizeHandlder-----', myEvent);\n      window.removeEventListener('dialogResize', this.dResizeHandlder);\n    },\n    dOnmouseupHandlder(myEvent) {\n      console.log('dOnmouseupHandlder----', myEvent);\n    },\n    // 获得弹窗打开时间\n    setDialogTime(value) {\n      if (!value) {\n        const that = this;\n        const duration = new Date().getTime() - this.dialogShowTime;\n        try {\n          const analyticsInstance = analytics.getAnalyticsInstance(that);\n          analyticsInstance.reportEvent('dialog_operate_time_cost', {\n            dialog_name: that.title,\n            operate_time_cost: duration\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      } else {\n        this.dialogShowTime = new Date().getTime();\n      }\n    },\n    // 获取编辑状态\n    getEditState() {\n      // 获取路由传递参数edit和 sessionStorage 中设置的编辑状态 来初始化设置编辑状态\n      // sessionStorage中值优先\n      const {\n        edit = 'true'\n      } = this.$route.query;\n      let visitedViews = [];\n      try {\n        visitedViews = JSON.parse(sessionStorage.getItem('visitedViews')) || [];\n      } catch (error) {\n        console.log(error);\n      }\n      const visite = visitedViews.find(v => v.fullPath.indexOf(this.$route.fullPath) !== -1) || {};\n      const dialogEdit = visite.dialogEdit || edit;\n      return eval(dialogEdit);\n    }\n  }\n};","map":{"version":3,"names":["analytics","name","props","visible","type","Boolean","default","title","String","width","fullscreen","top","modal","modalAppendToBody","appendToBody","lockScroll","className","closeOnClickModal","closeOnPressEscape","showClose","center","destroyOnClose","drag","height","Number","autoZoom","enabledSlotHeight","fullOpend","fullControl","data","timeout","isOpened","fullscreenEffect","flagZoom","fullscreenTop","dialogShowTime","slotHeight","fullPath","preFullscreenEffect","computed","dialogClass_","dialogDetailsState","getEditState","initHeightComputed","console","log","isFinite","customClassComputed","autoZoomComputed","$slots","footer","modalAppendToBodyComputed","modalComputed","dragComputed","watch","value","that","setDialogTime","analyticsInstance","getAnalyticsInstance","reportEvent","dialog_name","e","getContentSlotHeight","$route","to","from","created","mounted","setDialogPosition","window","addEventListener","dResizeHandlder","dOnmouseupHandlder","methods","open","$emit","opened","close","closed","$nextTick","content","length","num","forEach","item","elm","clientHeight","h","$refs","reference","scrollHeight","resetTableHeight","offsetHeight","navbarEl","document","querySelectorAll","navbarLogo","setAttribute","removeAttribute","beforeClose","debounce","fn","delay","clearTimeout","setTimeout","apply","arguments","myEvent","removeEventListener","duration","Date","getTime","operate_time_cost","edit","query","visitedViews","JSON","parse","sessionStorage","getItem","error","visite","find","v","indexOf","dialogEdit","eval"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Dialog/src/index.vue"],"sourcesContent":["<template>\r\n  <div ref=\"dialog\" class=\"dialog-container\" :class=\"dialogClass_\">\r\n    <el-dialog\r\n      v-drag=\"dragComputed\"\r\n      :destroy-on-close=\"destroyOnClose\"\r\n      :custom-class=\"customClassComputed\"\r\n      :fullscreen=\"fullscreen\"\r\n      :title=\"title\"\r\n      :show-close=\"showClose\"\r\n      :visible.sync=\"visible\"\r\n      :before-close=\"beforeClose\"\r\n      :width=\"width\"\r\n      :top=\"top\"\r\n      :modal=\"modalComputed\"\r\n      :modal-append-to-body=\"modalAppendToBodyComputed\"\r\n      :append-to-body=\"fullscreen ? false : appendToBody\"\r\n      :lock-scroll=\"lockScroll\"\r\n      :center=\"center\"\r\n      :close-on-click-modal=\"closeOnClickModal\"\r\n      @opened=\"opened\"\r\n      @open=\"open\"\r\n      @close=\"close\"\r\n      @closed=\"closed\"\r\n    >\r\n      <template slot=\"title\">\r\n        <slot name=\"title\" />\r\n      </template>\r\n      <div\r\n        v-if=\"$slots.leftBtn || $slots.rightBtn\"\r\n        ref=\"header-btn\"\r\n        v-resize=\"resetTableHeight\"\r\n        class=\"header-btn flexCB\"\r\n      >\r\n        <template v-if=\"$slots.leftBtn\">\r\n          <div class=\"left-btn\">\r\n            <p><slot name=\"leftBtn\" /></p>\r\n            <cnd-icon\r\n              v-if=\"fullscreen && fullControl\"\r\n              class=\"ml-8 pointer\"\r\n              :name=\"\r\n                fullscreenEffect ? 'cnd-fullScreen-close' : 'cnd-fullScreen'\r\n              \"\r\n              @click=\"setDialogPosition(fullscreenEffect ? 'close' : 'effect')\"\r\n            />\r\n          </div>\r\n        </template>\r\n        <template v-if=\"$slots.rightBtn\">\r\n          <div class=\"right-btn\">\r\n            <slot name=\"rightBtn\" />\r\n          </div>\r\n        </template>\r\n      </div>\r\n      <div\r\n        :ref=\"!fullscreen ? 'reference' : ''\"\r\n        :class=\"{\r\n          'dialog-body-position': fullscreen, // 详情页\r\n          'dialog-ag-height': !fullscreen && !height, // 悬浮无高度\r\n          flexV: !fullscreen\r\n        }\"\r\n        :style=\"{\r\n          'overflow-y': 'auto',\r\n          top: fullscreenTop,\r\n          height: fullscreen\r\n            ? fullscreenTop\r\n              ? `calc(100% - ${fullscreenTop})`\r\n              : `100%`\r\n            : initHeightComputed\r\n        }\"\r\n      >\r\n        <slot name=\"content\" />\r\n      </div>\r\n      <template slot=\"footer\">\r\n        <slot name=\"footer\" />\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '../../../../lib/styles/components/Dialog.scss'\r\nimport analytics from '../../../utils/analytics'\r\nexport default {\r\n  name: 'Dialog',\r\n  props: {\r\n    // close: {\r\n    //   type: Function,\r\n    //   default: () => {}\r\n    // },\r\n    // 是否显示\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 标题\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    // 宽度\r\n    width: {\r\n      type: String,\r\n      default: '50%'\r\n    },\r\n    // 是否为全屏 Dialog\r\n    fullscreen: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 弹窗 margin-top 值\r\n    top: {\r\n      type: String,\r\n      default: '15vh'\r\n    },\r\n    // 是否需要遮罩层\r\n    modal: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Dialog 的父元素上\r\n    modalAppendToBody: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true\r\n    appendToBody: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 是否在 Dialog 出现时将 body 滚动锁定\r\n    lockScroll: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 自定义类名\r\n    className: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    // 是否可以通过点击 modal 关闭 Dialog\r\n    closeOnClickModal: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 是否可以通过按下 ESC 关闭 Dialog\r\n    closeOnPressEscape: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 是否显示关闭按钮\r\n    showClose: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 关闭前的回调，会暂停 Dialog 的关闭\r\n    // beforeClose: {\r\n    //   type: Function,\r\n    //   default: () => {}\r\n    // },\r\n    // 是否对头部和底部采用居中布局\r\n    center: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 关闭时销毁 Dialog 中的元素\r\n    destroyOnClose: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 不明生物\r\n    // fixedHeader: {\r\n    //   type: Boolean,\r\n    //   default: true\r\n    // },\r\n    drag: {\r\n      type: String,\r\n      default: 'all' // 'all'、'move'、'zoom'\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: ''\r\n    },\r\n    autoZoom: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 高度为插槽元素高度\r\n    enabledSlotHeight: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    // 初始状态是否全屏，在fullscreen为true时有效\r\n    fullOpend: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 全屏按钮显示/隐藏，在fullscreen为true时有效\r\n    fullControl: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      timeout: null,\r\n      isOpened: true,\r\n      fullscreenEffect: false,\r\n      flagZoom: false,\r\n      fullscreenTop: 0,\r\n      dialogShowTime: 0,\r\n      slotHeight: 0,\r\n      fullPath: '', // 记录当前页面路径\r\n      preFullscreenEffect: false // 离开前的状态\r\n    }\r\n  },\r\n  computed: {\r\n    dialogClass_() {\r\n      const dialogDetailsState = this.getEditState() // 编辑状态\r\n      // const sidebarList = document.getElementsByClassName('sidebar-container')\r\n      // const sidebarWidth = 180\r\n      // if (sidebarList && sidebarList.length > 0) {\r\n      //   sidebarWidth = sidebarList[0].clientWidth\r\n      // }\r\n      return {\r\n        'mark-class': this.fullscreen,\r\n        // 'full-screen-opened': sidebarWidth > 180 && !this.fullscreenEffect, // 打开菜单栏时候的样式\r\n        // 'full-screen-closed': sidebarWidth <= 180 && !this.fullscreenEffect, // 收起菜单栏时候的样式\r\n        'full-screen-opened': this.fullscreenEffect, // 打开菜单栏时候的样式\r\n        'full-screen-closed': !this.fullscreenEffect, // 收起菜单栏时候的样式\r\n        'details-state-disable': !dialogDetailsState // details-state-disable 为不可编辑样式\r\n      }\r\n    },\r\n    initHeightComputed() {\r\n      console.log('this.height', this.height)\r\n      if (this.fullscreen || !this.height || this.height === 'auto') {\r\n        return 'auto'\r\n      }\r\n      if (Number.isFinite(Number(this.height))) return `${this.height}px`\r\n      return this.height\r\n    },\r\n    // initHeightComputed(e) {\r\n    //   // 如果传入height 就使用height ，并且移除了props.height 的500 默认值\r\n    //   // 若没有传入height 则使用计算的slotheight\r\n    //   let height = this.height\r\n    //   if (this.fullscreen || this.height === \"auto\") {\r\n    //     return \"auto\"\r\n    //   }\r\n    //   if (\r\n    //     this.slotHeight &&\r\n    //     Number.isFinite(Number(this.slotHeight)) &&\r\n    //     this.enabledSlotHeight\r\n    //   ) {\r\n    //     if (this.slotHeight > height || !height) {\r\n    //       return `${this.slotHeight}px`\r\n    //     }\r\n    //   }\r\n    //   if (height && Number.isFinite(Number(height))) {\r\n    //     return `${height}px`\r\n    //   }\r\n    //   console.log(\"dialog-height\", height)\r\n    //   return height\r\n    // },\r\n    customClassComputed() {\r\n      const className = `dialog-wrap ${\r\n        this.fullscreen ? '' : 'suspended-dialog'\r\n      } ${this.autoZoomComputed ? 'zoom' : ''} ${\r\n        this?.$slots?.footer ? '' : 'no-footer'\r\n      } ${this.className}`\r\n      return className\r\n    },\r\n    modalAppendToBodyComputed() {\r\n      if (this.fullscreen) return false\r\n      return this.modalAppendToBody\r\n    },\r\n    modalComputed() {\r\n      if (this.fullscreen) return false\r\n      return this.modal\r\n    },\r\n    dragComputed() {\r\n      if (this.fullscreen) return 'none'\r\n      return this.drag\r\n    },\r\n    autoZoomComputed() {\r\n      if ((this.height && this.height !== 'auto') || this.slotHeight) {\r\n        return true\r\n      }\r\n      return this.autoZoom\r\n    }\r\n  },\r\n  watch: {\r\n    visible(value) {\r\n      const that = this\r\n      that.setDialogTime(value)\r\n      if (value) {\r\n        try {\r\n          const analyticsInstance = analytics.getAnalyticsInstance(that)\r\n          analyticsInstance.reportEvent('dialog_show', {\r\n            dialog_name: that.title\r\n          })\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n        if (this.enabledSlotHeight) {\r\n          // 获取插槽元素高度\r\n          this.getContentSlotHeight()\r\n        }\r\n      }\r\n    },\r\n    $route(to, from) {\r\n      if (!this.fullscreen) return\r\n      // 回到当前页\r\n      // if (\r\n      //   to.fullPath === this.fullPath &&\r\n      //   this.fullOpend &&\r\n      //   this.preFullscreenEffect\r\n      // ) {\r\n      //   this.setDialogPosition('effect')\r\n      // }\r\n\r\n      // // 从当前页离开的记录最后状态\r\n      // if (from.fullPath === this.fullPath) {\r\n      //   this.preFullscreenEffect = this.fullscreenEffect\r\n      //   // 如果时全屏状态则还原\r\n      //   if (this.fullscreenEffect) {\r\n      //     this.setDialogPosition()\r\n      //   }\r\n      // }\r\n    }\r\n  },\r\n  created() {\r\n    // 记录当前页面地址\r\n    this.fullPath = this.$route.fullPath\r\n    // this.resetTableHeight()\r\n  },\r\n  mounted() {\r\n    if (this.fullscreen && this.fullOpend) {\r\n      this.setDialogPosition('effect')\r\n    } else {\r\n      // 为init状态的时候不移除 full-screen-opened 属性，防止内部嵌套dialog导致full-screen-opened属性被移除\r\n      this.setDialogPosition('init')\r\n    }\r\n    // 监听菜单展开 / 收起事件\r\n    // window.addEventListener(\r\n    //   'menuResize',\r\n    //   this.debounce((ev) => {\r\n    //     const fullDialogList = Array.from(\r\n    //       document.getElementsByClassName('mark-class')\r\n    //     )\r\n    //     this.isOpened = ev.detail.isOpened\r\n    //     fullDialogList.length > 0 &&\r\n    //       fullDialogList.forEach((dom) => {\r\n    //         const navbarEl = document.querySelectorAll(\r\n    //           '.navbar-banner'\r\n    //         )[0]\r\n    //         const isFull = ['full-screen-opened', 'full-screen-closed'].some(\r\n    //           (v) => navbarEl.hasAttribute(v)\r\n    //         )\r\n    //         if (isFull) return\r\n    //         if (this.isOpened) {\r\n    //           dom.classList.add('full-screen-opened')\r\n    //           dom.classList.remove('full-screen-closed')\r\n    //         } else {\r\n    //           dom.classList.remove('full-screen-opened')\r\n    //           dom.classList.add('full-screen-closed')\r\n    //         }\r\n    //       })\r\n    //   }, 10),\r\n    //   false\r\n    // )\r\n    // 监听弹框缩放事件\r\n    window.addEventListener('dialogResize', this.dResizeHandlder)\r\n    window.addEventListener('dialogOnmouseup', this.dOnmouseupHandlder)\r\n  },\r\n  methods: {\r\n    // Dialog 打开的回调\r\n    open() {\r\n      this.$emit('open')\r\n    },\r\n    // Dialog 打开动画结束时的回调\r\n    opened() {\r\n      this.$emit('opened')\r\n    },\r\n    // Dialog 关闭的回调\r\n    close() {\r\n      this.$emit('close')\r\n    },\r\n    // Dialog 关闭动画结束时的回调\r\n    closed() {\r\n      this.$emit('closed')\r\n    },\r\n    getContentSlotHeight() {\r\n      this.$nextTick(() => {\r\n        if (this.$slots.content && this.$slots.content.length >= 1) {\r\n          // 获取slot content的元素高度\r\n          let num = 0\r\n          this.$slots.content.forEach((item) => {\r\n            num += item.elm.clientHeight\r\n          })\r\n          this.slotHeight = num\r\n        }\r\n        // 若获取不到高度，例如content slot 为 el-form 由于form-item组件原因高度塌陷\r\n        // 则使用slot 外层div的高度\r\n        if (!this.slotHeight) {\r\n          const h =\r\n            this.$refs.reference.clientHeight ||\r\n            this.$refs.reference.scrollHeight\r\n          this.slotHeight = h || 0\r\n        }\r\n      })\r\n    },\r\n    resetTableHeight() {\r\n      this.fullscreenTop = this.$refs['header-btn']\r\n        ? this.$refs['header-btn'].offsetHeight + 10 + 'px'\r\n        : 0\r\n      console.log(\r\n        'fullscreenTop',\r\n        this.$refs['header-btn'].offsetHeight,\r\n        this.fullscreenTop\r\n      )\r\n    },\r\n    setDialogPosition(type = '') {\r\n      const navbarEl = document.querySelectorAll('.navbar-banner')[0]\r\n      const navbarLogo = document.querySelectorAll('.sidebar-logo')[0]\r\n      if (type === 'effect') {\r\n        this.fullscreenEffect = true\r\n        // 用于判断当前是否处于全屏\r\n        navbarEl.setAttribute('full-screen-opened', true)\r\n        navbarLogo.setAttribute('full-screen-opened', true)\r\n      } else {\r\n        this.fullscreenEffect = false\r\n        if (type !== 'init') {\r\n          navbarEl.removeAttribute('full-screen-opened')\r\n          navbarLogo.removeAttribute('full-screen-opened')\r\n        }\r\n      }\r\n    },\r\n    beforeClose() {\r\n      this.$emit('update:visible', false)\r\n      this.$emit('close')\r\n    },\r\n    // 防抖debounce代码：\r\n    debounce(fn, delay) {\r\n      this.timeout = null // 创建一个标记用来存放定时器的返回值\r\n      return function(e) {\r\n        // 每当用户输入的时候把前一个 setTimeout clear 掉\r\n        this.timeout && clearTimeout(this.timeout)\r\n        // 然后又创建一个新的 setTimeout, 这样就能保证interval 间隔内如果时间持续触发，就不会执行 fn 函数\r\n        this.timeout = setTimeout(() => {\r\n          fn.apply(this, arguments)\r\n        }, delay)\r\n      }\r\n    },\r\n    dResizeHandlder(myEvent) {\r\n      this.flagZoom = true\r\n      console.log('dResizeHandlder-----', myEvent)\r\n      window.removeEventListener('dialogResize', this.dResizeHandlder)\r\n    },\r\n    dOnmouseupHandlder(myEvent) {\r\n      console.log('dOnmouseupHandlder----', myEvent)\r\n    },\r\n    // 获得弹窗打开时间\r\n    setDialogTime(value) {\r\n      if (!value) {\r\n        const that = this\r\n        const duration = new Date().getTime() - this.dialogShowTime\r\n        try {\r\n          const analyticsInstance = analytics.getAnalyticsInstance(that)\r\n          analyticsInstance.reportEvent('dialog_operate_time_cost', {\r\n            dialog_name: that.title,\r\n            operate_time_cost: duration\r\n          })\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      } else {\r\n        this.dialogShowTime = new Date().getTime()\r\n      }\r\n    },\r\n    // 获取编辑状态\r\n    getEditState() {\r\n      // 获取路由传递参数edit和 sessionStorage 中设置的编辑状态 来初始化设置编辑状态\r\n      // sessionStorage中值优先\r\n      const { edit = 'true' } = this.$route.query\r\n      let visitedViews = []\r\n      try {\r\n        visitedViews = JSON.parse(sessionStorage.getItem('visitedViews')) || []\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n      const visite =\r\n        visitedViews.find(\r\n          (v) => v.fullPath.indexOf(this.$route.fullPath) !== -1\r\n        ) || {}\r\n      const dialogEdit = visite.dialogEdit || edit\r\n      return eval(dialogEdit)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"AA+EA;AACA,OAAAA,SAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;IACA;IACA;IACA;IACA;IACAC,OAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAC,KAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAG,KAAA;MACAL,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAI,UAAA;MACAN,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAK,GAAA;MACAP,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAM,KAAA;MACAR,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAO,iBAAA;MACAT,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAQ,YAAA;MACAV,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAS,UAAA;MACAX,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAU,SAAA;MACAZ,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAW,iBAAA;MACAb,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAY,kBAAA;MACAd,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAa,SAAA;MACAf,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAc,MAAA;MACAhB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAe,cAAA;MACAjB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACAgB,IAAA;MACAlB,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;;IACAiB,MAAA;MACAnB,IAAA,GAAAI,MAAA,EAAAgB,MAAA;MACAlB,OAAA;IACA;IACAmB,QAAA;MACArB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAoB,iBAAA;MACAtB,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACA;IACAqB,SAAA;MACAvB,IAAA,EAAAC,OAAA;MA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}