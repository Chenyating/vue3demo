{"ast":null,"code":"export default {\n  props: {\n    is: {\n      type: String,\n      default: 'horizon-select'\n    },\n    value: {\n      type: [String, Array, Boolean, Number],\n      default: ''\n    },\n    // 组件唯一标识\n    mark: {\n      type: String,\n      default: ''\n    },\n    // 是否自动初始化，即会触发请求默认值数据的方法\n    // 在接口支持绑定值过滤或获取全部数据不卡顿的情况下可开启\n    autoInit: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自动获取焦点，获取焦点的执行操作在初始化之后\n    autoFocus: {\n      type: Boolean,\n      default: false\n    },\n    option: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      attrs: {},\n      isInit: false,\n      // 用于判断初始化是否完成\n      // value值并不会随着getVal设置后立即改变\n      // 所以设置一个内部insideValue\n      insideValue: this.value,\n      defaultOption: {\n        seledLabel: 'sName',\n        label: 'sPath',\n        value: ''\n      }\n    };\n  },\n  computed: {\n    value_: {\n      get() {\n        return this.insideValue;\n      },\n      set(v) {\n        // 设置ag表格值\n        this.$emit('getVal', v);\n        this.insideValue = v;\n      }\n    },\n    optionConfig() {\n      // seledLabel字段改名为了selectedLabel\n      // 兼容旧版AgSearchSelect之前设置的默认值\n      if (this.is === 'horizon-select') {\n        return {\n          label: 'sPath',\n          value: '',\n          selectedLabel: this.option.seledLabel || 'sName',\n          ...this.option\n        };\n      }\n      // 后期其他类型的select全部按照它内部的默认key的配置不做另外处理\n      return this.option;\n    }\n  },\n  created() {\n    this.mark && this.$emit('getComponent', this);\n    this.insideValue = this.value;\n    // 过滤出props中不存在的属性\n    const hasKeys = Object.keys(this.$props);\n    const attrKeys = Object.keys(this.$attrs).filter(v => hasKeys.indexOf(v) === -1);\n    const attrs = {};\n    attrKeys.forEach(v => {\n      attrs[v] = this.$attrs[v];\n    });\n    this.attrs = attrs;\n  },\n  mounted() {\n    if (this.autoFocus) {\n      if (!this.insideValue || !this.autoInit) {\n        this.focusSelect();\n        this.isInit = true;\n      }\n    }\n  },\n  beforeDestroy() {\n    const pseudoEvent = {\n      mark: 'pseudoEvent',\n      target: {\n        value: this.value\n      }\n    };\n    this.blur(pseudoEvent);\n  },\n  methods: {\n    change(v, type) {\n      // type为false的时候表示是由于绑定值改变，初始化数据导致的change\n      if (!type && !this.isInit && this.autoFocus) {\n        this.focusSelect();\n      }\n      this.isInit = true;\n      // 返回整个对象，部分场景需要其他值\n      if (type) {\n        this.$emit('getOption', v);\n        this.$emit('change', v, type);\n      }\n    },\n    blur(e) {\n      this.$emit('blur', e);\n    },\n    focus(e) {\n      this.$emit('focus', e);\n    },\n    focusSelect() {\n      this.$nextTick(() => {\n        this.$refs.select.focus();\n      });\n    }\n  }\n};","map":{"version":3,"names":["props","is","type","String","default","value","Array","Boolean","Number","mark","autoInit","autoFocus","option","Object","data","attrs","isInit","insideValue","defaultOption","seledLabel","label","computed","value_","get","set","v","$emit","optionConfig","selectedLabel","created","hasKeys","keys","$props","attrKeys","$attrs","filter","indexOf","forEach","mounted","focusSelect","beforeDestroy","pseudoEvent","target","blur","methods","change","e","focus","$nextTick","$refs","select"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/ForGridComponents/AgSelect.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"is\"\n    ref=\"select\"\n    v-bind=\"attrs\"\n    v-model=\"value_\"\n    :auto-init=\"autoInit\"\n    :option=\"optionConfig\"\n    @blur=\"blur\"\n    @focus=\"focus\"\n    @change=\"change\"\n  ></component>\n</template>\n\n<script>\nexport default {\n  props: {\n    is: {\n      type: String,\n      default: 'horizon-select'\n    },\n    value: {\n      type: [String, Array, Boolean, Number],\n      default: ''\n    },\n    // 组件唯一标识\n    mark: {\n      type: String,\n      default: ''\n    },\n    // 是否自动初始化，即会触发请求默认值数据的方法\n    // 在接口支持绑定值过滤或获取全部数据不卡顿的情况下可开启\n    autoInit: {\n      type: Boolean,\n      default: false\n    },\n    // 是否自动获取焦点，获取焦点的执行操作在初始化之后\n    autoFocus: {\n      type: Boolean,\n      default: false\n    },\n    option: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      attrs: {},\n      isInit: false, // 用于判断初始化是否完成\n      // value值并不会随着getVal设置后立即改变\n      // 所以设置一个内部insideValue\n      insideValue: this.value,\n      defaultOption: {\n        seledLabel: 'sName',\n        label: 'sPath',\n        value: ''\n      }\n    }\n  },\n  computed: {\n    value_: {\n      get() {\n        return this.insideValue\n      },\n      set(v) {\n        // 设置ag表格值\n        this.$emit('getVal', v)\n        this.insideValue = v\n      }\n    },\n    optionConfig() {\n      // seledLabel字段改名为了selectedLabel\n      // 兼容旧版AgSearchSelect之前设置的默认值\n      if (this.is === 'horizon-select') {\n        return {\n          label: 'sPath',\n          value: '',\n          selectedLabel: this.option.seledLabel || 'sName',\n          ...this.option\n        }\n      }\n      // 后期其他类型的select全部按照它内部的默认key的配置不做另外处理\n      return this.option\n    }\n  },\n  created() {\n    this.mark && this.$emit('getComponent', this)\n    this.insideValue = this.value\n    // 过滤出props中不存在的属性\n    const hasKeys = Object.keys(this.$props)\n    const attrKeys = Object.keys(this.$attrs).filter(v => hasKeys.indexOf(v) === -1)\n    const attrs = {}\n    attrKeys.forEach(v => {\n      attrs[v] = this.$attrs[v]\n    })\n    this.attrs = attrs\n  },\n  mounted() {\n    if (this.autoFocus) {\n      if (!this.insideValue || !this.autoInit) {\n        this.focusSelect()\n        this.isInit = true\n      }\n    }\n  },\n  beforeDestroy() {\n    const pseudoEvent = {\n      mark: 'pseudoEvent',\n      target: {\n        value: this.value\n      }\n    }\n    this.blur(pseudoEvent)\n  },\n  methods: {\n    change(v, type) {\n      // type为false的时候表示是由于绑定值改变，初始化数据导致的change\n      if (!type && !this.isInit && this.autoFocus) {\n        this.focusSelect()\n      }\n      this.isInit = true\n      // 返回整个对象，部分场景需要其他值\n      if (type) {\n        this.$emit('getOption', v)\n        this.$emit('change', v, type)\n      }\n    },\n    blur(e) {\n      this.$emit('blur', e)\n    },\n    focus(e) {\n      this.$emit('focus', e)\n    },\n    focusSelect() {\n      this.$nextTick(() => {\n        this.$refs.select.focus()\n      })\n    }\n  }\n}\n</script>\n"],"mappings":"AAeA;EACAA,KAAA;IACAC,EAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,KAAA;MACAH,IAAA,GAAAC,MAAA,EAAAG,KAAA,EAAAC,OAAA,EAAAC,MAAA;MACAJ,OAAA;IACA;IACA;IACAK,IAAA;MACAP,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACA;IACA;IACAM,QAAA;MACAR,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;IACA;IACAO,SAAA;MACAT,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;IACAQ,MAAA;MACAV,IAAA,EAAAW,MAAA;MACAT,OAAA,EAAAA,CAAA;QACA;MACA;IACA;EACA;EACAU,KAAA;IACA;MACAC,KAAA;MACAC,MAAA;MAAA;MACA;MACA;MACAC,WAAA,OAAAZ,KAAA;MACAa,aAAA;QACAC,UAAA;QACAC,KAAA;QACAf,KAAA;MACA;IACA;EACA;EACAgB,QAAA;IACAC,MAAA;MACAC,IAAA;QACA,YAAAN,WAAA;MACA;MACAO,IAAAC,CAAA;QACA;QACA,KAAAC,KAAA,WAAAD,CAAA;QACA,KAAAR,WAAA,GAAAQ,CAAA;MACA;IACA;IACAE,aAAA;MACA;MACA;MACA,SAAA1B,EAAA;QACA;UACAmB,KAAA;UACAf,KAAA;UACAuB,aAAA,OAAAhB,MAAA,CAAAO,UAAA;UACA,QAAAP;QACA;MACA;MACA;MACA,YAAAA,MAAA;IACA;EACA;EACAiB,QAAA;IACA,KAAApB,IAAA,SAAAiB,KAAA;IACA,KAAAT,WAAA,QAAAZ,KAAA;IACA;IACA,MAAAyB,OAAA,GAAAjB,MAAA,CAAAkB,IAAA,MAAAC,MAAA;IACA,MAAAC,QAAA,GAAApB,MAAA,CAAAkB,IAAA,MAAAG,MAAA,EAAAC,MAAA,CAAAV,CAAA,IAAAK,OAAA,CAAAM,OAAA,CAAAX,CAAA;IACA,MAAAV,KAAA;IACAkB,QAAA,CAAAI,OAAA,CAAAZ,CAAA;MACAV,KAAA,CAAAU,CAAA,SAAAS,MAAA,CAAAT,CAAA;IACA;IACA,KAAAV,KAAA,GAAAA,KAAA;EACA;EACAuB,QAAA;IACA,SAAA3B,SAAA;MACA,UAAAM,WAAA,UAAAP,QAAA;QACA,KAAA6B,WAAA;QACA,KAAAvB,MAAA;MACA;IACA;EACA;EACAwB,cAAA;IACA,MAAAC,WAAA;MACAhC,IAAA;MACAiC,MAAA;QACArC,KAAA,OAAAA;MACA;IACA;IACA,KAAAsC,IAAA,CAAAF,WAAA;EACA;EACAG,OAAA;IACAC,OAAApB,CAAA,EAAAvB,IAAA;MACA;MACA,KAAAA,IAAA,UAAAc,MAAA,SAAAL,SAAA;QACA,KAAA4B,WAAA;MACA;MACA,KAAAvB,MAAA;MACA;MACA,IAAAd,IAAA;QACA,KAAAwB,KAAA,cAAAD,CAAA;QACA,KAAAC,KAAA,WAAAD,CAAA,EAAAvB,IAAA;MACA;IACA;IACAyC,KAAAG,CAAA;MACA,KAAApB,KAAA,SAAAoB,CAAA;IACA;IACAC,MAAAD,CAAA;MACA,KAAApB,KAAA,UAAAoB,CAAA;IACA;IACAP,YAAA;MACA,KAAAS,SAAA;QACA,KAAAC,KAAA,CAAAC,MAAA,CAAAH,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}