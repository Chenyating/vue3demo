{"ast":null,"code":"import { defineStore, createPinia } from 'pinia';\n\n// 创建一个 Pinia store\nconst pinia = createPinia();\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {} // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7);\n    },\n    set(cacheKey, cacheInfo, time = 0) {\n      const cacheStore = useCacheStore();\n      if (cacheStore.caches[cacheKey]) {\n        const currentCache = cacheStore.caches[cacheKey];\n        // Check if cacheInfo is different from the previous version\n        if (JSON.stringify(currentCache.data) !== JSON.stringify(cacheInfo)) {\n          currentCache.version++;\n          currentCache.data = cacheInfo;\n        }\n      } else {\n        cacheStore.caches[cacheKey] = {\n          version: 0,\n          data: cacheInfo\n        };\n      }\n\n      // If time is greater than 0, schedule an auto-save\n      if (time > 0) {\n        const autoSave = () => {\n          useCache.set(cacheKey, cacheInfo, time);\n        };\n        if (cacheStore.caches[cacheKey].timer) {\n          clearTimeout(cacheStore.caches[cacheKey].timer);\n        }\n        cacheStore.caches[cacheKey].timer = setTimeout(autoSave, time);\n      }\n    },\n    autoSave(cacheKey, time = 0) {\n      if (time > 0) {\n        // Schedule an auto-save with a time delay\n        setTimeout(() => {\n          this.set(cacheKey, this.caches[cacheKey].data);\n          this.autoSave(cacheKey, time);\n        }, time);\n      }\n    },\n    cancelAutoSave(cacheKey) {\n      // Cancel auto-save for a cache\n      clearTimeout(this.caches[cacheKey].timer);\n      this.caches[cacheKey].timer = null;\n    },\n    clear(cacheKey) {\n      if (this.caches[cacheKey]) {\n        delete this.caches[cacheKey];\n      }\n    },\n    getAllCaches() {\n      return this.caches;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","createPinia","pinia","cubeCacheStore","state","cacheData","actions","getCacheKey","Math","random","toString","substring","set","cacheKey","cacheInfo","time","cacheStore","useCacheStore","caches","currentCache","JSON","stringify","data","version","autoSave","useCache","timer","clearTimeout","setTimeout","cancelAutoSave","clear","getAllCaches"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore, createPinia } from 'pinia';\n\n// 创建一个 Pinia store\nconst pinia = createPinia();\n\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: {}, // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7);\n    },\n    set(cacheKey, cacheInfo, time = 0) {\n      const cacheStore = useCacheStore();\n      if (cacheStore.caches[cacheKey]) {\n        const currentCache = cacheStore.caches[cacheKey];\n        // Check if cacheInfo is different from the previous version\n        if (JSON.stringify(currentCache.data) !== JSON.stringify(cacheInfo)) {\n          currentCache.version++;\n          currentCache.data = cacheInfo;\n        }\n      } else {\n        cacheStore.caches[cacheKey] = { version: 0, data: cacheInfo };\n      }\n  \n      // If time is greater than 0, schedule an auto-save\n      if (time > 0) {\n        const autoSave = () => {\n          useCache.set(cacheKey, cacheInfo, time);\n        };\n  \n        if (cacheStore.caches[cacheKey].timer) {\n          clearTimeout(cacheStore.caches[cacheKey].timer);\n        }\n  \n        cacheStore.caches[cacheKey].timer = setTimeout(autoSave, time);\n      }\n    },\n    autoSave(cacheKey, time = 0) {\n      if (time > 0) {\n        // Schedule an auto-save with a time delay\n        setTimeout(() => {\n          this.set(cacheKey, this.caches[cacheKey].data);\n          this.autoSave(cacheKey, time);\n        }, time);\n      }\n    },\n    cancelAutoSave(cacheKey) {\n      // Cancel auto-save for a cache\n      clearTimeout(this.caches[cacheKey].timer);\n      this.caches[cacheKey].timer = null;\n    },\n    clear(cacheKey) {\n      if (this.caches[cacheKey]) {\n        delete this.caches[cacheKey];\n      }\n    },\n    getAllCaches() {\n      return this.caches;\n    },\n  },\n});\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,OAAO;;AAEhD;AACA,MAAMC,KAAK,GAAGD,WAAW,CAAC,CAAC;AAE3B,OAAO,MAAME,cAAc,GAAGH,WAAW,CAAC,WAAW,EAAE;EACrDI,KAAK,EAAEA,CAAA,MAAO;IACZC,SAAS,EAAE,CAAC,CAAC,CAAE;EACjB,CAAC,CAAC;;EAEFC,OAAO,EAAE;IACP;IACAC,WAAWA,CAAA,EAAG;MACZ;MACA,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC;IAChD,CAAC;IACDC,GAAGA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,GAAG,CAAC,EAAE;MACjC,MAAMC,UAAU,GAAGC,aAAa,CAAC,CAAC;MAClC,IAAID,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC,EAAE;QAC/B,MAAMM,YAAY,GAAGH,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC;QAChD;QACA,IAAIO,IAAI,CAACC,SAAS,CAACF,YAAY,CAACG,IAAI,CAAC,KAAKF,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC,EAAE;UACnEK,YAAY,CAACI,OAAO,EAAE;UACtBJ,YAAY,CAACG,IAAI,GAAGR,SAAS;QAC/B;MACF,CAAC,MAAM;QACLE,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC,GAAG;UAAEU,OAAO,EAAE,CAAC;UAAED,IAAI,EAAER;QAAU,CAAC;MAC/D;;MAEA;MACA,IAAIC,IAAI,GAAG,CAAC,EAAE;QACZ,MAAMS,QAAQ,GAAGA,CAAA,KAAM;UACrBC,QAAQ,CAACb,GAAG,CAACC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,CAAC;QACzC,CAAC;QAED,IAAIC,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC,CAACa,KAAK,EAAE;UACrCC,YAAY,CAACX,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC,CAACa,KAAK,CAAC;QACjD;QAEAV,UAAU,CAACE,MAAM,CAACL,QAAQ,CAAC,CAACa,KAAK,GAAGE,UAAU,CAACJ,QAAQ,EAAET,IAAI,CAAC;MAChE;IACF,CAAC;IACDS,QAAQA,CAACX,QAAQ,EAAEE,IAAI,GAAG,CAAC,EAAE;MAC3B,IAAIA,IAAI,GAAG,CAAC,EAAE;QACZ;QACAa,UAAU,CAAC,MAAM;UACf,IAAI,CAAChB,GAAG,CAACC,QAAQ,EAAE,IAAI,CAACK,MAAM,CAACL,QAAQ,CAAC,CAACS,IAAI,CAAC;UAC9C,IAAI,CAACE,QAAQ,CAACX,QAAQ,EAAEE,IAAI,CAAC;QAC/B,CAAC,EAAEA,IAAI,CAAC;MACV;IACF,CAAC;IACDc,cAAcA,CAAChB,QAAQ,EAAE;MACvB;MACAc,YAAY,CAAC,IAAI,CAACT,MAAM,CAACL,QAAQ,CAAC,CAACa,KAAK,CAAC;MACzC,IAAI,CAACR,MAAM,CAACL,QAAQ,CAAC,CAACa,KAAK,GAAG,IAAI;IACpC,CAAC;IACDI,KAAKA,CAACjB,QAAQ,EAAE;MACd,IAAI,IAAI,CAACK,MAAM,CAACL,QAAQ,CAAC,EAAE;QACzB,OAAO,IAAI,CAACK,MAAM,CAACL,QAAQ,CAAC;MAC9B;IACF,CAAC;IACDkB,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACb,MAAM;IACpB;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}