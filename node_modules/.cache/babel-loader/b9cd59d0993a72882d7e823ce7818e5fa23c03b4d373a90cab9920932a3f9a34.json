{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Emitter from 'element-ui/src/mixins/emitter';\nimport { getValueByPath, escapeRegexpString } from 'element-ui/src/utils/util';\nexport default {\n  name: 'Option',\n  mixins: [Emitter],\n  componentName: 'Option',\n  inject: ['select'],\n  props: {\n    value: {\n      required: true\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    };\n  },\n  computed: {\n    isObject() {\n      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';\n    },\n    currentLabel() {\n      return this.label || (this.isObject ? '' : this.value);\n    },\n    currentValue() {\n      return this.value || this.label || '';\n    },\n    itemSelected() {\n      if (!this.select.multiple) {\n        return this.isEqual(this.value, this.select.value);\n      } else {\n        return this.contains(this.select.value, this.value);\n      }\n    },\n    limitReached() {\n      if (this.select.multiple) {\n        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;\n      } else {\n        return false;\n      }\n    }\n  },\n  watch: {\n    currentLabel() {\n      if (!this.created && !this.select.remote) {\n        this.dispatch('Select', 'setSelected');\n      }\n    },\n    value(val, oldVal) {\n      const {\n        remote,\n        valueKey\n      } = this.select;\n      if (!this.created && !remote) {\n        if (valueKey && typeof val === 'object' && typeof oldVal === 'object' && val[valueKey] === oldVal[valueKey]) {\n          return;\n        }\n        this.dispatch('Select', 'setSelected');\n      }\n    }\n  },\n  created() {\n    this.select.options.push(this);\n    this.select.cachedOptions.push(this);\n    this.select.optionsCount++;\n    this.select.filteredOptionsCount++;\n    this.$on('queryChange', this.queryChange);\n    this.$on('handleGroupDisabled', this.handleGroupDisabled);\n  },\n  beforeDestroy() {\n    const {\n      selected,\n      multiple\n    } = this.select;\n    const selectedOptions = multiple ? selected : [selected];\n    const index = this.select.cachedOptions.indexOf(this);\n    const selectedIndex = selectedOptions.indexOf(this);\n\n    // if option is not selected, remove it from cache\n    if (index > -1 && selectedIndex < 0) {\n      this.select.cachedOptions.splice(index, 1);\n    }\n    this.select.onOptionDestroy(this.select.options.indexOf(this));\n  },\n  methods: {\n    isEqual(a, b) {\n      if (!this.isObject) {\n        return a === b;\n      } else {\n        const valueKey = this.select.valueKey;\n        return getValueByPath(a, valueKey) === getValueByPath(b, valueKey);\n      }\n    },\n    contains(arr = [], target) {\n      if (!this.isObject) {\n        return arr && arr.indexOf(target) > -1;\n      } else {\n        const valueKey = this.select.valueKey;\n        return arr && arr.some(item => {\n          return getValueByPath(item, valueKey) === getValueByPath(target, valueKey);\n        });\n      }\n    },\n    handleGroupDisabled(val) {\n      this.groupDisabled = val;\n    },\n    hoverItem() {\n      if (!this.disabled && !this.groupDisabled) {\n        this.select.hoverIndex = this.select.options.indexOf(this);\n      }\n    },\n    selectOptionClick() {\n      if (this.disabled !== true && this.groupDisabled !== true) {\n        this.dispatch('Select', 'handleOptionClick', [this, true]);\n      }\n    },\n    queryChange(query) {\n      this.visible = new RegExp(escapeRegexpString(query), 'i').test(this.currentLabel) || this.created;\n      if (!this.visible) {\n        this.select.filteredOptionsCount--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["Emitter","getValueByPath","escapeRegexpString","name","mixins","componentName","inject","props","value","required","label","String","Number","created","Boolean","disabled","type","default","data","index","groupDisabled","visible","hitState","hover","computed","isObject","Object","prototype","toString","call","toLowerCase","currentLabel","currentValue","itemSelected","select","multiple","isEqual","contains","limitReached","length","multipleLimit","watch","remote","dispatch","val","oldVal","valueKey","options","push","cachedOptions","optionsCount","filteredOptionsCount","$on","queryChange","handleGroupDisabled","beforeDestroy","selected","selectedOptions","indexOf","selectedIndex","splice","onOptionDestroy","methods","a","b","arr","target","some","item","hoverItem","hoverIndex","selectOptionClick","query","RegExp","test"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    class=\"el-select-dropdown__item\"\n    :class=\"{\n      selected: itemSelected,\n      'is-disabled': disabled || groupDisabled || limitReached,\n      hover: hover\n    }\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script type=\"text/babel\">\nimport Emitter from 'element-ui/src/mixins/emitter'\nimport { getValueByPath, escapeRegexpString } from 'element-ui/src/utils/util'\n\nexport default {\n  name: 'Option',\n  mixins: [Emitter],\n  componentName: 'Option',\n  inject: ['select'],\n  props: {\n    value: {\n      required: true\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    }\n  },\n  computed: {\n    isObject() {\n      return (\n        Object.prototype.toString.call(this.value).toLowerCase() ===\n        '[object object]'\n      )\n    },\n\n    currentLabel() {\n      return this.label || (this.isObject ? '' : this.value)\n    },\n\n    currentValue() {\n      return this.value || this.label || ''\n    },\n\n    itemSelected() {\n      if (!this.select.multiple) {\n        return this.isEqual(this.value, this.select.value)\n      } else {\n        return this.contains(this.select.value, this.value)\n      }\n    },\n\n    limitReached() {\n      if (this.select.multiple) {\n        return (\n          !this.itemSelected &&\n          (this.select.value || []).length >= this.select.multipleLimit &&\n          this.select.multipleLimit > 0\n        )\n      } else {\n        return false\n      }\n    }\n  },\n  watch: {\n    currentLabel() {\n      if (!this.created && !this.select.remote) { this.dispatch('Select', 'setSelected') }\n    },\n    value(val, oldVal) {\n      const { remote, valueKey } = this.select\n      if (!this.created && !remote) {\n        if (\n          valueKey &&\n          typeof val === 'object' &&\n          typeof oldVal === 'object' &&\n          val[valueKey] === oldVal[valueKey]\n        ) {\n          return\n        }\n        this.dispatch('Select', 'setSelected')\n      }\n    }\n  },\n  created() {\n    this.select.options.push(this)\n    this.select.cachedOptions.push(this)\n    this.select.optionsCount++\n    this.select.filteredOptionsCount++\n\n    this.$on('queryChange', this.queryChange)\n    this.$on('handleGroupDisabled', this.handleGroupDisabled)\n  },\n  beforeDestroy() {\n    const { selected, multiple } = this.select\n    const selectedOptions = multiple ? selected : [selected]\n    const index = this.select.cachedOptions.indexOf(this)\n    const selectedIndex = selectedOptions.indexOf(this)\n\n    // if option is not selected, remove it from cache\n    if (index > -1 && selectedIndex < 0) {\n      this.select.cachedOptions.splice(index, 1)\n    }\n    this.select.onOptionDestroy(this.select.options.indexOf(this))\n  },\n  methods: {\n    isEqual(a, b) {\n      if (!this.isObject) {\n        return a === b\n      } else {\n        const valueKey = this.select.valueKey\n        return getValueByPath(a, valueKey) === getValueByPath(b, valueKey)\n      }\n    },\n\n    contains(arr = [], target) {\n      if (!this.isObject) {\n        return arr && arr.indexOf(target) > -1\n      } else {\n        const valueKey = this.select.valueKey\n        return (\n          arr &&\n          arr.some((item) => {\n            return (\n              getValueByPath(item, valueKey) ===\n              getValueByPath(target, valueKey)\n            )\n          })\n        )\n      }\n    },\n\n    handleGroupDisabled(val) {\n      this.groupDisabled = val\n    },\n\n    hoverItem() {\n      if (!this.disabled && !this.groupDisabled) {\n        this.select.hoverIndex = this.select.options.indexOf(this)\n      }\n    },\n\n    selectOptionClick() {\n      if (this.disabled !== true && this.groupDisabled !== true) {\n        this.dispatch('Select', 'handleOptionClick', [this, true])\n      }\n    },\n\n    queryChange(query) {\n      this.visible =\n        new RegExp(escapeRegexpString(query), 'i').test(this.currentLabel) ||\n        this.created\n      if (!this.visible) {\n        this.select.filteredOptionsCount--\n      }\n    }\n  }\n}\n</script>\n"],"mappings":";AAmBA,OAAAA,OAAA;AACA,SAAAC,cAAA,EAAAC,kBAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAJ,OAAA;EACAK,aAAA;EACAC,MAAA;EACAC,KAAA;IACAC,KAAA;MACAC,QAAA;IACA;IACAC,KAAA,GAAAC,MAAA,EAAAC,MAAA;IACAC,OAAA,EAAAC,OAAA;IACAC,QAAA;MACAC,IAAA,EAAAF,OAAA;MACAG,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,aAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,SAAA;MACA,OACAC,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAC,IAAA,MAAArB,KAAA,EAAAsB,WAAA,OACA;IAEA;IAEAC,aAAA;MACA,YAAArB,KAAA,UAAAe,QAAA,aAAAjB,KAAA;IACA;IAEAwB,aAAA;MACA,YAAAxB,KAAA,SAAAE,KAAA;IACA;IAEAuB,aAAA;MACA,UAAAC,MAAA,CAAAC,QAAA;QACA,YAAAC,OAAA,MAAA5B,KAAA,OAAA0B,MAAA,CAAA1B,KAAA;MACA;QACA,YAAA6B,QAAA,MAAAH,MAAA,CAAA1B,KAAA,OAAAA,KAAA;MACA;IACA;IAEA8B,aAAA;MACA,SAAAJ,MAAA,CAAAC,QAAA;QACA,OACA,MAAAF,YAAA,IACA,MAAAC,MAAA,CAAA1B,KAAA,QAAA+B,MAAA,SAAAL,MAAA,CAAAM,aAAA,IACA,KAAAN,MAAA,CAAAM,aAAA;MAEA;QACA;MACA;IACA;EACA;EACAC,KAAA;IACAV,aAAA;MACA,UAAAlB,OAAA,UAAAqB,MAAA,CAAAQ,MAAA;QAAA,KAAAC,QAAA;MAAA;IACA;IACAnC,MAAAoC,GAAA,EAAAC,MAAA;MACA;QAAAH,MAAA;QAAAI;MAAA,SAAAZ,MAAA;MACA,UAAArB,OAAA,KAAA6B,MAAA;QACA,IACAI,QAAA,IACA,OAAAF,GAAA,iBACA,OAAAC,MAAA,iBACAD,GAAA,CAAAE,QAAA,MAAAD,MAAA,CAAAC,QAAA,GACA;UACA;QACA;QACA,KAAAH,QAAA;MACA;IACA;EACA;EACA9B,QAAA;IACA,KAAAqB,MAAA,CAAAa,OAAA,CAAAC,IAAA;IACA,KAAAd,MAAA,CAAAe,aAAA,CAAAD,IAAA;IACA,KAAAd,MAAA,CAAAgB,YAAA;IACA,KAAAhB,MAAA,CAAAiB,oBAAA;IAEA,KAAAC,GAAA,qBAAAC,WAAA;IACA,KAAAD,GAAA,6BAAAE,mBAAA;EACA;EACAC,cAAA;IACA;MAAAC,QAAA;MAAArB;IAAA,SAAAD,MAAA;IACA,MAAAuB,eAAA,GAAAtB,QAAA,GAAAqB,QAAA,IAAAA,QAAA;IACA,MAAArC,KAAA,QAAAe,MAAA,CAAAe,aAAA,CAAAS,OAAA;IACA,MAAAC,aAAA,GAAAF,eAAA,CAAAC,OAAA;;IAEA;IACA,IAAAvC,KAAA,SAAAwC,aAAA;MACA,KAAAzB,MAAA,CAAAe,aAAA,CAAAW,MAAA,CAAAzC,KAAA;IACA;IACA,KAAAe,MAAA,CAAA2B,eAAA,MAAA3B,MAAA,CAAAa,OAAA,CAAAW,OAAA;EACA;EACAI,OAAA;IACA1B,QAAA2B,CAAA,EAAAC,CAAA;MACA,UAAAvC,QAAA;QACA,OAAAsC,CAAA,KAAAC,CAAA;MACA;QACA,MAAAlB,QAAA,QAAAZ,MAAA,CAAAY,QAAA;QACA,OAAA7C,cAAA,CAAA8D,CAAA,EAAAjB,QAAA,MAAA7C,cAAA,CAAA+D,CAAA,EAAAlB,QAAA;MACA;IACA;IAEAT,SAAA4B,GAAA,OAAAC,MAAA;MACA,UAAAzC,QAAA;QACA,OAAAwC,GAAA,IAAAA,GAAA,CAAAP,OAAA,CAAAQ,MAAA;MACA;QACA,MAAApB,QAAA,QAAAZ,MAAA,CAAAY,QAAA;QACA,OACAmB,GAAA,IACAA,GAAA,CAAAE,IAAA,CAAAC,IAAA;UACA,OACAnE,cAAA,CAAAmE,IAAA,EAAAtB,QAAA,MACA7C,cAAA,CAAAiE,MAAA,EAAApB,QAAA;QAEA;MAEA;IACA;IAEAQ,oBAAAV,GAAA;MACA,KAAAxB,aAAA,GAAAwB,GAAA;IACA;IAEAyB,UAAA;MACA,UAAAtD,QAAA,UAAAK,aAAA;QACA,KAAAc,MAAA,CAAAoC,UAAA,QAAApC,MAAA,CAAAa,OAAA,CAAAW,OAAA;MACA;IACA;IAEAa,kBAAA;MACA,SAAAxD,QAAA,kBAAAK,aAAA;QACA,KAAAuB,QAAA;MACA;IACA;IAEAU,YAAAmB,KAAA;MACA,KAAAnD,OAAA,GACA,IAAAoD,MAAA,CAAAvE,kBAAA,CAAAsE,KAAA,QAAAE,IAAA,MAAA3C,YAAA,KACA,KAAAlB,OAAA;MACA,UAAAQ,OAAA;QACA,KAAAa,MAAA,CAAAiB,oBAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}