{"ast":null,"code":"import _ from \"lodash\";\nimport packageConfig from \"../package.json\";\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\";\n    this.initParam = params;\n    this.resetDefaultParams();\n    this.setSystemPlateformType(params.type);\n    this.isInit = Boolean(this.getCacheTime());\n    this.getVolcegineProps();\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers\n   * @param {*} tabBar\n   */\n  init(rouers, tabBar) {\n    try {\n      this.setCacheTime(new Date().getTime());\n      this.updateRouter(rouers, tabBar);\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0]);\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers);\n          this.setCacheVisitUrl(currentUrl);\n        }\n      }\n    } catch (e) {\n      console.warn(\"火山引擎SDK 初始化错误: \");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    let volcengineProps;\n    if (this.systemPlateformType) {\n      volcengineProps = localStorage.getItem(this.cacheRoutersKey);\n    } else {\n      volcengineProps = uni.getStorageSync(this.cacheRoutersKey);\n    }\n    if (!volcengineProps) {\n      volcengineProps = {};\n    } else {\n      volcengineProps = JSON.parse(volcengineProps);\n    }\n    try {\n      const routeInfo = rouers;\n      const routeInfoRouter = this.forEachArr(routeInfo, 0);\n      const tabbarInfo = tabBar;\n      const tabRouter = this.forEachArr(tabbarInfo, 1);\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      };\n      this.setVolcenginePropsCache();\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    const commonAttr = this.commonAttr;\n    let emptyObject = {};\n    commonAttr.forEach(item => {\n      emptyObject[item] = this.nullProp;\n      if (!this.volcengineProps[path]) {\n        this.volcengineProps[path] = {};\n      }\n      const pathItem = this.volcengineProps[path];\n      this.volcengineProps[path][item] = pathItem[item] || this.nullProp;\n    });\n    if (!this.initParam.routerObject) {\n      const sourceNameObject = this.getFromQueryNameContent(path);\n      this.volcengineProps[path] = {\n        ...this.volcengineProps[path],\n        ...sourceNameObject\n      };\n    }\n    return this.volcengineProps[path] || emptyObject;\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    let volcengineProps = {};\n    if (Array.isArray(arr)) {\n      if (arr.length > 0) {\n        arr.forEach(item => {\n          const path = type === 0 ? item.path : item.pagePath;\n          volcengineProps[\"/\" + path] = {};\n          volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path;\n          volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp;\n          // 先默认为空，等对应的子类那边触发路由变化的时候再改\n          const meta = item.meta || item.style;\n          const metaKeys = meta ? Object.keys(meta) : [];\n          if (metaKeys.length > 0) {\n            metaKeys.forEach(keyName => {\n              if (this.commonAttrRealation[keyName]) {\n                const volcengineKeyName = this.commonAttrRealation[keyName];\n                volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName];\n              }\n            });\n          }\n          const versionInfo = this.getVersionInfo();\n          if (versionInfo) {\n            volcengineProps[\"/\" + path] = {\n              ...volcengineProps[\"/\" + path],\n              ...versionInfo\n            };\n          }\n          //存入meta 字段\n          const itemMeta = item.meta;\n          const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : [];\n          if (itemMetaKeys.length > 0) {\n            itemMetaKeys.forEach(itemInfo => {\n              if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                let volcengineFinalKey = itemInfo.replace(/[A-Z]/g, key => `_${key.toLowerCase()}`);\n                volcengineProps[\"/\" + path][volcengineFinalKey] = itemMeta[itemInfo];\n              }\n            });\n          }\n        });\n      }\n    }\n    return volcengineProps;\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\";\n    // 默认的空值\n    this.commonAttr = [\"custom_page_title\", \"custom_page_url_path\",\n    // /pages/xxx\n    \"custom_page_url\",\n    // https\n    \"sub_app_name\", \"custom_app_version_name\" // 应用当前版本\n    ];\n    // 公共属性\n    this.isVolcengine = true;\n    // 是否是火山引擎环境\n    this.isError = false;\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\";\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\";\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\";\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\";\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\";\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    };\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = [];\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\";\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams) ? this.initParam.eventQueryParams : [];\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0; // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    if (this.systemPlateformType) {\n      localStorage.removeItem(this.commonAnalysisKey);\n    } else {\n      uni.removeStorageSync(this.commonAnalysisKey);\n    }\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n    const cacheResult = this.getStorageByPath(path, 0);\n    return cacheResult;\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n    this.setStorageByPath(path, time);\n  }\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n  getCacheVisitUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n    const cacheResult = this.getStorageByPath(path, \"\");\n    return cacheResult;\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n  setCacheVisitUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n    this.setStorageByPath(path, url);\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    const currentOptions = this.getCurrentOptions(path);\n    let sourceNameObject = {};\n    const cacheSourceNameObject = this.getFromQueryNameCache();\n    let fromQueryNameArr = this.fromQueryNameArr;\n    let isNeedChangeCache = false;\n    if (fromQueryNameArr.length) {\n      fromQueryNameArr.forEach(item => {\n        const itemResult = currentOptions[item] || cacheSourceNameObject[item];\n        const changeCondition = currentOptions[item] && cacheSourceNameObject[item] && currentOptions[item] !== cacheSourceNameObject[item];\n        const emptyChangeCondition = currentOptions[item] && !cacheSourceNameObject[item];\n        // 当缓存和链接有不一致的时候更新缓存\n        if (changeCondition || emptyChangeCondition) {\n          isNeedChangeCache = true;\n        }\n        sourceNameObject[item] = itemResult || this.nullProp;\n      });\n      // 当有传入queryName 但无缓存的时候\n      if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n        this.setFromQueryNameCache(sourceNameObject);\n      }\n    } else {\n      sourceNameObject = cacheSourceNameObject;\n    }\n    return sourceNameObject;\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n    const cacheResult = this.getStorageByPath(path, {});\n    return cacheResult;\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n    this.setStorageByPath(path, source);\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n    let volcengineProps = this.getStorageByPath(path, null);\n    if (!volcengineProps) {\n      volcengineProps = {};\n    } else {\n      volcengineProps = JSON.parse(volcengineProps);\n    }\n    this.volcengineProps = volcengineProps;\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    const volcenginePropsCache = JSON.stringify(this.volcengineProps);\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n    this.setStorageByPath(path, volcenginePropsCache);\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n\n  setCurrentRouterInfo(routerParam) {\n    const volcengineRouterInfoCache = JSON.stringify(routerParam);\n    this.setStorageByPath(this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey, volcengineRouterInfoCache);\n  }\n  getCurrentRouterInfo() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey;\n    let routerInfo = this.getStorageByPath(path, null);\n    if (!routerInfo) {\n      routerInfo = {};\n    } else {\n      routerInfo = JSON.parse(routerInfo);\n    }\n    return routerInfo;\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages;\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    const page = getCurrentPages().map(e => `/${e.route}`).reverse(); // 获取页面栈\n    return page;\n  }\n  getCurrentOptions(path) {\n    let options = {};\n    if (!this.initParam.uniPluginObject) {\n      // uni-app\n      try {\n        const currentUrl = window.location.href;\n        options = this.getUrlParams(currentUrl);\n      } catch (e) {}\n    } else {\n      const currentArr = getCurrentPages().filter(el => {\n        return \"/\" + el.route === path;\n      });\n      const current = currentArr.length ? currentArr[0] : [];\n      options = current.options || {};\n    }\n    return options;\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    let urlStr = url.split(\"?\")[1];\n    // 创建空对象存储参数\n    let obj = {};\n    // 再通过 & 将每一个参数单独分割出来\n    let paramsArr = urlStr.split(\"&\");\n    for (let i = 0, len = paramsArr.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      let arr = paramsArr[i].split(\"=\");\n      obj[arr[0]] = arr[1];\n    }\n    return obj;\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined) {\n    path = typeof path === \"string\" ? path.split(\".\") : path;\n    path = path.filter(x => x);\n    // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n    let lsValue;\n    if (this.systemPlateformType) {\n      lsValue = localStorage.getItem(path[0]) || undefined;\n      if (lsValue) {\n        try {\n          lsValue = JSON.parse(lsValue);\n        } catch (e) {\n          lsValue = {};\n        }\n      }\n    } else {\n      lsValue = uni.getStorageSync(path[0]) || undefined;\n    }\n    // 若 path 只有一级，直接读取\n    const valueByPath = lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue;\n    const result = !valueByPath && typeof nullType !== undefined ? nullType : valueByPath;\n    return result;\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value) {\n    path = typeof path === \"string\" ? path.split(\".\") : path;\n    path = path.filter(x => x);\n    let result = \"\";\n    if (path.length > 1) {\n      // 若 path 不只一级，需要取出按 key 路径重新赋值\n      let lsValue;\n      if (this.systemPlateformType) {\n        lsValue = localStorage.getItem(path[0]);\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue);\n          } catch (e) {\n            lsValue = {};\n          }\n        } else {\n          lsValue = {};\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || {};\n      }\n      result = _.set(lsValue, path.slice(1), value);\n    } else if (path.length === 1) {\n      // 若 path 只有一级，直接存入\n      result = value;\n    }\n    if (this.systemPlateformType) {\n      localStorage.setItem(path[0], JSON.stringify(result));\n    } else {\n      uni.setStorageSync(path[0], result);\n    }\n    return !!result;\n  }\n  getNowPath(routeInfo) {\n    let currentUrl;\n    try {\n      const routerArr = routeInfo;\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href;\n        routerArr.forEach(item => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path;\n          }\n        });\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path;\n      }\n    } catch (e) {\n      currentUrl = \"/\";\n    }\n    return currentUrl;\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      let versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      };\n      const initParam = this.initParam;\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion;\n        versionInfo.custom_app_version_name = appWgtVersion;\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\";\n        versionInfo.custom_app_version_name = packageVersion;\n      } else {\n        // H5\n\n        const version = uni.getSystemInfoSync().appWgtVersion || uni.getSystemInfoSync().appVersion;\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version;\n        if (!version) {\n          versionInfo.custom_app_version_name = UNI_VERSION.versionName || UNI_VERSION.version;\n        }\n      }\n      return versionInfo;\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      };\n    }\n  }\n}","map":{"version":3,"names":["_","packageConfig","Volcengine","constructor","params","commonAnalysisKey","initParam","resetDefaultParams","setSystemPlateformType","type","isInit","Boolean","getCacheTime","getVolcegineProps","init","rouers","tabBar","setCacheTime","Date","getTime","updateRouter","pages","setCacheVisitUrl","getCacheVisitUrl","currentUrl","getNowPath","e","console","warn","volcengineProps","systemPlateformType","localStorage","getItem","cacheRoutersKey","uni","getStorageSync","JSON","parse","routeInfo","routeInfoRouter","forEachArr","tabbarInfo","tabRouter","setVolcenginePropsCache","getCommonAttr","path","commonAttr","emptyObject","forEach","item","nullProp","pathItem","routerObject","sourceNameObject","getFromQueryNameContent","arr","Array","isArray","length","pagePath","meta","style","metaKeys","Object","keys","keyName","commonAttrRealation","volcengineKeyName","versionInfo","getVersionInfo","itemMeta","itemMetaKeys","itemInfo","includes","volcengineFinalKey","replace","key","toLowerCase","isVolcengine","isError","cacheTimeKey","catcheVisitUrlKey","catcheVersionKey","cacheRouterInfoKey","pageName","subAppName","navigationBarTitleText","fromQueryNameCacheKey","fromQueryNameArr","eventQueryParams","removeCache","removeItem","removeStorageSync","cacheResult","getStorageByPath","time","setStorageByPath","url","currentOptions","getCurrentOptions","cacheSourceNameObject","getFromQueryNameCache","isNeedChangeCache","itemResult","changeCondition","emptyChangeCondition","setFromQueryNameCache","source","volcenginePropsCache","stringify","setCurrentRouterInfo","routerParam","volcengineRouterInfoCache","getCurrentRouterInfo","routerInfo","changeCurrentPage","getCurrentPagesArr","page","getCurrentPages","map","route","reverse","options","uniPluginObject","window","location","href","getUrlParams","currentArr","filter","el","current","urlStr","split","obj","paramsArr","i","len","nullType","undefined","x","lsValue","valueByPath","get","slice","result","value","set","setItem","setStorageSync","routerArr","nowFullPath","indexOf","analytics_sdk_version_name","version","appWgtVersion","getSystemInfoSync","custom_app_version_name","packageVersion","WEB_VERSION","appVersion","UNI_VERSION","versionName"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-web-utils/node_modules/@cndinfo/cube-analytics-sdk/common/index.js"],"sourcesContent":["import _ from \"lodash\"\nimport packageConfig from \"../package.json\"\n\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\"\n    this.initParam = params\n    this.resetDefaultParams()\n    this.setSystemPlateformType(params.type)\n    this.isInit = Boolean(this.getCacheTime())\n    this.getVolcegineProps()\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers\n   * @param {*} tabBar\n   */\n  init(rouers, tabBar) {\n    try {\n      this.setCacheTime(new Date().getTime())\n      this.updateRouter(rouers, tabBar)\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0])\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers)\n          this.setCacheVisitUrl(currentUrl)\n        }\n      }\n    } catch (e) {\n      console.warn(\"火山引擎SDK 初始化错误: \")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    let volcengineProps\n    if (this.systemPlateformType) {\n      volcengineProps = localStorage.getItem(this.cacheRoutersKey)\n    } else {\n      volcengineProps = uni.getStorageSync(this.cacheRoutersKey)\n    }\n    if (!volcengineProps) {\n      volcengineProps = {}\n    } else {\n      volcengineProps = JSON.parse(volcengineProps)\n    }\n    try {\n      const routeInfo = rouers\n      const routeInfoRouter = this.forEachArr(routeInfo, 0)\n      const tabbarInfo = tabBar\n      const tabRouter = this.forEachArr(tabbarInfo, 1)\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      }\n      this.setVolcenginePropsCache()\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    const commonAttr = this.commonAttr\n    let emptyObject = {}\n    commonAttr.forEach((item) => {\n      emptyObject[item] = this.nullProp\n      if (!this.volcengineProps[path]) {\n        this.volcengineProps[path] = {}\n      }\n      const pathItem = this.volcengineProps[path]\n      this.volcengineProps[path][item] = pathItem[item] || this.nullProp\n    })\n    if (!this.initParam.routerObject) {\n      const sourceNameObject = this.getFromQueryNameContent(path)\n      this.volcengineProps[path] = {\n        ...this.volcengineProps[path],\n        ...sourceNameObject\n      }\n    }\n    return this.volcengineProps[path] || emptyObject\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    let volcengineProps = {}\n    if (Array.isArray(arr)) {\n      if (arr.length > 0) {\n        arr.forEach((item) => {\n          const path = type === 0 ? item.path : item.pagePath\n          volcengineProps[\"/\" + path] = {}\n          volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path\n          volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp\n          // 先默认为空，等对应的子类那边触发路由变化的时候再改\n          const meta = item.meta || item.style\n          const metaKeys = meta ? Object.keys(meta) : []\n          if (metaKeys.length > 0) {\n            metaKeys.forEach((keyName) => {\n              if (this.commonAttrRealation[keyName]) {\n                const volcengineKeyName = this.commonAttrRealation[keyName]\n                volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName]\n              }\n            })\n          }\n          const versionInfo = this.getVersionInfo()\n          if (versionInfo) {\n            volcengineProps[\"/\" + path] = {\n              ...volcengineProps[\"/\" + path],\n              ...versionInfo\n            }\n          }\n          //存入meta 字段\n          const itemMeta = item.meta\n          const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : []\n          if (itemMetaKeys.length > 0) {\n            itemMetaKeys.forEach((itemInfo) => {\n              if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                let volcengineFinalKey = itemInfo.replace(\n                  /[A-Z]/g,\n                  (key) => `_${key.toLowerCase()}`\n                )\n                volcengineProps[\"/\" + path][volcengineFinalKey] =\n                  itemMeta[itemInfo]\n              }\n            })\n          }\n        })\n      }\n    }\n    return volcengineProps\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\"\n    // 默认的空值\n    this.commonAttr = [\n      \"custom_page_title\",\n      \"custom_page_url_path\", // /pages/xxx\n      \"custom_page_url\", // https\n      \"sub_app_name\",\n      \"custom_app_version_name\" // 应用当前版本\n    ]\n    // 公共属性\n    this.isVolcengine = true\n    // 是否是火山引擎环境\n    this.isError = false\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\"\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\"\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\"\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\"\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\"\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    }\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = []\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\"\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams)\n      ? this.initParam.eventQueryParams\n      : []\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0 // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    if (this.systemPlateformType) {\n      localStorage.removeItem(this.commonAnalysisKey)\n    } else {\n      uni.removeStorageSync(this.commonAnalysisKey)\n    }\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n    const cacheResult = this.getStorageByPath(path, 0)\n    return cacheResult\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n    this.setStorageByPath(path, time)\n  }\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n  getCacheVisitUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n    const cacheResult = this.getStorageByPath(path, \"\")\n    return cacheResult\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n  setCacheVisitUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n    this.setStorageByPath(path, url)\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    const currentOptions = this.getCurrentOptions(path)\n    let sourceNameObject = {}\n    const cacheSourceNameObject = this.getFromQueryNameCache()\n    let fromQueryNameArr = this.fromQueryNameArr\n    let isNeedChangeCache = false\n    if (fromQueryNameArr.length) {\n      fromQueryNameArr.forEach((item) => {\n        const itemResult = currentOptions[item] || cacheSourceNameObject[item]\n        const changeCondition =\n          currentOptions[item] &&\n          cacheSourceNameObject[item] &&\n          currentOptions[item] !== cacheSourceNameObject[item]\n        const emptyChangeCondition =\n          currentOptions[item] && !cacheSourceNameObject[item]\n        // 当缓存和链接有不一致的时候更新缓存\n        if (changeCondition || emptyChangeCondition) {\n          isNeedChangeCache = true\n        }\n        sourceNameObject[item] = itemResult || this.nullProp\n      })\n      // 当有传入queryName 但无缓存的时候\n      if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n        this.setFromQueryNameCache(sourceNameObject)\n      }\n    } else {\n      sourceNameObject = cacheSourceNameObject\n    }\n    return sourceNameObject\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n    const cacheResult = this.getStorageByPath(path, {})\n    return cacheResult\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n    this.setStorageByPath(path, source)\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n    let volcengineProps = this.getStorageByPath(path, null)\n    if (!volcengineProps) {\n      volcengineProps = {}\n    } else {\n      volcengineProps = JSON.parse(volcengineProps)\n    }\n    this.volcengineProps = volcengineProps\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    const volcenginePropsCache = JSON.stringify(this.volcengineProps)\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n    this.setStorageByPath(path, volcenginePropsCache)\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n\n  setCurrentRouterInfo(routerParam) {\n    const volcengineRouterInfoCache = JSON.stringify(routerParam)\n    this.setStorageByPath(\n      this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey,\n      volcengineRouterInfoCache\n    )\n  }\n  getCurrentRouterInfo() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey\n    let routerInfo = this.getStorageByPath(path, null)\n    if (!routerInfo) {\n      routerInfo = {}\n    } else {\n      routerInfo = JSON.parse(routerInfo)\n    }\n    return routerInfo\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    const page = getCurrentPages()\n      .map((e) => `/${e.route}`)\n      .reverse() // 获取页面栈\n    return page\n  }\n  getCurrentOptions(path) {\n    let options = {}\n    if (!this.initParam.uniPluginObject) {\n      // uni-app\n      try {\n        const currentUrl = window.location.href\n        options = this.getUrlParams(currentUrl)\n      } catch (e) {}\n    } else {\n      const currentArr = getCurrentPages().filter((el) => {\n        return \"/\" + el.route === path\n      })\n      const current = currentArr.length ? currentArr[0] : []\n      options = current.options || {}\n    }\n    return options\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    let urlStr = url.split(\"?\")[1]\n    // 创建空对象存储参数\n    let obj = {}\n    // 再通过 & 将每一个参数单独分割出来\n    let paramsArr = urlStr.split(\"&\")\n    for (let i = 0, len = paramsArr.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      let arr = paramsArr[i].split(\"=\")\n      obj[arr[0]] = arr[1]\n    }\n    return obj\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined) {\n    path = typeof path === \"string\" ? path.split(\".\") : path\n    path = path.filter((x) => x)\n    // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n    let lsValue\n    if (this.systemPlateformType) {\n      lsValue = localStorage.getItem(path[0]) || undefined\n      if (lsValue) {\n        try {\n          lsValue = JSON.parse(lsValue)\n        } catch (e) {\n          lsValue = {}\n        }\n      }\n    } else {\n      lsValue = uni.getStorageSync(path[0]) || undefined\n    }\n    // 若 path 只有一级，直接读取\n    const valueByPath =\n      lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue\n    const result =\n      !valueByPath && typeof nullType !== undefined ? nullType : valueByPath\n    return result\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value) {\n    path = typeof path === \"string\" ? path.split(\".\") : path\n    path = path.filter((x) => x)\n    let result = \"\"\n    if (path.length > 1) {\n      // 若 path 不只一级，需要取出按 key 路径重新赋值\n      let lsValue\n      if (this.systemPlateformType) {\n        lsValue = localStorage.getItem(path[0])\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue)\n          } catch (e) {\n            lsValue = {}\n          }\n        } else {\n          lsValue = {}\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || {}\n      }\n\n      result = _.set(lsValue, path.slice(1), value)\n    } else if (path.length === 1) {\n      // 若 path 只有一级，直接存入\n      result = value\n    }\n    if (this.systemPlateformType) {\n      localStorage.setItem(path[0], JSON.stringify(result))\n    } else {\n      uni.setStorageSync(path[0], result)\n    }\n    return !!result\n  }\n  getNowPath(routeInfo) {\n    let currentUrl\n    try {\n      const routerArr = routeInfo\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href\n        routerArr.forEach((item) => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path\n          }\n        })\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path\n      }\n    } catch (e) {\n      currentUrl = \"/\"\n    }\n    return currentUrl\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      let versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      }\n      const initParam = this.initParam\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion\n        versionInfo.custom_app_version_name = appWgtVersion\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\"\n\n        versionInfo.custom_app_version_name = packageVersion\n      } else {\n        // H5\n\n        const version =\n          uni.getSystemInfoSync().appWgtVersion ||\n          uni.getSystemInfoSync().appVersion\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version\n        if (!version) {\n          versionInfo.custom_app_version_name =\n            UNI_VERSION.versionName || UNI_VERSION.version\n        }\n      }\n      return versionInfo\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}