{"ast":null,"code":"import { defineStore } from 'pinia';\nexport const useCubeCache = defineStore({\n  state: () => ({\n    cache: {}\n  }),\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      return Math.random().toString(36).substring(2);\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      const currentCache = this.cache[cacheKey] || {\n        version: 0,\n        data: cacheInfo\n      };\n      const currentTime = Date.now();\n      if (time > 0) {\n        if (!currentCache.lastSaved || currentTime - currentCache.lastSaved >= time) {\n          currentCache.version++;\n          currentCache.data = cacheInfo;\n          currentCache.lastSaved = currentTime;\n        }\n      } else {\n        currentCache.version++;\n        currentCache.data = cacheInfo;\n      }\n      this.cache[cacheKey] = currentCache;\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cache[cacheKey]) {\n        delete this.cache[cacheKey].lastSaved;\n      }\n    },\n    // 清空指定缓存key的缓存对象\n    clear(cacheKey) {\n      if (cacheKey in this.cache) {\n        delete this.cache[cacheKey];\n      }\n    },\n    // 清空所有缓存\n    clearAll() {\n      this.cache = {};\n    },\n    // 获取所有缓存\n    getAllCache() {\n      return this.cache;\n    },\n    // 获取指定缓存\n    getCache(cacheKey) {\n      return this.cache[cacheKey] || {\n        version: 0,\n        data: null\n      };\n    },\n    // 获取指定版本的缓存\n    getVersionCache(cacheKey, version) {\n      const cache = this.cache[cacheKey];\n      if (cache) {\n        const targetVersion = Math.min(version, cache.version);\n        return cache.data;\n      } else {\n        return null;\n      }\n    },\n    // 获取版本差异\n    getDiff(cacheKey, version) {\n      const cache = this.cache[cacheKey];\n      if (cache && version > 0 && version <= cache.version) {\n        const currentVersion = cache.data;\n        const previousVersion = this.getVersionCache(cacheKey, version - 1);\n        if (currentVersion && previousVersion) {\n          const diff = {};\n          for (const key in currentVersion) {\n            if (JSON.stringify(currentVersion[key]) !== JSON.stringify(previousVersion[key])) {\n              diff[key] = [previousVersion[key], currentVersion[key]];\n            }\n          }\n          return diff;\n        }\n      }\n      return {};\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useCubeCache","state","cache","actions","getCacheKey","Math","random","toString","substring","set","cacheKey","cacheInfo","time","currentCache","version","data","currentTime","Date","now","lastSaved","cancelAutoSave","clear","clearAll","getAllCache","getCache","getVersionCache","targetVersion","min","getDiff","currentVersion","previousVersion","diff","key","JSON","stringify"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore } from 'pinia';\n\nexport const useCubeCache = defineStore({\n  state: () => ({\n    cache: {},\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      return Math.random().toString(36).substring(2);\n    },\n\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      const currentCache = this.cache[cacheKey] || { version: 0, data: cacheInfo };\n      const currentTime = Date.now();\n\n      if (time > 0) {\n        if (!currentCache.lastSaved || currentTime - currentCache.lastSaved >= time) {\n          currentCache.version++;\n          currentCache.data = cacheInfo;\n          currentCache.lastSaved = currentTime;\n        }\n      } else {\n        currentCache.version++;\n        currentCache.data = cacheInfo;\n      }\n\n      this.cache[cacheKey] = currentCache;\n    },\n\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cache[cacheKey]) {\n        delete this.cache[cacheKey].lastSaved;\n      }\n    },\n\n    // 清空指定缓存key的缓存对象\n    clear(cacheKey) {\n      if (cacheKey in this.cache) {\n        delete this.cache[cacheKey];\n      }\n    },\n\n    // 清空所有缓存\n    clearAll() {\n      this.cache = {};\n    },\n\n    // 获取所有缓存\n    getAllCache() {\n      return this.cache;\n    },\n\n    // 获取指定缓存\n    getCache(cacheKey) {\n      return this.cache[cacheKey] || { version: 0, data: null };\n    },\n\n    // 获取指定版本的缓存\n    getVersionCache(cacheKey, version) {\n      const cache = this.cache[cacheKey];\n      if (cache) {\n        const targetVersion = Math.min(version, cache.version);\n        return cache.data;\n      } else {\n        return null;\n      }\n    },\n\n    // 获取版本差异\n    getDiff(cacheKey, version) {\n      const cache = this.cache[cacheKey];\n      if (cache && version > 0 && version <= cache.version) {\n        const currentVersion = cache.data;\n        const previousVersion = this.getVersionCache(cacheKey, version - 1);\n\n        if (currentVersion && previousVersion) {\n          const diff = {};\n\n          for (const key in currentVersion) {\n            if (JSON.stringify(currentVersion[key]) !== JSON.stringify(previousVersion[key])) {\n              diff[key] = [previousVersion[key], currentVersion[key]];\n            }\n          }\n\n          return diff;\n        }\n      }\n\n      return {};\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}