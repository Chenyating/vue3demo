{"ast":null,"code":"import loginDialog from '../../common/login.vue';\nimport utils from '../../common/utils.js';\nexport default {\n  name: 'FrReport',\n  components: {\n    loginDialog\n  },\n  props: {\n    url: {\n      type: String,\n      default: ''\n    },\n    requireAccess: {\n      type: Boolean,\n      default: false\n    },\n    autoInit: {\n      type: Boolean,\n      default: true\n    },\n    height: {\n      type: String,\n      default: '100%'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    loginPath: {\n      type: String,\n      default: '/webroot/decision/login/cross/domain'\n    },\n    origin: {\n      type: String,\n      default: 'http://localhost:8080'\n    },\n    iframeId: {\n      type: String,\n      default: 'report-iframe'\n    }\n  },\n  data() {\n    return {\n      loginVisible: false,\n      hasLoadedReport: false,\n      loading: false,\n      clickCancel: false,\n      username: '',\n      password: '',\n      msg: null,\n      iframeEl: null\n    };\n  },\n  mounted() {\n    const messageEvent = event => {\n      const {\n        code,\n        id\n      } = event.data;\n      if (id === this.iframeId) {\n        let node = document.querySelector('#' + this.iframeId);\n        if (code && code === 200) {\n          node.style.display = 'block';\n          this.loginVisible && (this.loginVisible = false);\n          this.loading = false;\n          this.clickCancel = false;\n          if (this.username && this.password) {\n            utils.saveFineUser(this.username, this.password);\n          }\n          node.src = this.url;\n          node.style.display = 'block';\n        } else if (code && code === 500) {\n          if (this.msg) {\n            this.$message.error('操作失败，请检查账户名及密码是否正确。');\n            this.msg.close();\n            this.msg = null;\n          } else {\n            this.msg = this.$message({\n              type: 'error',\n              message: '操作失败，请检查账户名及密码是否正确。'\n            });\n          }\n          utils.removeIframe(this.iframeId);\n          utils.removeFineUser();\n          this.loginVisible = true;\n          this.hasLoadedReport = false;\n          this.loading = false;\n          this.clickCancel = true;\n        }\n      }\n    };\n    window.addEventListener('message', messageEvent, false);\n    this.$once('hook:beforeDestroy', () => {\n      utils.removeIframe(this.iframeId);\n      window.removeEventListener('message', messageEvent, false);\n    });\n    if (this.autoInit) {\n      this.init();\n    } else {\n      this.clickCancel = true;\n    }\n  },\n  methods: {\n    reload() {\n      this.init();\n    },\n    onCancel() {\n      this.clickCancel = true;\n    },\n    login(res) {\n      this.clickCancel = false;\n      this.username = res.username;\n      this.password = res.password;\n      this.createIframeWithLogin(res);\n      this.loginVisible = false;\n    },\n    init() {\n      this.clickCancel = false;\n      if (this.requireAccess) {\n        if (!utils.checkFineUser()) {\n          // 没有用户名和密码，应该提示登录\n          this.loginVisible = true;\n        } else {\n          // 查询到了，不需要登录\n          const {\n            username,\n            password\n          } = utils.getFineUser();\n          let res = null;\n          if (username && password) {\n            res = {\n              username,\n              password\n            };\n          } else {\n            res = {\n              username: this.username,\n              password: this.password\n            };\n          }\n          this.createIframeWithLogin(res);\n        }\n      } else {\n        // 不需要登陆\n        this.withoutAccess();\n      }\n    },\n    withoutAccess() {\n      this.loading = true;\n      const iframe = this.createIframe();\n      this.$el.querySelector('.cube-fr-report-iframe-inner').appendChild(iframe);\n      this.loading = false;\n    },\n    createIframeWithLogin(res) {\n      this.clickCancel = false;\n      const {\n        username,\n        password\n      } = res;\n      const {\n        origin,\n        loginPath\n      } = this;\n      const enCodeUsername = encodeURIComponent(username);\n      const enCodePassword = encodeURIComponent(password);\n      const validity = `validity=-1`;\n      const loginUrl = `${origin}${loginPath}?fine_username=${enCodeUsername}&fine_password=${enCodePassword}&${validity}`; // 省略callback参数 &callback=callback\n      const validateIframePath = `${origin}/webroot/decision/view/report?op=write&viewlet=iframe.cpt`;\n      const cb = scr => {\n        console.log(scr);\n      };\n      console.log(loginUrl, validateIframePath);\n      this.iframeEl = this.createIframe(loginUrl, validateIframePath, cb);\n      if (this.requireAccess) {\n        this.iframeEl.style.display = 'none';\n      }\n      this.$el.querySelector('.cube-fr-report-iframe-inner').appendChild(this.iframeEl);\n    },\n    createIframe(url, validateIframePath, onLoadCallback) {\n      this.loading = true;\n      this.clickCancel = false;\n      const scr = document.createElement('iframe'); // 创建iframe\n      scr.id = this.iframeId;\n      scr.width = '100%';\n      scr.height = '100%';\n      scr.src = url || this.url;\n      if (this.requireAccess) {\n        scr.onload = () => {\n          if (!this.hasLoadedReport) {\n            // 如果报表尚未加载\n            scr.src = validateIframePath;\n            this.hasLoadedReport = true; // 将标志变量设为true，表示报表已加载\n            setTimeout(() => {\n              const config = {\n                data: {\n                  reportlets: []\n                }\n              };\n              const methods = 'console.log()';\n              utils.sendMessageToIframe(JSON.stringify(config) + '---' + methods + '---' + this.iframeId, this.iframeId, this.origin);\n              onLoadCallback && onLoadCallback(scr);\n            }, 3000);\n          }\n        };\n      }\n      return scr;\n    }\n  }\n};","map":{"version":3,"names":["loginDialog","utils","name","components","props","url","type","String","default","requireAccess","Boolean","autoInit","height","width","loginPath","origin","iframeId","data","loginVisible","hasLoadedReport","loading","clickCancel","username","password","msg","iframeEl","mounted","messageEvent","event","code","id","node","document","querySelector","style","display","saveFineUser","src","$message","error","close","message","removeIframe","removeFineUser","window","addEventListener","$once","removeEventListener","init","methods","reload","onCancel","login","res","createIframeWithLogin","checkFineUser","getFineUser","withoutAccess","iframe","createIframe","$el","appendChild","enCodeUsername","encodeURIComponent","enCodePassword","validity","loginUrl","validateIframePath","cb","scr","console","log","onLoadCallback","createElement","onload","setTimeout","config","reportlets","sendMessageToIframe","JSON","stringify"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/FineReport/Report/src/index.vue"],"sourcesContent":["<template>\n  <div :style=\"{ width: `${width}`, height: `${height}` }\" class=\"cube-fr-report-iframe\">\n    <div v-loading=\"loading\" class=\"cube-fr-report-iframe-inner\">\n      <el-result v-if=\"clickCancel\" icon=\"info\" title=\"提示\" subTitle=\"请登录加载报表。\">\n        <template slot=\"extra\">\n          <el-button @click=\"reload\" type=\"primary\" size=\"mini\">登录</el-button>\n        </template>\n      </el-result>\n    </div>\n    <login-dialog @cancel=\"onCancel\" @login=\"login\" :visible.sync=\"loginVisible\" />\n  </div>\n</template>\n<script>\nimport loginDialog from '../../common/login.vue'\nimport utils from '../../common/utils.js'\nexport default {\n  name: 'FrReport',\n  components: {\n    loginDialog,\n  },\n  props: {\n    url: {\n      type: String,\n      default: ''\n    },\n    requireAccess: {\n      type: Boolean,\n      default: false\n    },\n    autoInit: {\n      type: Boolean,\n      default: true\n    },\n    height: {\n      type: String,\n      default: '100%'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    loginPath: {\n      type: String,\n      default: '/webroot/decision/login/cross/domain'\n    },\n    origin: {\n      type: String,\n      default: 'http://localhost:8080'\n    },\n    iframeId: {\n      type: String,\n      default: 'report-iframe'\n    },\n  },\n  data () {\n    return {\n      loginVisible: false,\n      hasLoadedReport: false,\n      loading: false,\n      clickCancel: false,\n      username: '',\n      password: '',\n      msg: null,\n      iframeEl: null\n    }\n  },\n  mounted () {\n    const messageEvent = (event) => {\n      const { code, id } = event.data\n      if (id === this.iframeId) {\n        let node = document.querySelector('#' + this.iframeId)\n        if (code && code === 200) {\n          node.style.display = 'block'\n          this.loginVisible && (this.loginVisible = false)\n          this.loading = false\n          this.clickCancel = false\n          if (this.username && this.password) {\n            utils.saveFineUser(\n              this.username,\n              this.password\n            )\n          }\n          node.src = this.url\n          node.style.display = 'block'\n        } else if (code && code === 500) {\n          if (this.msg) {\n            this.$message.error('操作失败，请检查账户名及密码是否正确。')\n            this.msg.close()\n            this.msg = null\n          } else {\n            this.msg = this.$message({\n              type: 'error',\n              message: '操作失败，请检查账户名及密码是否正确。'\n            })\n          }\n          utils.removeIframe(this.iframeId)\n          utils.removeFineUser()\n          this.loginVisible = true\n          this.hasLoadedReport = false\n          this.loading = false\n          this.clickCancel = true\n        }\n      }\n    }\n    window.addEventListener('message', messageEvent, false);\n    this.$once('hook:beforeDestroy', () => {\n      utils.removeIframe(this.iframeId)\n      window.removeEventListener('message', messageEvent, false);\n    })\n    if (this.autoInit) {\n      this.init()\n    } else {\n      this.clickCancel = true\n    }\n  },\n  methods: {\n    reload () {\n      this.init()\n    },\n    onCancel () {\n      this.clickCancel = true\n    },\n    login (res) {\n      this.clickCancel = false\n      this.username = res.username\n      this.password = res.password\n      this.createIframeWithLogin(res)\n      this.loginVisible = false\n    },\n    init () {\n      this.clickCancel = false\n      if (this.requireAccess) {\n        if (!utils.checkFineUser()) {\n          // 没有用户名和密码，应该提示登录\n          this.loginVisible = true\n        } else {\n          // 查询到了，不需要登录\n          const { username, password } = utils.getFineUser()\n          let res = null\n          if (username && password) {\n            res = {\n              username,\n              password\n            }\n          } else {\n            res = {\n              username: this.username,\n              password: this.password\n            }\n          }\n          this.createIframeWithLogin(res)\n        }\n      } else {\n        // 不需要登陆\n        this.withoutAccess()\n      }\n    },\n    withoutAccess () {\n      this.loading = true\n      const iframe = this.createIframe()\n      this.$el.querySelector('.cube-fr-report-iframe-inner').appendChild(iframe)\n      this.loading = false\n    },\n    createIframeWithLogin (res) {\n      this.clickCancel = false\n      const { username, password } = res\n      const { origin, loginPath } = this\n      const enCodeUsername = encodeURIComponent(username)\n      const enCodePassword = encodeURIComponent(password)\n      const validity = `validity=-1`\n      const loginUrl = `${origin}${loginPath}?fine_username=${enCodeUsername}&fine_password=${enCodePassword}&${validity}` // 省略callback参数 &callback=callback\n      const validateIframePath = `${origin}/webroot/decision/view/report?op=write&viewlet=iframe.cpt`\n      const cb = (scr) => {\n        console.log(scr)\n      }\n      console.log(loginUrl, validateIframePath)\n      this.iframeEl = this.createIframe(loginUrl, validateIframePath, cb)\n      if (this.requireAccess) {\n        this.iframeEl.style.display = 'none'\n      }\n      this.$el.querySelector('.cube-fr-report-iframe-inner').appendChild(this.iframeEl)\n    },\n    createIframe (url, validateIframePath, onLoadCallback) {\n      this.loading = true\n      this.clickCancel = false\n      const scr = document.createElement('iframe') // 创建iframe\n      scr.id = this.iframeId\n      scr.width = '100%'\n      scr.height = '100%'\n      scr.src = url || this.url\n      if (this.requireAccess) {\n        scr.onload = () => {\n          if (!this.hasLoadedReport) { // 如果报表尚未加载\n            scr.src = validateIframePath\n            this.hasLoadedReport = true // 将标志变量设为true，表示报表已加载\n            setTimeout(() => {\n              const config = {\n                data: {\n                  reportlets: []\n                }\n              }\n              const methods = 'console.log()'\n              utils.sendMessageToIframe(JSON.stringify(config) + '---' + methods + '---' + this.iframeId, this.iframeId, this.origin)\n              onLoadCallback && onLoadCallback(scr)\n            }, 3000)\n          }\n        }\n      }\n      return scr\n    }\n  }\n\n}\n</script>\n<style lang=\"scss\" scoped>\n.cube-fr-report-iframe {\n  position: relative;\n  overflow: hidden;\n\n  &-inner {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}