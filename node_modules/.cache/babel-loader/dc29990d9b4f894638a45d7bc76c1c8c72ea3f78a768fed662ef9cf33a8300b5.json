{"ast":null,"code":"export default {\n  name: 'AgGridTextTooltip',\n  data() {\n    return {\n      tooltip: '',\n      showTooltip: false\n    };\n  },\n  mounted() {\n    const gridApi = this.params.api;\n    const gui = gridApi.ctrlsService.gridCtrl.eGui;\n    if (this.params.location === 'header') {\n      const headerCellSelector = `div.ag-header-viewport div[col-id=\"${this.params.column.colId}\"] span.ag-header-cell-text`;\n      const cellDom = gui?.querySelector(headerCellSelector);\n      if (cellDom) {\n        const scrollWidth = cellDom.scrollWidth;\n        const clientWidth = cellDom.clientWidth;\n        const contentWidth = Number(clientWidth);\n        this.tooltipVisible(cellDom, scrollWidth, contentWidth);\n      }\n    } else {\n      const ellipsisCellSelector = `div[row-id=\"${this.params.node.id}\"] div[col-id=\"${this.params.column.colId}\"] .ag-text-ellipsis`;\n      const cellSelector = `div[row-id=\"${this.params.node.id}\"] div[col-id=\"${this.params.column.colId}\"]`;\n      const ellipsisCellDom = gui?.querySelector(ellipsisCellSelector);\n      const cellDom = gui?.querySelector(cellSelector);\n      if (ellipsisCellDom) {\n        this.gridBodyTooltip(ellipsisCellDom);\n      } else if (cellDom) {\n        this.gridBodyTooltip(cellDom);\n      }\n    }\n  },\n  methods: {\n    tooltipVisible(cellDom, scrollWidth, contentWidth) {\n      if (scrollWidth > contentWidth) {\n        this.tooltip = cellDom.innerHTML;\n        this.showTooltip = true;\n      }\n    },\n    gridBodyTooltip(cellDom) {\n      const scrollWidth = cellDom.scrollWidth;\n      const clientWidth = cellDom.clientWidth;\n      const paddingRight = getComputedStyle(cellDom).paddingRight?.replace('px', '');\n      const contentWidth = Number(clientWidth) + Number(paddingRight);\n      this.tooltipVisible(cellDom, scrollWidth, contentWidth);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tooltip","showTooltip","mounted","gridApi","params","api","gui","ctrlsService","gridCtrl","eGui","location","headerCellSelector","column","colId","cellDom","querySelector","scrollWidth","clientWidth","contentWidth","Number","tooltipVisible","ellipsisCellSelector","node","id","cellSelector","ellipsisCellDom","gridBodyTooltip","methods","innerHTML","paddingRight","getComputedStyle","replace"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/AgGridTextTooltip/src/index.vue"],"sourcesContent":["<template>\n  <div v-show=\"showTooltip\" class=\"ag-grid-text-tooltip\" v-html=\"tooltip\" />\n</template>\n<script>\n\nexport default {\n  name: 'AgGridTextTooltip',\n  data() {\n    return {\n      tooltip: '',\n      showTooltip: false\n    }\n  },\n  mounted() {\n    const gridApi = this.params.api\n\n    const gui = gridApi.ctrlsService.gridCtrl.eGui\n\n    if (this.params.location === 'header') {\n      const headerCellSelector = `div.ag-header-viewport div[col-id=\"${this.params.column.colId}\"] span.ag-header-cell-text`\n      const cellDom = gui?.querySelector(headerCellSelector)\n      if (cellDom) {\n        const scrollWidth = cellDom.scrollWidth\n        const clientWidth = cellDom.clientWidth\n        const contentWidth = Number(clientWidth)\n        this.tooltipVisible(cellDom, scrollWidth, contentWidth)\n      }\n    } else {\n      const ellipsisCellSelector = `div[row-id=\"${this.params.node.id}\"] div[col-id=\"${this.params.column.colId}\"] .ag-text-ellipsis`\n      const cellSelector = `div[row-id=\"${this.params.node.id}\"] div[col-id=\"${this.params.column.colId}\"]`\n\n      const ellipsisCellDom = gui?.querySelector(ellipsisCellSelector)\n      const cellDom = gui?.querySelector(cellSelector)\n\n      if (ellipsisCellDom) {\n        this.gridBodyTooltip(ellipsisCellDom)\n      } else if (cellDom) {\n        this.gridBodyTooltip(cellDom)\n      }\n    }\n  },\n  methods: {\n    tooltipVisible(cellDom, scrollWidth, contentWidth) {\n      if (scrollWidth > contentWidth) {\n        this.tooltip = cellDom.innerHTML\n        this.showTooltip = true\n      }\n    },\n    gridBodyTooltip(cellDom) {\n      const scrollWidth = cellDom.scrollWidth\n      const clientWidth = cellDom.clientWidth\n\n      const paddingRight = getComputedStyle(cellDom).paddingRight?.replace('px', '')\n      const contentWidth = Number(clientWidth) + Number(paddingRight)\n\n      this.tooltipVisible(cellDom, scrollWidth, contentWidth)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.ag-grid-text-tooltip {\n  padding: 6px 12px;\n}\n</style>\n"],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,GAAA;IAEA,MAAAC,GAAA,GAAAH,OAAA,CAAAI,YAAA,CAAAC,QAAA,CAAAC,IAAA;IAEA,SAAAL,MAAA,CAAAM,QAAA;MACA,MAAAC,kBAAA,8CAAAP,MAAA,CAAAQ,MAAA,CAAAC,KAAA;MACA,MAAAC,OAAA,GAAAR,GAAA,EAAAS,aAAA,CAAAJ,kBAAA;MACA,IAAAG,OAAA;QACA,MAAAE,WAAA,GAAAF,OAAA,CAAAE,WAAA;QACA,MAAAC,WAAA,GAAAH,OAAA,CAAAG,WAAA;QACA,MAAAC,YAAA,GAAAC,MAAA,CAAAF,WAAA;QACA,KAAAG,cAAA,CAAAN,OAAA,EAAAE,WAAA,EAAAE,YAAA;MACA;IACA;MACA,MAAAG,oBAAA,uBAAAjB,MAAA,CAAAkB,IAAA,CAAAC,EAAA,uBAAAnB,MAAA,CAAAQ,MAAA,CAAAC,KAAA;MACA,MAAAW,YAAA,uBAAApB,MAAA,CAAAkB,IAAA,CAAAC,EAAA,uBAAAnB,MAAA,CAAAQ,MAAA,CAAAC,KAAA;MAEA,MAAAY,eAAA,GAAAnB,GAAA,EAAAS,aAAA,CAAAM,oBAAA;MACA,MAAAP,OAAA,GAAAR,GAAA,EAAAS,aAAA,CAAAS,YAAA;MAEA,IAAAC,eAAA;QACA,KAAAC,eAAA,CAAAD,eAAA;MACA,WAAAX,OAAA;QACA,KAAAY,eAAA,CAAAZ,OAAA;MACA;IACA;EACA;EACAa,OAAA;IACAP,eAAAN,OAAA,EAAAE,WAAA,EAAAE,YAAA;MACA,IAAAF,WAAA,GAAAE,YAAA;QACA,KAAAlB,OAAA,GAAAc,OAAA,CAAAc,SAAA;QACA,KAAA3B,WAAA;MACA;IACA;IACAyB,gBAAAZ,OAAA;MACA,MAAAE,WAAA,GAAAF,OAAA,CAAAE,WAAA;MACA,MAAAC,WAAA,GAAAH,OAAA,CAAAG,WAAA;MAEA,MAAAY,YAAA,GAAAC,gBAAA,CAAAhB,OAAA,EAAAe,YAAA,EAAAE,OAAA;MACA,MAAAb,YAAA,GAAAC,MAAA,CAAAF,WAAA,IAAAE,MAAA,CAAAU,YAAA;MAEA,KAAAT,cAAA,CAAAN,OAAA,EAAAE,WAAA,EAAAE,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}