{"ast":null,"code":"import '../../../../lib/styles/components/SearchTagGroup.scss';\nexport default {\n  name: 'SearchTagGroup',\n  props: {\n    list: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    option: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      defaultOption: {\n        label: 'label' // label值的key\n      },\n\n      scrollWidth: 0,\n      // 记录index触发计算属性重新计算\n      scorllFlag: false,\n      // 是否出现滚动按钮\n      tagTimer: null,\n      // tag防抖定时器\n      tagScrollLeft: 0 // 当前滚动条位置\n    };\n  },\n\n  computed: {\n    // 左侧按钮是否可点\n    tagLeftDisable_() {\n      return this.tagScrollLeft < 1;\n    },\n    // 右侧按钮是否可点\n    tagRightDisable_() {\n      const tagScrollLeft = this.tagScrollLeft;\n      const el = this.$refs.scrollView;\n      if (!el) return false;\n      const scrollWidth = this.scrollWidth - el.clientWidth; // 可滚动的最大距离\n      return scrollWidth - tagScrollLeft < 1;\n    },\n    option_() {\n      return Object.assign({}, this.defaultOption, this.option);\n    }\n  },\n  watch: {\n    // 监听tag变化判断是否出现滚动条\n    list() {\n      setTimeout(() => {\n        this.resizeTagWidth();\n      }, 500);\n    }\n  },\n  methods: {\n    handleClick(item, index) {\n      this.$emit('click', item, index);\n    },\n    resizeTagWidth() {\n      const el = this.$refs.scrollView;\n      if (!el) return;\n      const clientWidth = el.clientWidth;\n      const scrollWidth = el.scrollWidth;\n      this.tagScrollLeft = el.scrollLeft;\n      this.scrollWidth = scrollWidth;\n      this.scorllFlag = scrollWidth > clientWidth;\n    },\n    // 监听滚动\n    onTagScroll(e) {\n      if (this.tagTimer) {\n        clearTimeout(this.tagTimer);\n      }\n      this.tagTimer = setTimeout(() => {\n        const el = this.$refs.scrollView;\n        this.tagScrollLeft = el.scrollLeft;\n      }, 50);\n    },\n    // 左右滚动\n    handleMoveTag(type) {\n      const el = this.$refs.scrollView;\n      let move = el.clientWidth * 0.4;\n      if (type === 'left') {\n        move = -move;\n      }\n      this.scrollTo({\n        el,\n        move\n      });\n    },\n    // 基于当前位置滚动一段距离\n    scrollTo({\n      el = null,\n      move = 0,\n      duration = 500\n    } = {}) {\n      if (!el) return;\n      let strTime = 0;\n      const scrollLeft = el.scrollLeft; // 起始位置\n      const offsetLeft = scrollLeft + move; // 要移动到的位置\n      const scrollFrame = timer => {\n        if (strTime === 0) {\n          strTime = timer;\n        }\n        const elapsed = timer - strTime;\n        const params = {\n          scrollLeft,\n          offsetLeft,\n          elapsed,\n          duration\n        };\n        const offset = this.getOffset(params);\n        if (elapsed <= 500) {\n          window.requestAnimationFrame(scrollFrame);\n          el.scrollTo(offset, 0);\n        }\n      };\n      window.requestAnimationFrame(scrollFrame);\n    },\n    getOffset(data) {\n      const {\n        scrollLeft,\n        offsetLeft,\n        elapsed,\n        duration\n      } = data;\n      let offset;\n      // 判断左右滚动\n      if (scrollLeft > offsetLeft) {\n        offset = scrollLeft - elapsed / duration * (scrollLeft - offsetLeft);\n      } else {\n        offset = scrollLeft + elapsed / duration * (offsetLeft - scrollLeft);\n      }\n      return offset;\n    },\n    handleClose(value, index) {\n      this.$emit('onClose', {\n        value,\n        index\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","props","list","type","Array","default","option","Object","data","defaultOption","label","scrollWidth","scorllFlag","tagTimer","tagScrollLeft","computed","tagLeftDisable_","tagRightDisable_","el","$refs","scrollView","clientWidth","option_","assign","watch","setTimeout","resizeTagWidth","methods","handleClick","item","index","$emit","scrollLeft","onTagScroll","e","clearTimeout","handleMoveTag","move","scrollTo","duration","strTime","offsetLeft","scrollFrame","timer","elapsed","params","offset","getOffset","window","requestAnimationFrame","handleClose","value"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/SearchTagGroup/src/index.vue"],"sourcesContent":["<template>\n  <div\n    class=\"flexCC search-tag-container\"\n    :class=\"{ 'no-scroll': !scorllFlag }\"\n    @click.stop\n  >\n    <el-button\n      type=\"secondary\"\n      class=\"search-tag-btn\"\n      icon=\"el-icon-d-arrow-left\"\n      :disabled=\"tagLeftDisable_\"\n      @click=\"handleMoveTag('left')\"\n    />\n    <div class=\"search-form-tag\">\n      <div\n        ref=\"scrollView\"\n        v-resize=\"resizeTagWidth\"\n        class=\"search-form-scroll\"\n        @scroll=\"onTagScroll\"\n      >\n        <el-tag\n          v-for=\"(item, index) in list\"\n          :key=\"index\"\n          size=\"mini\"\n          :closable=\"!item.disabled && !item.required\"\n          @close=\"handleClose(item,index)\"\n        >\n          <div class=\"tag-value\">{{ item[option_.label] }}</div>\n        </el-tag>\n      </div>\n    </div>\n    <el-button\n      type=\"secondary\"\n      class=\"search-tag-btn\"\n      icon=\"el-icon-d-arrow-right\"\n      :disabled=\"tagRightDisable_\"\n      @click=\"handleMoveTag('right')\"\n    />\n  </div>\n</template>\n\n<script>\nimport '../../../../lib/styles/components/SearchTagGroup.scss'\nexport default {\n  name: 'SearchTagGroup',\n  props: {\n    list: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    option: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      defaultOption: {\n        label: 'label' // label值的key\n      },\n      scrollWidth: 0, // 记录index触发计算属性重新计算\n      scorllFlag: false, // 是否出现滚动按钮\n      tagTimer: null, // tag防抖定时器\n      tagScrollLeft: 0 // 当前滚动条位置\n    }\n  },\n  computed: {\n    // 左侧按钮是否可点\n    tagLeftDisable_() {\n      return this.tagScrollLeft < 1\n    },\n    // 右侧按钮是否可点\n    tagRightDisable_() {\n      const tagScrollLeft = this.tagScrollLeft\n      const el = this.$refs.scrollView\n      if (!el) return false\n      const scrollWidth = this.scrollWidth - el.clientWidth // 可滚动的最大距离\n      return scrollWidth - tagScrollLeft < 1\n    },\n    option_() {\n      return Object.assign({}, this.defaultOption, this.option)\n    }\n  },\n  watch: {\n    // 监听tag变化判断是否出现滚动条\n    list() {\n      setTimeout(() => {\n        this.resizeTagWidth()\n      }, 500)\n    }\n  },\n  methods: {\n    handleClick(item, index) {\n      this.$emit('click', item, index)\n    },\n    resizeTagWidth() {\n      const el = this.$refs.scrollView\n      if (!el) return\n      const clientWidth = el.clientWidth\n      const scrollWidth = el.scrollWidth\n      this.tagScrollLeft = el.scrollLeft\n      this.scrollWidth = scrollWidth\n      this.scorllFlag = scrollWidth > clientWidth\n    },\n    // 监听滚动\n    onTagScroll(e) {\n      if (this.tagTimer) {\n        clearTimeout(this.tagTimer)\n      }\n      this.tagTimer = setTimeout(() => {\n        const el = this.$refs.scrollView\n        this.tagScrollLeft = el.scrollLeft\n      }, 50)\n    },\n    // 左右滚动\n    handleMoveTag(type) {\n      const el = this.$refs.scrollView\n      let move = el.clientWidth * 0.4\n      if (type === 'left') {\n        move = -move\n      }\n      this.scrollTo({ el, move })\n    },\n    // 基于当前位置滚动一段距离\n    scrollTo({ el = null, move = 0, duration = 500 } = {}) {\n      if (!el) return\n      let strTime = 0\n      const scrollLeft = el.scrollLeft // 起始位置\n      const offsetLeft = scrollLeft + move // 要移动到的位置\n      const scrollFrame = (timer) => {\n        if (strTime === 0) {\n          strTime = timer\n        }\n        const elapsed = timer - strTime\n        const params = { scrollLeft, offsetLeft, elapsed, duration }\n        const offset = this.getOffset(params)\n        if (elapsed <= 500) {\n          window.requestAnimationFrame(scrollFrame)\n          el.scrollTo(offset, 0)\n        }\n      }\n      window.requestAnimationFrame(scrollFrame)\n    },\n    getOffset(data) {\n      const { scrollLeft, offsetLeft, elapsed, duration } = data\n      let offset\n      // 判断左右滚动\n      if (scrollLeft > offsetLeft) {\n        offset = scrollLeft - (elapsed / duration) * (scrollLeft - offsetLeft)\n      } else {\n        offset = scrollLeft + (elapsed / duration) * (offsetLeft - scrollLeft)\n      }\n      return offset\n    },\n    handleClose(value, index) {\n      this.$emit('onClose', { value, index })\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}