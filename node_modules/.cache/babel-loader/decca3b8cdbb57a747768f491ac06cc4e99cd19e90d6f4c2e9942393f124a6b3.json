{"ast":null,"code":"import _ from \"lodash\";\nimport packageConfig from \"../package.json\";\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\";\n    this.plusCommonAnalysisKey = \"plusAnalyticCache\";\n    this.exceptionThrowEventName = \"exception_throw\"; // 异常事件上报的名称\n    this.initParam = params;\n    this.resetDefaultParams();\n    this.setSystemPlateformType(params.type);\n    this.isInit = Boolean(this.getCacheTime());\n    this.getVolcegineProps();\n    this.isSuccessInit = false;\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers uni-app pages.json 里的pages数组\n   * @param {*} tabBar uni-app pages.json 里的tarBar配置里的list数组\n   */\n  init(rouers, tabBar) {\n    try {\n      if (!this.getIsLaunch() && this.systemPlateformType === 2) {\n        const nowTime = new Date().getTime();\n        this.setCacheTime(nowTime);\n      }\n      this.updateRouter(rouers, tabBar);\n      if (this.systemPlateformType === 1) {\n        this.setCacheVisitWebUrl(window.location.href);\n      }\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0]);\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers);\n          this.setCacheVisitUrl(currentUrl);\n        }\n      }\n      this.isSuccessInit = true;\n    } catch (e) {\n      this.isSuccessInit = false;\n      console.warn(\"火山引擎SDK 初始化错误: \");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    try {\n      let volcengineProps;\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走 localStorage\n        volcengineProps = localStorage.getItem(this.cacheRoutersKey);\n      } else {\n        // 小程序 和 App 走 getStorageSync\n        volcengineProps = uni.getStorageSync(this.cacheRoutersKey);\n      }\n      if (!volcengineProps) {\n        volcengineProps = {};\n      } else {\n        volcengineProps = JSON.parse(volcengineProps);\n      }\n      const routeInfo = rouers;\n      const routeInfoRouter = this.forEachArr(routeInfo, 0);\n      const tabbarInfo = tabBar;\n      const tabRouter = this.forEachArr(tabbarInfo, 1);\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      };\n      this.setVolcenginePropsCache();\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    try {\n      const commonAttr = this.commonAttr;\n      const emptyObject = {};\n      commonAttr.forEach(item => {\n        emptyObject[item] = this.nullProp;\n        if (!this.volcengineProps[path]) {\n          this.volcengineProps[path] = {};\n        }\n        const pathItem = this.volcengineProps[path];\n        this.volcengineProps[path][item] = pathItem[item] || this.nullProp;\n      });\n      if (!this.initParam.routerObject) {\n        const sourceNameObject = this.getFromQueryNameContent(path);\n        this.volcengineProps[path] = {\n          ...this.volcengineProps[path],\n          ...sourceNameObject\n        };\n      }\n      return this.volcengineProps[path] || emptyObject;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    try {\n      const volcengineProps = {};\n      if (Array.isArray(arr)) {\n        if (arr.length > 0) {\n          arr.forEach(item => {\n            const path = type === 0 ? item.path : item.pagePath;\n            volcengineProps[\"/\" + path] = {};\n            volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path;\n            volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp;\n            // 先默认为空，等对应的子类那边触发路由变化的时候再改\n            const meta = item.meta || item.style;\n            const metaKeys = meta ? Object.keys(meta) : [];\n            if (metaKeys.length > 0) {\n              metaKeys.forEach(keyName => {\n                if (this.commonAttrRealation[keyName]) {\n                  const volcengineKeyName = this.commonAttrRealation[keyName];\n                  volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName];\n                }\n              });\n            }\n            const versionInfo = this.getVersionInfo();\n            if (versionInfo) {\n              volcengineProps[\"/\" + path] = {\n                ...volcengineProps[\"/\" + path],\n                ...versionInfo\n              };\n            }\n            // 存入meta 字段\n            const itemMeta = item.meta;\n            const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : [];\n            if (itemMetaKeys.length > 0) {\n              itemMetaKeys.forEach(itemInfo => {\n                if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                  const volcengineFinalKey = itemInfo.replace(/[A-Z]/g, key => `_${key.toLowerCase()}`);\n                  volcengineProps[\"/\" + path][volcengineFinalKey] = itemMeta[itemInfo];\n                }\n              });\n            }\n          });\n        }\n      }\n      return volcengineProps;\n    } catch (e) {\n      return {};\n    }\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\";\n    // 默认的空值\n    this.commonAttr = [\"custom_page_title\", \"custom_page_url_path\",\n    // /pages/xxx\n    \"custom_page_url\",\n    // https\n    \"sub_app_name\", \"custom_app_version_name\" // 应用当前版本\n    ];\n    // 公共属性\n    this.isVolcengine = true;\n    // 是否是火山引擎环境\n    this.isError = false;\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\";\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\";\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\";\n    this.catcheVisitWebUrlKey = \"volcengineLastWebUrl\";\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\";\n    this.cacheOldRouterTitleKey = \"volcengineOldRouterTitle\";\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\";\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    };\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = [];\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\";\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams) ? this.initParam.eventQueryParams : [];\n    this.plusEventParamCacheKey = \"volcenginePlusEventParamCache\";\n    this.scrollEventCacheKey = \"volcengineScrollEventCache\";\n    this.isLaunchCacheKey = \"volcengineIsLaunchCache\";\n    this.isHideCacheKey = \"volcengineIsHideCache\";\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web 2-小程序\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0; // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    try {\n      if (this.systemPlateformType === 1) {\n        localStorage.removeItem(this.commonAnalysisKey);\n      } else {\n        uni.removeStorageSync(this.commonAnalysisKey);\n      }\n    } catch (e) {}\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n      const cacheResult = this.getStorageByPath(path, 0);\n      return cacheResult;\n    } catch (e) {\n      return 0;\n    }\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n      this.setStorageByPath(path, time);\n    } catch (e) {}\n  }\n\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n\n  getCacheVisitUrl() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n      const cacheResult = this.getStorageByPath(path, \"\");\n      return cacheResult;\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  /**\n   * 获取上一次的Web路由完整的地址\n   * @returns\n   */\n  getCacheVisitWebUrl() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey;\n      const cacheResult = this.getStorageByPath(path, \"\");\n      return cacheResult;\n    } catch (e) {\n      return \"\";\n    }\n  }\n  getCacheOldRouterTitle() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey;\n      const cacheResult = this.getStorageByPath(path, \"\");\n      return cacheResult;\n    } catch (e) {\n      return \"\";\n    }\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n\n  setCacheVisitUrl(url) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n      this.setStorageByPath(path, url);\n    } catch (e) {}\n  }\n  setCacheOldRouterTitle(title) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey;\n      this.setStorageByPath(path, title);\n    } catch (e) {}\n  }\n  /**\n   * 设置上一次的完整的Web路由访问地址\n   * @returns\n   */\n\n  setCacheVisitWebUrl(url) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey;\n      this.setStorageByPath(path, url);\n    } catch (e) {}\n  }\n  /**\n   * 获取上一次H5的请求参数\n   */\n  getWebviewCache() {\n    try {\n      const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey;\n      const cacheResult = this.getStorageByPath(path, {}, true);\n      return cacheResult;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   *\n   * @param {*} path\n   * @returns\n   */\n  setWebviewCache(param) {\n    try {\n      const time = this.getCacheTime();\n      let finalParam = {};\n      finalParam[this.cacheTimeKey] = time;\n      finalParam = {\n        ...finalParam,\n        ...param\n      };\n      const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey;\n      this.setStorageByPath(path, finalParam, true);\n    } catch (e) {}\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    try {\n      const currentOptions = this.getCurrentOptions(path);\n      let sourceNameObject = {};\n      const cacheSourceNameObject = this.getFromQueryNameCache();\n      const fromQueryNameArr = this.fromQueryNameArr;\n      let isNeedChangeCache = false;\n      if (fromQueryNameArr.length) {\n        fromQueryNameArr.forEach(item => {\n          const itemResult = currentOptions[item] || cacheSourceNameObject[item];\n          const changeCondition = currentOptions[item] && cacheSourceNameObject[item] && currentOptions[item] !== cacheSourceNameObject[item];\n          const emptyChangeCondition = currentOptions[item] && !cacheSourceNameObject[item];\n          // 当缓存和链接有不一致的时候更新缓存\n          if (changeCondition || emptyChangeCondition) {\n            isNeedChangeCache = true;\n          }\n          sourceNameObject[item] = itemResult || this.nullProp;\n        });\n        // 当有传入queryName 但无缓存的时候\n        if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n          this.setFromQueryNameCache(sourceNameObject);\n        }\n      } else {\n        sourceNameObject = cacheSourceNameObject;\n      }\n      return sourceNameObject;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n      const cacheResult = this.getStorageByPath(path, {});\n      return cacheResult;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n      this.setStorageByPath(path, source);\n    } catch (e) {}\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n      let volcengineProps = this.getStorageByPath(path, null);\n      if (!volcengineProps) {\n        volcengineProps = {};\n      } else {\n        volcengineProps = JSON.parse(volcengineProps);\n      }\n      this.volcengineProps = volcengineProps;\n    } catch (e) {}\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    try {\n      const volcenginePropsCache = JSON.stringify(this.volcengineProps);\n      const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n      this.setStorageByPath(path, volcenginePropsCache);\n    } catch (e) {}\n  }\n  getScrollEventCache() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey;\n      let scrollEventCache = this.getStorageByPath(path, null);\n      if (!scrollEventCache) {\n        scrollEventCache = {};\n      } else {\n        scrollEventCache = JSON.parse(scrollEventCache);\n      }\n      return scrollEventCache;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   * 设置滚动列表的相关参数缓存\n   * 缓存结构如下： {\n   *  anchorName: [], //锚点名称\n   *  scrollTime:0 // 滚动开始的时间,\n   *  anchorWrapper:'', // 锚点的选取范围\n   *  scrollThreshold:'', // 停留时间上报的最小值，默认只要发生停留就上报\n   *  scrollDistance:'', // 滚动的锚点上报范围\n   *  scrollTop: '', // 滚动条的位置\n   * }\n   */\n  setScrollEventCache(scrollEventCache) {\n    try {\n      const scrollEventCacheStr = JSON.stringify(scrollEventCache);\n      const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey;\n      this.setStorageByPath(path, scrollEventCacheStr);\n    } catch (e) {}\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n  setCurrentRouterInfo(routerParam) {\n    try {\n      const volcengineRouterInfoCache = JSON.stringify(routerParam);\n      this.setStorageByPath(this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey, volcengineRouterInfoCache);\n    } catch (e) {}\n  }\n  getCurrentRouterInfo() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey;\n      let routerInfo = this.getStorageByPath(path, null);\n      if (!routerInfo) {\n        routerInfo = {};\n      } else {\n        routerInfo = JSON.parse(routerInfo);\n      }\n      return routerInfo;\n    } catch (e) {\n      return {};\n    }\n  }\n  getIsLaunch() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey;\n      return this.getStorageByPath(path, false);\n    } catch (e) {\n      return false;\n    }\n  }\n  setIsLaunch(isLaunch) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey;\n      this.setStorageByPath(path, isLaunch);\n    } catch (e) {}\n  }\n  setIsHide(isHide) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey;\n      return this.setStorageByPath(path, isHide);\n    } catch (e) {\n      return false;\n    }\n  }\n  getIsHide() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey;\n      return this.getStorageByPath(path, false);\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages;\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    try {\n      const page = getCurrentPages().map(e => `/${e.route}`).reverse(); // 获取页面栈\n      return page;\n    } catch (e) {\n      return [];\n    }\n  }\n  getCurrentOptions(path) {\n    let options = {};\n    try {\n      if (!this.initParam.uniPluginObject) {\n        // uni-app\n        try {\n          const currentUrl = window.location.href;\n          options = this.getUrlParams(currentUrl);\n        } catch (e) {}\n      } else {\n        const currentArr = getCurrentPages().filter(el => {\n          return \"/\" + el.route === path;\n        });\n        const current = currentArr.length ? currentArr[0] : [];\n        options = current.options || {};\n      }\n    } catch (e) {}\n    return options;\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    try {\n      const urlStr = url.split(\"?\")[1];\n      // 创建空对象存储参数\n      const obj = {};\n      // 再通过 & 将每一个参数单独分割出来\n      const paramsArr = urlStr.split(\"&\");\n      for (let i = 0, len = paramsArr.length; i < len; i++) {\n        // 再通过 = 将每一个参数分割为 key:value 的形式\n        const arr = paramsArr[i].split(\"=\");\n        obj[arr[0]] = arr[1];\n      }\n      return obj;\n    } catch (e) {\n      return {};\n    }\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined, isPlus = false) {\n    try {\n      path = typeof path === \"string\" ? path.split(\".\") : path;\n      path = path.filter(x => x);\n      // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n      let lsValue;\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走 localStorage\n        lsValue = localStorage.getItem(path[0]) || undefined;\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue);\n          } catch (e) {\n            lsValue = {};\n          }\n        }\n      } else {\n        if (isPlus) {\n          lsValue = plus.storage.getItem(path[0]) || undefined;\n          if (lsValue) {\n            try {\n              lsValue = JSON.parse(lsValue);\n            } catch (e) {\n              lsValue = {};\n            }\n          }\n        } else {\n          lsValue = uni.getStorageSync(path[0]) || undefined;\n        }\n      }\n      // 若 path 只有一级，直接读取\n      const valueByPath = lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue;\n      const result =\n      // eslint-disable-next-line valid-typeof\n      !valueByPath && typeof nullType !== undefined ? nullType : valueByPath;\n      return result;\n    } catch (e) {\n      return nullType || this.nullProp;\n    }\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value, isPlus = false) {\n    try {\n      path = typeof path === \"string\" ? path.split(\".\") : path;\n      path = path.filter(x => x);\n      let result = \"\";\n      if (path.length > 1) {\n        // 若 path 不只一级，需要取出按 key 路径重新赋值\n        let lsValue;\n        if (this.systemPlateformType === 1) {\n          // PC 和 H5 走localStorage\n          lsValue = localStorage.getItem(path[0]);\n          if (lsValue) {\n            try {\n              lsValue = JSON.parse(lsValue);\n            } catch (e) {\n              lsValue = {};\n            }\n          } else {\n            lsValue = {};\n          }\n        } else {\n          lsValue = uni.getStorageSync(path[0]) || {};\n        }\n        result = _.set(lsValue, path.slice(1), value);\n      } else if (path.length === 1) {\n        // 若 path 只有一级，直接存入\n        result = value;\n      }\n      if (this.systemPlateformType === 1) {\n        if (isPlus) {\n          plus.storage.setItem(path[0], JSON.stringify(result));\n        } else {\n          localStorage.setItem(path[0], JSON.stringify(result));\n        }\n      } else {\n        uni.setStorageSync(path[0], result);\n      }\n      return !!result;\n    } catch (e) {\n      return false;\n    }\n  }\n  getNowPath(routeInfo) {\n    let currentUrl;\n    try {\n      const routerArr = routeInfo;\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href;\n        routerArr.forEach(item => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path;\n          }\n        });\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path;\n      }\n    } catch (e) {\n      currentUrl = \"/\";\n    }\n    return currentUrl;\n  }\n  getAppVersion() {\n    try {\n      const versionInfo = this.getVersionInfo();\n      return {\n        user_custom_app_version_name: versionInfo[\"custom_app_version_name\"]\n      };\n    } catch (e) {\n      return {\n        user_custom_app_version_name: \"\"\n      };\n    }\n  }\n  /**\n   * 获取sdk 版本信息\n   * @returns\n   */\n\n  getSdkVersion() {\n    try {\n      const versionInfo = this.getVersionInfo();\n      return {\n        user_analytics_sdk_version_name: versionInfo[\"analytics_sdk_version_name\"]\n      };\n    } catch (e) {\n      return {\n        user_analytics_sdk_version_name: \"\"\n      };\n    }\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      const versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      };\n      const initParam = this.initParam;\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion;\n        versionInfo.custom_app_version_name = appWgtVersion;\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\";\n        versionInfo.custom_app_version_name = packageVersion;\n      } else {\n        // H5\n\n        const version = uni.getSystemInfoSync().appWgtVersion || uni.getSystemInfoSync().appVersion;\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version;\n        if (!version) {\n          versionInfo.custom_app_version_name = UNI_VERSION.versionName || UNI_VERSION.version;\n        }\n      }\n      return versionInfo;\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      };\n    }\n  }\n  checkUrlValid(url) {\n    try {\n      const reg = /http[s]?:\\/\\/[\\w.]+[\\w\\/]*[\\w.]*\\??[\\w=&\\+\\%]*/;\n      return reg.test(url);\n    } catch (e) {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["_","packageConfig","Volcengine","constructor","params","commonAnalysisKey","plusCommonAnalysisKey","exceptionThrowEventName","initParam","resetDefaultParams","setSystemPlateformType","type","isInit","Boolean","getCacheTime","getVolcegineProps","isSuccessInit","init","rouers","tabBar","getIsLaunch","systemPlateformType","nowTime","Date","getTime","setCacheTime","updateRouter","setCacheVisitWebUrl","window","location","href","pages","setCacheVisitUrl","getCacheVisitUrl","currentUrl","getNowPath","e","console","warn","volcengineProps","localStorage","getItem","cacheRoutersKey","uni","getStorageSync","JSON","parse","routeInfo","routeInfoRouter","forEachArr","tabbarInfo","tabRouter","setVolcenginePropsCache","getCommonAttr","path","commonAttr","emptyObject","forEach","item","nullProp","pathItem","routerObject","sourceNameObject","getFromQueryNameContent","arr","Array","isArray","length","pagePath","meta","style","metaKeys","Object","keys","keyName","commonAttrRealation","volcengineKeyName","versionInfo","getVersionInfo","itemMeta","itemMetaKeys","itemInfo","includes","volcengineFinalKey","replace","key","toLowerCase","isVolcengine","isError","cacheTimeKey","catcheVisitUrlKey","catcheVisitWebUrlKey","catcheVersionKey","cacheOldRouterTitleKey","cacheRouterInfoKey","pageName","subAppName","navigationBarTitleText","fromQueryNameCacheKey","fromQueryNameArr","eventQueryParams","plusEventParamCacheKey","scrollEventCacheKey","isLaunchCacheKey","isHideCacheKey","removeCache","removeItem","removeStorageSync","cacheResult","getStorageByPath","time","setStorageByPath","getCacheVisitWebUrl","getCacheOldRouterTitle","url","setCacheOldRouterTitle","title","getWebviewCache","setWebviewCache","param","finalParam","currentOptions","getCurrentOptions","cacheSourceNameObject","getFromQueryNameCache","isNeedChangeCache","itemResult","changeCondition","emptyChangeCondition","setFromQueryNameCache","source","volcenginePropsCache","stringify","getScrollEventCache","scrollEventCache","setScrollEventCache","scrollEventCacheStr","setCurrentRouterInfo","routerParam","volcengineRouterInfoCache","getCurrentRouterInfo","routerInfo","setIsLaunch","isLaunch","setIsHide","isHide","getIsHide","changeCurrentPage","getCurrentPagesArr","page","getCurrentPages","map","route","reverse","options","uniPluginObject","getUrlParams","currentArr","filter","el","current","urlStr","split","obj","paramsArr","i","len","nullType","undefined","isPlus","x","lsValue","plus","storage","valueByPath","get","slice","result","value","set","setItem","setStorageSync","routerArr","nowFullPath","indexOf","getAppVersion","user_custom_app_version_name","getSdkVersion","user_analytics_sdk_version_name","analytics_sdk_version_name","version","appWgtVersion","getSystemInfoSync","custom_app_version_name","packageVersion","WEB_VERSION","appVersion","UNI_VERSION","versionName","checkUrlValid","reg","test"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-analytics-sdk/common/index.js"],"sourcesContent":["import _ from \"lodash\"\nimport packageConfig from \"../package.json\"\n\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\"\n    this.plusCommonAnalysisKey = \"plusAnalyticCache\"\n    this.exceptionThrowEventName = \"exception_throw\" // 异常事件上报的名称\n    this.initParam = params\n    this.resetDefaultParams()\n    this.setSystemPlateformType(params.type)\n    this.isInit = Boolean(this.getCacheTime())\n    this.getVolcegineProps()\n    this.isSuccessInit = false\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers uni-app pages.json 里的pages数组\n   * @param {*} tabBar uni-app pages.json 里的tarBar配置里的list数组\n   */\n  init(rouers, tabBar) {\n    try {\n      if (!this.getIsLaunch() && this.systemPlateformType === 2) {\n        const nowTime = new Date().getTime()\n        this.setCacheTime(nowTime)\n      }\n      this.updateRouter(rouers, tabBar)\n      if (this.systemPlateformType === 1) {\n        this.setCacheVisitWebUrl(window.location.href)\n      }\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0])\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers)\n          this.setCacheVisitUrl(currentUrl)\n        }\n      }\n      this.isSuccessInit = true\n    } catch (e) {\n      this.isSuccessInit = false\n      console.warn(\"火山引擎SDK 初始化错误: \")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    try {\n      let volcengineProps\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走 localStorage\n        volcengineProps = localStorage.getItem(this.cacheRoutersKey)\n      } else {\n        // 小程序 和 App 走 getStorageSync\n        volcengineProps = uni.getStorageSync(this.cacheRoutersKey)\n      }\n      if (!volcengineProps) {\n        volcengineProps = {}\n      } else {\n        volcengineProps = JSON.parse(volcengineProps)\n      }\n      const routeInfo = rouers\n      const routeInfoRouter = this.forEachArr(routeInfo, 0)\n      const tabbarInfo = tabBar\n      const tabRouter = this.forEachArr(tabbarInfo, 1)\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      }\n      this.setVolcenginePropsCache()\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    try {\n      const commonAttr = this.commonAttr\n      const emptyObject = {}\n      commonAttr.forEach((item) => {\n        emptyObject[item] = this.nullProp\n        if (!this.volcengineProps[path]) {\n          this.volcengineProps[path] = {}\n        }\n        const pathItem = this.volcengineProps[path]\n        this.volcengineProps[path][item] = pathItem[item] || this.nullProp\n      })\n      if (!this.initParam.routerObject) {\n        const sourceNameObject = this.getFromQueryNameContent(path)\n        this.volcengineProps[path] = {\n          ...this.volcengineProps[path],\n          ...sourceNameObject\n        }\n      }\n      return this.volcengineProps[path] || emptyObject\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    try {\n      const volcengineProps = {}\n      if (Array.isArray(arr)) {\n        if (arr.length > 0) {\n          arr.forEach((item) => {\n            const path = type === 0 ? item.path : item.pagePath\n            volcengineProps[\"/\" + path] = {}\n            volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path\n            volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp\n            // 先默认为空，等对应的子类那边触发路由变化的时候再改\n            const meta = item.meta || item.style\n            const metaKeys = meta ? Object.keys(meta) : []\n            if (metaKeys.length > 0) {\n              metaKeys.forEach((keyName) => {\n                if (this.commonAttrRealation[keyName]) {\n                  const volcengineKeyName = this.commonAttrRealation[keyName]\n                  volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName]\n                }\n              })\n            }\n            const versionInfo = this.getVersionInfo()\n            if (versionInfo) {\n              volcengineProps[\"/\" + path] = {\n                ...volcengineProps[\"/\" + path],\n                ...versionInfo\n              }\n            }\n            // 存入meta 字段\n            const itemMeta = item.meta\n            const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : []\n            if (itemMetaKeys.length > 0) {\n              itemMetaKeys.forEach((itemInfo) => {\n                if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                  const volcengineFinalKey = itemInfo.replace(\n                    /[A-Z]/g,\n                    (key) => `_${key.toLowerCase()}`\n                  )\n                  volcengineProps[\"/\" + path][volcengineFinalKey] =\n                    itemMeta[itemInfo]\n                }\n              })\n            }\n          })\n        }\n      }\n      return volcengineProps\n    } catch (e) {\n      return {}\n    }\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\"\n    // 默认的空值\n    this.commonAttr = [\n      \"custom_page_title\",\n      \"custom_page_url_path\", // /pages/xxx\n      \"custom_page_url\", // https\n      \"sub_app_name\",\n      \"custom_app_version_name\" // 应用当前版本\n    ]\n    // 公共属性\n    this.isVolcengine = true\n    // 是否是火山引擎环境\n    this.isError = false\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\"\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\"\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\"\n    this.catcheVisitWebUrlKey = \"volcengineLastWebUrl\"\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\"\n    this.cacheOldRouterTitleKey = \"volcengineOldRouterTitle\"\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\"\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    }\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = []\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\"\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams)\n      ? this.initParam.eventQueryParams\n      : []\n    this.plusEventParamCacheKey = \"volcenginePlusEventParamCache\"\n    this.scrollEventCacheKey = \"volcengineScrollEventCache\"\n    this.isLaunchCacheKey = \"volcengineIsLaunchCache\"\n    this.isHideCacheKey = \"volcengineIsHideCache\"\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web 2-小程序\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0 // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    try {\n      if (this.systemPlateformType === 1) {\n        localStorage.removeItem(this.commonAnalysisKey)\n      } else {\n        uni.removeStorageSync(this.commonAnalysisKey)\n      }\n    } catch (e) {}\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n      const cacheResult = this.getStorageByPath(path, 0)\n      return cacheResult\n    } catch (e) {\n      return 0\n    }\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n      this.setStorageByPath(path, time)\n    } catch (e) {}\n  }\n\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n\n  getCacheVisitUrl() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n      const cacheResult = this.getStorageByPath(path, \"\")\n      return cacheResult\n    } catch (e) {\n      return \"\"\n    }\n  }\n\n  /**\n   * 获取上一次的Web路由完整的地址\n   * @returns\n   */\n  getCacheVisitWebUrl() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey\n      const cacheResult = this.getStorageByPath(path, \"\")\n      return cacheResult\n    } catch (e) {\n      return \"\"\n    }\n  }\n  getCacheOldRouterTitle() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey\n      const cacheResult = this.getStorageByPath(path, \"\")\n      return cacheResult\n    } catch (e) {\n      return \"\"\n    }\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n\n  setCacheVisitUrl(url) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n      this.setStorageByPath(path, url)\n    } catch (e) {}\n  }\n\n  setCacheOldRouterTitle(title) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey\n      this.setStorageByPath(path, title)\n    } catch (e) {}\n  }\n  /**\n   * 设置上一次的完整的Web路由访问地址\n   * @returns\n   */\n\n  setCacheVisitWebUrl(url) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey\n      this.setStorageByPath(path, url)\n    } catch (e) {}\n  }\n  /**\n   * 获取上一次H5的请求参数\n   */\n  getWebviewCache() {\n    try {\n      const path =\n        this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey\n      const cacheResult = this.getStorageByPath(path, {}, true)\n      return cacheResult\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   *\n   * @param {*} path\n   * @returns\n   */\n  setWebviewCache(param) {\n    try {\n      const time = this.getCacheTime()\n      let finalParam = {}\n      finalParam[this.cacheTimeKey] = time\n      finalParam = {\n        ...finalParam,\n        ...param\n      }\n      const path =\n        this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey\n      this.setStorageByPath(path, finalParam, true)\n    } catch (e) {}\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    try {\n      const currentOptions = this.getCurrentOptions(path)\n      let sourceNameObject = {}\n      const cacheSourceNameObject = this.getFromQueryNameCache()\n      const fromQueryNameArr = this.fromQueryNameArr\n      let isNeedChangeCache = false\n      if (fromQueryNameArr.length) {\n        fromQueryNameArr.forEach((item) => {\n          const itemResult = currentOptions[item] || cacheSourceNameObject[item]\n          const changeCondition =\n            currentOptions[item] &&\n            cacheSourceNameObject[item] &&\n            currentOptions[item] !== cacheSourceNameObject[item]\n          const emptyChangeCondition =\n            currentOptions[item] && !cacheSourceNameObject[item]\n          // 当缓存和链接有不一致的时候更新缓存\n          if (changeCondition || emptyChangeCondition) {\n            isNeedChangeCache = true\n          }\n          sourceNameObject[item] = itemResult || this.nullProp\n        })\n        // 当有传入queryName 但无缓存的时候\n        if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n          this.setFromQueryNameCache(sourceNameObject)\n        }\n      } else {\n        sourceNameObject = cacheSourceNameObject\n      }\n      return sourceNameObject\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n      const cacheResult = this.getStorageByPath(path, {})\n      return cacheResult\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n      this.setStorageByPath(path, source)\n    } catch (e) {}\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n      let volcengineProps = this.getStorageByPath(path, null)\n      if (!volcengineProps) {\n        volcengineProps = {}\n      } else {\n        volcengineProps = JSON.parse(volcengineProps)\n      }\n      this.volcengineProps = volcengineProps\n    } catch (e) {}\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    try {\n      const volcenginePropsCache = JSON.stringify(this.volcengineProps)\n      const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n      this.setStorageByPath(path, volcenginePropsCache)\n    } catch (e) {}\n  }\n  getScrollEventCache() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey\n      let scrollEventCache = this.getStorageByPath(path, null)\n      if (!scrollEventCache) {\n        scrollEventCache = {}\n      } else {\n        scrollEventCache = JSON.parse(scrollEventCache)\n      }\n      return scrollEventCache\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   * 设置滚动列表的相关参数缓存\n   * 缓存结构如下： {\n   *  anchorName: [], //锚点名称\n   *  scrollTime:0 // 滚动开始的时间,\n   *  anchorWrapper:'', // 锚点的选取范围\n   *  scrollThreshold:'', // 停留时间上报的最小值，默认只要发生停留就上报\n   *  scrollDistance:'', // 滚动的锚点上报范围\n   *  scrollTop: '', // 滚动条的位置\n   * }\n   */\n  setScrollEventCache(scrollEventCache) {\n    try {\n      const scrollEventCacheStr = JSON.stringify(scrollEventCache)\n      const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey\n      this.setStorageByPath(path, scrollEventCacheStr)\n    } catch (e) {}\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n  setCurrentRouterInfo(routerParam) {\n    try {\n      const volcengineRouterInfoCache = JSON.stringify(routerParam)\n      this.setStorageByPath(\n        this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey,\n        volcengineRouterInfoCache\n      )\n    } catch (e) {}\n  }\n  getCurrentRouterInfo() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey\n      let routerInfo = this.getStorageByPath(path, null)\n      if (!routerInfo) {\n        routerInfo = {}\n      } else {\n        routerInfo = JSON.parse(routerInfo)\n      }\n      return routerInfo\n    } catch (e) {\n      return {}\n    }\n  }\n  getIsLaunch() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey\n      return this.getStorageByPath(path, false)\n    } catch (e) {\n      return false\n    }\n  }\n  setIsLaunch(isLaunch) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey\n      this.setStorageByPath(path, isLaunch)\n    } catch (e) {}\n  }\n  setIsHide(isHide) {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey\n      return this.setStorageByPath(path, isHide)\n    } catch (e) {\n      return false\n    }\n  }\n  getIsHide() {\n    try {\n      const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey\n      return this.getStorageByPath(path, false)\n    } catch (e) {\n      return false\n    }\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    try {\n      const page = getCurrentPages()\n        .map((e) => `/${e.route}`)\n        .reverse() // 获取页面栈\n      return page\n    } catch (e) {\n      return []\n    }\n  }\n  getCurrentOptions(path) {\n    let options = {}\n    try {\n      if (!this.initParam.uniPluginObject) {\n        // uni-app\n        try {\n          const currentUrl = window.location.href\n          options = this.getUrlParams(currentUrl)\n        } catch (e) {}\n      } else {\n        const currentArr = getCurrentPages().filter((el) => {\n          return \"/\" + el.route === path\n        })\n        const current = currentArr.length ? currentArr[0] : []\n        options = current.options || {}\n      }\n    } catch (e) {}\n\n    return options\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    try {\n      const urlStr = url.split(\"?\")[1]\n      // 创建空对象存储参数\n      const obj = {}\n      // 再通过 & 将每一个参数单独分割出来\n      const paramsArr = urlStr.split(\"&\")\n      for (let i = 0, len = paramsArr.length; i < len; i++) {\n        // 再通过 = 将每一个参数分割为 key:value 的形式\n        const arr = paramsArr[i].split(\"=\")\n        obj[arr[0]] = arr[1]\n      }\n      return obj\n    } catch (e) {\n      return {}\n    }\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined, isPlus = false) {\n    try {\n      path = typeof path === \"string\" ? path.split(\".\") : path\n      path = path.filter((x) => x)\n      // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n      let lsValue\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走 localStorage\n        lsValue = localStorage.getItem(path[0]) || undefined\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue)\n          } catch (e) {\n            lsValue = {}\n          }\n        }\n      } else {\n        if (isPlus) {\n          lsValue = plus.storage.getItem(path[0]) || undefined\n          if (lsValue) {\n            try {\n              lsValue = JSON.parse(lsValue)\n            } catch (e) {\n              lsValue = {}\n            }\n          }\n        } else {\n          lsValue = uni.getStorageSync(path[0]) || undefined\n        }\n      }\n      // 若 path 只有一级，直接读取\n      const valueByPath =\n        lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue\n      const result =\n        // eslint-disable-next-line valid-typeof\n        !valueByPath && typeof nullType !== undefined ? nullType : valueByPath\n      return result\n    } catch (e) {\n      return nullType || this.nullProp\n    }\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value, isPlus = false) {\n    try {\n      path = typeof path === \"string\" ? path.split(\".\") : path\n      path = path.filter((x) => x)\n      let result = \"\"\n      if (path.length > 1) {\n        // 若 path 不只一级，需要取出按 key 路径重新赋值\n        let lsValue\n        if (this.systemPlateformType === 1) {\n          // PC 和 H5 走localStorage\n          lsValue = localStorage.getItem(path[0])\n          if (lsValue) {\n            try {\n              lsValue = JSON.parse(lsValue)\n            } catch (e) {\n              lsValue = {}\n            }\n          } else {\n            lsValue = {}\n          }\n        } else {\n          lsValue = uni.getStorageSync(path[0]) || {}\n        }\n        result = _.set(lsValue, path.slice(1), value)\n      } else if (path.length === 1) {\n        // 若 path 只有一级，直接存入\n        result = value\n      }\n      if (this.systemPlateformType === 1) {\n        if (isPlus) {\n          plus.storage.setItem(path[0], JSON.stringify(result))\n        } else {\n          localStorage.setItem(path[0], JSON.stringify(result))\n        }\n      } else {\n        uni.setStorageSync(path[0], result)\n      }\n      return !!result\n    } catch (e) {\n      return false\n    }\n  }\n  getNowPath(routeInfo) {\n    let currentUrl\n    try {\n      const routerArr = routeInfo\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href\n        routerArr.forEach((item) => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path\n          }\n        })\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path\n      }\n    } catch (e) {\n      currentUrl = \"/\"\n    }\n    return currentUrl\n  }\n  getAppVersion() {\n    try {\n      const versionInfo = this.getVersionInfo()\n      return {\n        user_custom_app_version_name: versionInfo[\"custom_app_version_name\"]\n      }\n    } catch (e) {\n      return {\n        user_custom_app_version_name: \"\"\n      }\n    }\n  }\n  /**\n   * 获取sdk 版本信息\n   * @returns\n   */\n\n  getSdkVersion() {\n    try {\n      const versionInfo = this.getVersionInfo()\n      return {\n        user_analytics_sdk_version_name:\n          versionInfo[\"analytics_sdk_version_name\"]\n      }\n    } catch (e) {\n      return {\n        user_analytics_sdk_version_name: \"\"\n      }\n    }\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      const versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      }\n      const initParam = this.initParam\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion\n        versionInfo.custom_app_version_name = appWgtVersion\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\"\n\n        versionInfo.custom_app_version_name = packageVersion\n      } else {\n        // H5\n\n        const version =\n          uni.getSystemInfoSync().appWgtVersion ||\n          uni.getSystemInfoSync().appVersion\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version\n        if (!version) {\n          versionInfo.custom_app_version_name =\n            UNI_VERSION.versionName || UNI_VERSION.version\n        }\n      }\n      return versionInfo\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      }\n    }\n  }\n  checkUrlValid(url) {\n    try {\n      const reg = /http[s]?:\\/\\/[\\w.]+[\\w\\/]*[\\w.]*\\??[\\w=&\\+\\%]*/\n      return reg.test(url)\n    } catch (e) {\n      return false\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}