{"ast":null,"code":"import { defineStore, createPinia } from 'pinia';\nconst initialCacheData = JSON.parse(localStorage.getItem('cacheData')) || {};\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: initialCacheData // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7);\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        // 如果cacheKey不存在，将cacheInfo设置为初始版本\n        this.cacheData[cacheKey] = {\n          latestVersion: {\n            data: cacheInfo,\n            number: 0\n          }\n        };\n      }\n      const lastVersion = this.cacheData[cacheKey].latestVersion;\n      if (JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)) {\n        // 只有在cacheInfo与上一个版本存在差异时才存储为最新版本\n        const versionNumber = lastVersion.number + 1;\n        this.cacheData[cacheKey][`version${versionNumber}`] = {\n          data: cacheInfo\n        };\n        this.cacheData[cacheKey].latestVersion = {\n          data: cacheInfo,\n          number: versionNumber\n        };\n        if (time > 0) {\n          // 自动缓存\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo);\n          }, time);\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer;\n        }\n      }\n      localStorage.setItem('cacheData', JSON.stringify(this.cacheData));\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer);\n      }\n    },\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey];\n        localStorage.setItem('cacheData', JSON.stringify(this.cacheData));\n        return true;\n      }\n      return false;\n    },\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey);\n      }\n      this.cacheData = {};\n    },\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData;\n    },\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        return this.cacheData[cacheKey].latestVersion ? this.cacheData[cacheKey].latestVersion.data : {};\n      }\n      return {};\n    },\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey][`version${versionNum}`]) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data;\n      }\n      return {};\n    },\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (versionNum === undefined || versionNum === this.cacheData[cacheKey].latestVersion.number) {\n        return {};\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`];\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`];\n      const diff = {};\n      for (const key in currentVersion.data) {\n        if (JSON.stringify(currentVersion.data[key]) !== JSON.stringify(nextVersion.data[key])) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]];\n        }\n      }\n      return diff;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","createPinia","initialCacheData","JSON","parse","localStorage","getItem","cubeCacheStore","state","cacheData","actions","getCacheKey","Math","random","toString","substring","set","cacheKey","cacheInfo","time","latestVersion","data","number","lastVersion","stringify","versionNumber","autoSaveTimer","setInterval","setItem","cancelAutoSave","clearInterval","clear","clearAll","getAll","get","getVersion","versionNum","diff","undefined","currentVersion","nextVersion","key"],"sources":["/Users/myproject/vuedemo/src/store/index.js"],"sourcesContent":["import { defineStore, createPinia } from 'pinia'\n\nconst initialCacheData = JSON.parse(localStorage.getItem('cacheData')) || {}\n\nexport const cubeCacheStore = defineStore('cubeCache', {\n  state: () => ({\n    cacheData: initialCacheData, // 用于存储缓存数据\n  }),\n\n  actions: {\n    // 生成唯一缓存key\n    getCacheKey() {\n      // 返回一个唯一的缓存key，你可以使用更复杂的逻辑生成\n      return Math.random().toString(36).substring(7)\n    },\n    // 设置缓存\n    set(cacheKey, cacheInfo, time = 0) {\n      if (!this.cacheData[cacheKey]) {\n        // 如果cacheKey不存在，将cacheInfo设置为初始版本\n        this.cacheData[cacheKey] = {\n          latestVersion: {\n            data: cacheInfo,\n            number: 0,\n          },\n        }\n      }\n\n      const lastVersion = this.cacheData[cacheKey].latestVersion\n\n      if (JSON.stringify(lastVersion.data) !== JSON.stringify(cacheInfo)) {\n        // 只有在cacheInfo与上一个版本存在差异时才存储为最新版本\n        const versionNumber = lastVersion.number + 1\n        this.cacheData[cacheKey][`version${versionNumber}`] = {\n          data: cacheInfo,\n        }\n        this.cacheData[cacheKey].latestVersion = {\n          data: cacheInfo,\n          number: versionNumber,\n        }\n\n        if (time > 0) {\n          // 自动缓存\n          const autoSaveTimer = setInterval(() => {\n            this.set(cacheKey, cacheInfo)\n          }, time)\n\n          this.cacheData[cacheKey].autoSaveTimer = autoSaveTimer\n        }\n      }\n      localStorage.setItem('cacheData', JSON.stringify(this.cacheData))\n    },\n    // 取消时间自动缓存\n    cancelAutoSave(cacheKey) {\n      if (this.cacheData[cacheKey] && this.cacheData[cacheKey].autoSaveTimer) {\n        clearInterval(this.cacheData[cacheKey].autoSaveTimer)\n      }\n    },\n\n    // 清空指定缓存\n    clear(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        delete this.cacheData[cacheKey]\n        localStorage.setItem('cacheData', JSON.stringify(this.cacheData))\n        return true\n      }\n      return false\n    },\n\n    // 清空所有缓存\n    clearAll() {\n      for (const cacheKey in this.cacheData) {\n        this.clear(cacheKey)\n      }\n      this.cacheData = {}\n    },\n\n    // 获取所有缓存对象\n    getAll() {\n      return this.cacheData\n    },\n\n    // 获取指定缓存对象\n    get(cacheKey) {\n      if (this.cacheData[cacheKey]) {\n        return this.cacheData[cacheKey].latestVersion\n          ? this.cacheData[cacheKey].latestVersion.data\n          : {}\n      }\n      return {}\n    },\n\n    // 返回指定版本的内容\n    getVersion(cacheKey, versionNum) {\n      if (\n        this.cacheData[cacheKey] &&\n        this.cacheData[cacheKey][`version${versionNum}`]\n      ) {\n        return this.cacheData[cacheKey][`version${versionNum}`].data\n      }\n      return {}\n    },\n\n    // 返回版本差异\n    diff(cacheKey, versionNum) {\n      if (\n        versionNum === undefined ||\n        versionNum === this.cacheData[cacheKey].latestVersion.number\n      ) {\n        return {}\n      }\n      const currentVersion = this.cacheData[cacheKey][`version${versionNum}`]\n      const nextVersion = this.cacheData[cacheKey][`version${versionNum + 1}`]\n      const diff = {}\n\n      for (const key in currentVersion.data) {\n        if (\n          JSON.stringify(currentVersion.data[key]) !==\n          JSON.stringify(nextVersion.data[key])\n        ) {\n          diff[key] = [currentVersion.data[key], nextVersion.data[key]]\n        }\n      }\n\n      return diff\n    },\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}