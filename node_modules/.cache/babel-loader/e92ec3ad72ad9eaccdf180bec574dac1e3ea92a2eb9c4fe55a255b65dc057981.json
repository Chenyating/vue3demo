{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '../../../../lib/styles/components/Soduku.scss';\nexport default {\n  name: 'Soduku',\n  props: {\n    // 宫格列数\n    cols: {\n      type: [String, Number],\n      default: 3\n    },\n    // 是否显示边框\n    isBorder: {\n      type: Boolean,\n      default: false\n    },\n    list: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    // 文字大小，隐藏参数不在文档中显示，通过css变量设置\n    size: {\n      type: [String, Number],\n      default: ''\n    },\n    // icon大小，隐藏参数不在文档中显示，通过css变量设置\n    iconSize: {\n      type: [String, Number],\n      default: ''\n    },\n    // 图片大小，隐藏参数不在文档中显示，通过css变量设置\n    imageSize: {\n      type: [String, Number],\n      default: ''\n    },\n    // 文字颜色，隐藏参数不在文档中显示，通过css变量设置\n    color: {\n      type: String,\n      default: ''\n    },\n    // icon颜色，隐藏参数不在文档中显示，通过css变量设置\n    iconColor: {\n      type: String,\n      default: ''\n    },\n    // 背景颜色，隐藏参数不在文档中显示，通过css变量设置\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    // 边框元素，隐藏参数不在文档中显示，通过css变量设置\n    borderColor: {\n      type: String,\n      default: ''\n    },\n    // 宫格间距\n    gutter: {\n      type: Number,\n      default: 0\n    },\n    // 点击背景是否高亮\n    highLight: {\n      type: Boolean,\n      default: true\n    },\n    // 是否正方形显示\n    square: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    // 转换为二维度数组\n    list_() {\n      const result = [];\n      const fakeBox = {\n        _fake: true\n      };\n      const list = [...this.list];\n      if (list.length % this.cols !== 0 && !this.gutter_) {\n        list.push(fakeBox);\n      }\n      list.forEach((v, i) => {\n        const index = Math.floor(i / this.cols);\n        let item = result[index];\n        if (!item) {\n          item = [];\n          result.push(item);\n        }\n        item.push(v);\n      });\n      return result;\n    },\n    // 宫格间距值转换\n    gutter_() {\n      return Number.parseFloat(this.gutter);\n    },\n    // 整体样式\n    containerStyle_() {\n      const padding = this.gutter_ / 2;\n      if (this.isBorder) {\n        if (this.gutter_) {\n          return {\n            border: 'none',\n            padding: `${padding}px`\n          };\n        } else {\n          return {\n            borderColor: this.borderColor\n          };\n        }\n      } else {\n        return {\n          border: 'none'\n        };\n      }\n    },\n    // 行样式\n    rowBoxStyle_() {\n      if (this.isBorder && !this.gutter_) {\n        return {\n          borderColor: this.borderColor\n        };\n      } else {\n        return {\n          border: 'none'\n        };\n      }\n    },\n    // 单个宫格整个的样式\n    cellBoxStyle_() {\n      return it => {\n        const style = {\n          backgroundColor: it.bgColor\n        };\n        if (this.isBorder && this.gutter_) {\n          Object.assign(style, {\n            border: '1px solid',\n            borderColor: this.borderColor\n          });\n        } else {\n          Object.assign(style, {\n            borderColor: this.borderColor\n          });\n        }\n        Object.assign(style, it.style);\n        return style;\n      };\n    },\n    // 单个宫格内部的样式\n    cellStyle_() {\n      const width = `${100 / this.cols}%`;\n      if (this.gutter_) {\n        const padding = this.gutter_ / 2;\n        return {\n          width,\n          padding: `${padding}px`\n        };\n      }\n      return {\n        width,\n        borderColor: this.borderColor\n      };\n    },\n    // label的样式\n    cellLabelStyle_() {\n      return {\n        fontSize: this.getSize(this.size),\n        color: this.color\n      };\n    },\n    iconStyle_() {\n      if (this.iconSize || this.iconSize === 0) {\n        return {\n          width: this.getSize(this.iconSize),\n          height: this.getSize(this.iconSize)\n        };\n      } else {\n        // 覆盖cnd-icon组件的style样式，让css样式生效\n        return {\n          width: '',\n          height: ''\n        };\n      }\n    },\n    // 图片的样式\n    imageStyle_() {\n      const size = this.getSize(this.imageSize);\n      return {\n        width: size,\n        height: size\n      };\n    },\n    // 用于判断角标隐藏和显示\n    badgeHiden_() {\n      return (item, type) => {\n        const hidden = item.badge?.hidden;\n        if (type === 1) {\n          return hidden === true || !item.image && !item.icon;\n        } else if (type === 2) {\n          return hidden === true || item.image || item.icon;\n        }\n        return false;\n      };\n    }\n  },\n  methods: {\n    handleClick(item, index) {\n      this.$emit('click', item, index);\n    },\n    getSize(x) {\n      return isNaN(x) ? x : `${x}px`;\n    }\n  }\n};","map":{"version":3,"names":["name","props","cols","type","String","Number","default","isBorder","Boolean","list","Array","size","iconSize","imageSize","color","iconColor","bgColor","borderColor","gutter","highLight","square","data","computed","list_","result","fakeBox","_fake","length","gutter_","push","forEach","v","i","index","Math","floor","item","parseFloat","containerStyle_","padding","border","rowBoxStyle_","cellBoxStyle_","it","style","backgroundColor","Object","assign","cellStyle_","width","cellLabelStyle_","fontSize","getSize","iconStyle_","height","imageStyle_","badgeHiden_","hidden","badge","image","icon","methods","handleClick","$emit","x","isNaN"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Soduku/src/index.vue"],"sourcesContent":["<template>\n  <div\n    class=\"soduku-container\"\n    :class=\"{ 'soduku--border': isBorder, 'soduku--highLight': highLight }\"\n    :style=\"[{ 'background-color': bgColor }, containerStyle_]\"\n  >\n    <div\n      v-for=\"(item, index) in list_\"\n      :key=\"index\"\n      class=\"soduku-row\"\n      :style=\"rowBoxStyle_\"\n    >\n      <div\n        v-for=\"(it, i) in item\"\n        :key=\"i\"\n        class=\"soduku-cell\"\n        :class=\"{\n          'soduku-cell--square': square,\n          'soduku-cell-box--fake': it._fake\n        }\"\n        :style=\"cellStyle_\"\n        @click=\"handleClick(it, index * cols + i)\"\n      >\n        <div class=\"soduku-cell-view\">\n          <div class=\"soduku-cell-padding\"></div>\n          <div class=\"soduku-cell-box\" :style=\"cellBoxStyle_(it)\">\n            <el-badge\n              v-bind=\"it.badge\"\n              class=\"soduku-cell-badge\"\n              :hidden=\"badgeHiden_(it, 1)\"\n            >\n              <el-image\n                v-if=\"it.image\"\n                class=\"soduku-cell-image\"\n                :src=\"it.image\"\n                v-bind=\"it.imageConfig\"\n                :style=\"imageStyle_\"\n              />\n              <cnd-icon\n                v-else-if=\"it.icon\"\n                :name=\"it.icon\"\n                :color=\"iconColor || color\"\n                :style=\"iconStyle_\"\n                class-name=\"soduku-cell-icon\"\n              />\n            </el-badge>\n            <el-badge\n              v-bind=\"it.badge\"\n              class=\"soduku-cell-badge\"\n              :hidden=\"badgeHiden_(it, 2)\"\n            >\n              <div\n                class=\"soduku-cell-label\"\n                :style=\"cellLabelStyle_\"\n                v-html=\"it.label\"\n              ></div>\n            </el-badge>\n            <div class=\"soduku-cell-description\" v-html=\"it.description\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '../../../../lib/styles/components/Soduku.scss'\nexport default {\n  name: 'Soduku',\n  props: {\n    // 宫格列数\n    cols: {\n      type: [String, Number],\n      default: 3\n    },\n    // 是否显示边框\n    isBorder: {\n      type: Boolean,\n      default: false\n    },\n    list: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    // 文字大小，隐藏参数不在文档中显示，通过css变量设置\n    size: {\n      type: [String, Number],\n      default: ''\n    },\n    // icon大小，隐藏参数不在文档中显示，通过css变量设置\n    iconSize: {\n      type: [String, Number],\n      default: ''\n    },\n    // 图片大小，隐藏参数不在文档中显示，通过css变量设置\n    imageSize: {\n      type: [String, Number],\n      default: ''\n    },\n    // 文字颜色，隐藏参数不在文档中显示，通过css变量设置\n    color: {\n      type: String,\n      default: ''\n    },\n    // icon颜色，隐藏参数不在文档中显示，通过css变量设置\n    iconColor: {\n      type: String,\n      default: ''\n    },\n    // 背景颜色，隐藏参数不在文档中显示，通过css变量设置\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    // 边框元素，隐藏参数不在文档中显示，通过css变量设置\n    borderColor: {\n      type: String,\n      default: ''\n    },\n    // 宫格间距\n    gutter: {\n      type: Number,\n      default: 0\n    },\n    // 点击背景是否高亮\n    highLight: {\n      type: Boolean,\n      default: true\n    },\n    // 是否正方形显示\n    square: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {}\n  },\n  computed: {\n    // 转换为二维度数组\n    list_() {\n      const result = []\n      const fakeBox = { _fake: true }\n      const list = [...this.list]\n      if (list.length % this.cols !== 0 && !this.gutter_) {\n        list.push(fakeBox)\n      }\n      list.forEach((v, i) => {\n        const index = Math.floor(i / this.cols)\n        let item = result[index]\n        if (!item) {\n          item = []\n          result.push(item)\n        }\n        item.push(v)\n      })\n      return result\n    },\n    // 宫格间距值转换\n    gutter_() {\n      return Number.parseFloat(this.gutter)\n    },\n    // 整体样式\n    containerStyle_() {\n      const padding = this.gutter_ / 2\n      if (this.isBorder) {\n        if (this.gutter_) {\n          return {\n            border: 'none',\n            padding: `${padding}px`\n          }\n        } else {\n          return {\n            borderColor: this.borderColor\n          }\n        }\n      } else {\n        return {\n          border: 'none'\n        }\n      }\n    },\n    // 行样式\n    rowBoxStyle_() {\n      if (this.isBorder && !this.gutter_) {\n        return {\n          borderColor: this.borderColor\n        }\n      } else {\n        return {\n          border: 'none'\n        }\n      }\n    },\n    // 单个宫格整个的样式\n    cellBoxStyle_() {\n      return (it) => {\n        const style = { backgroundColor: it.bgColor }\n        if (this.isBorder && this.gutter_) {\n          Object.assign(style, {\n            border: '1px solid',\n            borderColor: this.borderColor\n          })\n        } else {\n          Object.assign(style, {\n            borderColor: this.borderColor\n          })\n        }\n        Object.assign(style, it.style)\n        return style\n      }\n    },\n    // 单个宫格内部的样式\n    cellStyle_() {\n      const width = `${100 / this.cols}%`\n      if (this.gutter_) {\n        const padding = this.gutter_ / 2\n        return {\n          width,\n          padding: `${padding}px`\n        }\n      }\n      return {\n        width,\n        borderColor: this.borderColor\n      }\n    },\n    // label的样式\n    cellLabelStyle_() {\n      return {\n        fontSize: this.getSize(this.size),\n        color: this.color\n      }\n    },\n    iconStyle_() {\n      if (this.iconSize || this.iconSize === 0) {\n        return {\n          width: this.getSize(this.iconSize),\n          height: this.getSize(this.iconSize)\n        }\n      } else {\n        // 覆盖cnd-icon组件的style样式，让css样式生效\n        return {\n          width: '',\n          height: ''\n        }\n      }\n    },\n    // 图片的样式\n    imageStyle_() {\n      const size = this.getSize(this.imageSize)\n      return {\n        width: size,\n        height: size\n      }\n    },\n    // 用于判断角标隐藏和显示\n    badgeHiden_() {\n      return (item, type) => {\n        const hidden = item.badge?.hidden\n        if (type === 1) {\n          return hidden === true || (!item.image && !item.icon)\n        } else if (type === 2) {\n          return hidden === true || item.image || item.icon\n        }\n        return false\n      }\n    }\n  },\n  methods: {\n    handleClick(item, index) {\n      this.$emit('click', item, index)\n    },\n    getSize(x) {\n      return isNaN(x) ? x : `${x}px`\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}