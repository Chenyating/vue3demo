{"ast":null,"code":"import AgGridInput from '../components/ForGridComponents/AgGridInput'; // 文本展示\nimport AgGridText from '../components/ForGridComponents/AgGridText'; // 文本展示\nimport AgGridDate from '../components/ForGridComponents/AgGridDate'; // el日期选择器\nimport AgGridSelect from '../components/ForGridComponents/AgGridSelect'; // el选择器\nimport AgSearchSelect from '../components/ForGridComponents/AgSearchSelect'; // 全文检索下拉框【业务】\nimport AgInputSelect from '../components/ForGridComponents/AgInputSelect'; // 输入框选择器\nimport CndInputNumber from '../components/InputNumber/src/index'; // cnd数字输入框\nimport CndInputDialog from '../components/InputDialog/src/index'; // cnd弹出框input\nimport AgSelect from '../components/ForGridComponents/AgSelect'; // 全文检索下拉框【业务】\n\n// 可用组件\nconst componentsObj = {\n  AgGridInput,\n  AgGridText,\n  AgGridDate,\n  AgGridSelect,\n  AgSearchSelect,\n  CndInputNumber,\n  CndInputDialog,\n  AgInputSelect,\n  AgSelect\n};\n\n// 已渲染组件对象\nconst renderComponent = {};\n\n/**\n * 创建组件方法\n * @param {*渲染组件名称} name\n * @param {*传入的props} propsObj\n * @param {*一些特定触发事件} funObj\n *        {\n *           keyup: () => {} // 键盘弹起事件\n *           focus: () => {} // 聚焦触发事件\n *           blur: () => {} // 失焦触发事件\n *           change: () => {} // 值变化事件\n *           getOption: ()=> {} // 选择器时获取选项事件\n *        }\n */\nfunction createComponent(name, propsObj = {}, funObj = {}) {\n  return {\n    data() {\n      return {\n        value: '',\n        flagFirst: true,\n        rendered: {},\n        curCmpMark: ''\n      };\n    },\n    methods: {\n      // 组件被创建时调用一次\n      // init(params) {\n      //   console.log('组件init--', params)\n      // },\n      // // 供ag-grid调用，进入当前单元格时被调用(tab切换)\n      focusIn() {\n        // console.log('当前[]组件标识--', this.curCmpMark)\n        // console.log('当前组件指向--', this.rendered[this.curCmpMark])\n        this.rendered[this.curCmpMark].focus();\n      },\n      // 供ag-grid调用，获取最后value\n      getValue() {\n        // console.log('getValue[middleware]--', this.value)\n        // if (!funObj.focus) return this.value\n        return this.value;\n      },\n      // 保存组件内部传来的value\n      saveVal(v) {\n        this.value = v;\n        // console.log('saveVal[middleware]--', this.value)\n      },\n\n      // 键盘弹起事件\n      emitKeyup(event) {\n        if (funObj.keyup) {\n          return funObj.keyup({\n            event,\n            rowData: this.params,\n            middleware: this\n          });\n        }\n      },\n      // 键盘弹起事件\n      emitKeydown(event) {\n        if (funObj.keydown) {\n          return funObj.keydown({\n            event,\n            rowData: this.params,\n            middleware: this\n          });\n        }\n      },\n      // 聚焦触发事件\n      emitFocus(event) {\n        if (funObj.focus) {\n          return funObj.focus({\n            event,\n            rowData: this.params,\n            middleware: this\n          });\n        }\n      },\n      // 失焦触发事件\n      emitBlur(event) {\n        if (funObj.blur) {\n          return funObj.blur({\n            event,\n            rowData: this.params,\n            middleware: this\n          });\n        }\n      },\n      // 值变化触发事件\n      emitChange(v) {\n        if (funObj.change) {\n          return funObj.change({\n            value: v,\n            rowData: this.params,\n            middleware: this\n          });\n        }\n      },\n      // 选择器获取整个option\n      getOption(option, type) {\n        if (funObj.getOption) return funObj.getOption(option, this.params, this, type);\n      },\n      // 获取组件对象\n      getComponent(cmp) {\n        // console.log('组件指向[middleware]---', cmp)\n        this.curCmpMark = cmp.mark;\n        renderComponent[cmp.mark] = cmp;\n        this.rendered = renderComponent;\n      }\n      // setDialogVal(v) {\n      //   // console.log('option------', option)\n      //   // console.log('data----', complete_Data)\n      //   if (funObj.setDialogVal) return funObj.setDialogVal({\n      //     // event: event,\n      //     value: v,\n      //     rowData: this.params,\n      //     middleware: this\n      //   })\n      //   // if (funObj.setDialogVal) return funObj.setDialogVal(option, data)\n      // }\n    },\n\n    render(h) {\n      // console.log('表格当前行数据--', this.params)\n      // console.log('props--', propsObj)\n      if (this.flagFirst) {\n        this.value = this.params.value;\n        propsObj.value = this.value;\n        this.flagFirst = false;\n      }\n      propsObj.forGrid = true;\n      propsObj.params = this.params;\n      const attrs = name === 'AgSelect' ? propsObj : {};\n      return h(componentsObj[name], {\n        attrs: attrs,\n        props: propsObj,\n        // 监听组件内部$emit\n        on: {\n          // setDialogVal: this.setDialogVal,\n          getVal: this.saveVal,\n          keyup: this.emitKeyup,\n          keydown: this.emitKeydown,\n          focus: this.emitFocus,\n          blur: this.emitBlur,\n          change: this.emitChange,\n          getOption: this.getOption,\n          getComponent: this.getComponent\n        }\n      });\n    }\n  };\n}\nexport default {\n  createComponent\n};","map":{"version":3,"names":["AgGridInput","AgGridText","AgGridDate","AgGridSelect","AgSearchSelect","AgInputSelect","CndInputNumber","CndInputDialog","AgSelect","componentsObj","renderComponent","createComponent","name","propsObj","funObj","data","value","flagFirst","rendered","curCmpMark","methods","focusIn","focus","getValue","saveVal","v","emitKeyup","event","keyup","rowData","params","middleware","emitKeydown","keydown","emitFocus","emitBlur","blur","emitChange","change","getOption","option","type","getComponent","cmp","mark","render","h","forGrid","attrs","props","on","getVal"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/src/utils/middleware.js"],"sourcesContent":["import AgGridInput from '../components/ForGridComponents/AgGridInput' // 文本展示\nimport AgGridText from '../components/ForGridComponents/AgGridText' // 文本展示\nimport AgGridDate from '../components/ForGridComponents/AgGridDate' // el日期选择器\nimport AgGridSelect from '../components/ForGridComponents/AgGridSelect' // el选择器\nimport AgSearchSelect from '../components/ForGridComponents/AgSearchSelect' // 全文检索下拉框【业务】\nimport AgInputSelect from '../components/ForGridComponents/AgInputSelect' // 输入框选择器\nimport CndInputNumber from '../components/InputNumber/src/index' // cnd数字输入框\nimport CndInputDialog from '../components/InputDialog/src/index' // cnd弹出框input\nimport AgSelect from '../components/ForGridComponents/AgSelect' // 全文检索下拉框【业务】\n\n// 可用组件\nconst componentsObj = {\n  AgGridInput,\n  AgGridText,\n  AgGridDate,\n  AgGridSelect,\n  AgSearchSelect,\n  CndInputNumber,\n  CndInputDialog,\n  AgInputSelect,\n  AgSelect\n}\n\n// 已渲染组件对象\nconst renderComponent = {}\n\n/**\n * 创建组件方法\n * @param {*渲染组件名称} name\n * @param {*传入的props} propsObj\n * @param {*一些特定触发事件} funObj\n *        {\n *           keyup: () => {} // 键盘弹起事件\n *           focus: () => {} // 聚焦触发事件\n *           blur: () => {} // 失焦触发事件\n *           change: () => {} // 值变化事件\n *           getOption: ()=> {} // 选择器时获取选项事件\n *        }\n */\nfunction createComponent(name, propsObj = {}, funObj = {}) {\n  return {\n    data() {\n      return {\n        value: '',\n        flagFirst: true,\n        rendered: {},\n        curCmpMark: ''\n      }\n    },\n    methods: {\n      // 组件被创建时调用一次\n      // init(params) {\n      //   console.log('组件init--', params)\n      // },\n      // // 供ag-grid调用，进入当前单元格时被调用(tab切换)\n      focusIn() {\n        // console.log('当前[]组件标识--', this.curCmpMark)\n        // console.log('当前组件指向--', this.rendered[this.curCmpMark])\n        this.rendered[this.curCmpMark].focus()\n      },\n      // 供ag-grid调用，获取最后value\n      getValue() {\n        // console.log('getValue[middleware]--', this.value)\n        // if (!funObj.focus) return this.value\n        return this.value\n      },\n      // 保存组件内部传来的value\n      saveVal(v) {\n        this.value = v\n        // console.log('saveVal[middleware]--', this.value)\n      },\n      // 键盘弹起事件\n      emitKeyup(event) {\n        if (funObj.keyup) {\n          return funObj.keyup({\n            event,\n            rowData: this.params,\n            middleware: this\n          })\n        }\n      },\n      // 键盘弹起事件\n      emitKeydown(event) {\n        if (funObj.keydown) {\n          return funObj.keydown({\n            event,\n            rowData: this.params,\n            middleware: this\n          })\n        }\n      },\n      // 聚焦触发事件\n      emitFocus(event) {\n        if (funObj.focus) {\n          return funObj.focus({\n            event,\n            rowData: this.params,\n            middleware: this\n          })\n        }\n      },\n      // 失焦触发事件\n      emitBlur(event) {\n        if (funObj.blur) {\n          return funObj.blur({\n            event,\n            rowData: this.params,\n            middleware: this\n          })\n        }\n      },\n      // 值变化触发事件\n      emitChange(v) {\n        if (funObj.change) {\n          return funObj.change({\n            value: v,\n            rowData: this.params,\n            middleware: this\n          })\n        }\n      },\n      // 选择器获取整个option\n      getOption(option, type) {\n        if (funObj.getOption) return funObj.getOption(option, this.params, this, type)\n      },\n      // 获取组件对象\n      getComponent(cmp) {\n        // console.log('组件指向[middleware]---', cmp)\n        this.curCmpMark = cmp.mark\n        renderComponent[cmp.mark] = cmp\n        this.rendered = renderComponent\n      }\n      // setDialogVal(v) {\n      //   // console.log('option------', option)\n      //   // console.log('data----', complete_Data)\n      //   if (funObj.setDialogVal) return funObj.setDialogVal({\n      //     // event: event,\n      //     value: v,\n      //     rowData: this.params,\n      //     middleware: this\n      //   })\n      //   // if (funObj.setDialogVal) return funObj.setDialogVal(option, data)\n      // }\n    },\n    render(h) {\n      // console.log('表格当前行数据--', this.params)\n      // console.log('props--', propsObj)\n      if (this.flagFirst) {\n        this.value = this.params.value\n        propsObj.value = this.value\n        this.flagFirst = false\n      }\n      propsObj.forGrid = true\n      propsObj.params = this.params\n      const attrs = name === 'AgSelect' ? propsObj : {}\n      return h(componentsObj[name], {\n        attrs: attrs,\n        props: propsObj,\n        // 监听组件内部$emit\n        on: {\n          // setDialogVal: this.setDialogVal,\n          getVal: this.saveVal,\n          keyup: this.emitKeyup,\n          keydown: this.emitKeydown,\n          focus: this.emitFocus,\n          blur: this.emitBlur,\n          change: this.emitChange,\n          getOption: this.getOption,\n          getComponent: this.getComponent\n        }\n      })\n    }\n  }\n}\n\nexport default {\n  createComponent\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}