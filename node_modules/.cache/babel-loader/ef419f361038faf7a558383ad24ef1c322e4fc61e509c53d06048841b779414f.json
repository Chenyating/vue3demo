{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport path from 'path';\nimport LinkTag from './LinkTag';\nimport TagsMenu from './TagsMenu';\nimport { tagsMixins } from './tagsMixins.js';\nexport default {\n  name: 'TagsView',\n  components: {\n    LinkTag,\n    TagsMenu\n  },\n  // components: { ScrollPane },\n  mixins: [tagsMixins],\n  props: {\n    allMenu: {\n      type: Array,\n      default: () => []\n    },\n    // 所有菜单\n    allRoutes: {\n      type: Array,\n      default: () => []\n    },\n    visitedViews: {\n      type: Array,\n      default: () => []\n    },\n    cachedViews: {\n      type: Array,\n      default: () => []\n    },\n    isCollapse: {\n      type: Boolean,\n      default: false\n    },\n    tagsCut: {\n      // 多余菜单 额外显示\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      visible: [false, false],\n      rightMenuTop: 0,\n      rightMenuLeft: 0,\n      selectedTag: {},\n      affixTags: [],\n      rePage: '',\n      showPopover: false,\n      containerWidth: 0,\n      timeout: null,\n      sizeRecord: {},\n      // 记录所有item项的信息，\n      maxOtherWidth: 60,\n      otherWidth: 0,\n      // 剩下的宽度\n      prevFullPath: ''\n    };\n  },\n  computed: {\n    endIndex_() {\n      let containerWidth = this.containerWidth;\n      let index = this.visitedViews.length - 1;\n      let otherWidth = 0;\n      this.visitedViews.some((v, i) => {\n        const meta = v.meta || {};\n        const recodeItem = this.sizeRecord[`${v.title}${meta.affix || ''}${v.path}`] || {};\n        const width = recodeItem.offsetWidth || 0;\n        otherWidth = containerWidth;\n        containerWidth -= width;\n        if (containerWidth > 0) {\n          index = i;\n          return false;\n        }\n        this.otherWidth = otherWidth;\n        return true;\n      });\n      if (otherWidth >= this.maxOtherWidth) {\n        return index + 1;\n      }\n      return index;\n    },\n    otherDropIndex_() {\n      return index => {\n        return index + this.endIndex_ + 1;\n      };\n    },\n    hadAddEnd_() {\n      return this.otherWidth >= this.maxOtherWidth;\n    },\n    otherVisitedViews_() {\n      return this.visitedViews.slice(this.endIndex_ + 1);\n    },\n    tagStyle_() {\n      return index => {\n        if (this.hadAddEnd_ && index === this.endIndex_ && this.tagsCut) {\n          return {\n            width: `${this.otherWidth}px`,\n            marginRight: '0'\n          };\n        } else {\n          return {};\n        }\n      };\n    }\n  },\n  // computed: {\n  //   ...mapGetters(['sidebar', 'visitedViews']),\n  //   visitedViews () {\n  //     return this.$store.state.tagsView.visitedViews\n  //   },\n  //   cachedViews () {\n  //     return this.$store.state.tagsView.cachedViews\n  //   },\n  //   routes () {\n  //     return this.$store.state.permission.routes\n  //   }\n  // },\n  watch: {\n    $route(now, old) {\n      this.prevFullPath = old.fullPath;\n      this.addVisitedTag(this.$route);\n      // this.moveToCurrentTag()\n    },\n\n    visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    },\n    visitedViews: {\n      immediate: true,\n      handler(nval) {\n        this.$nextTick(() => {\n          const sizeRecord = {\n            ...this.sizeRecord\n          };\n          this.$refs['tag'].forEach((e, i) => {\n            const index = e.$el.getAttribute('index');\n            const item = this.visitedViews[index];\n            const meta = item.meta || {};\n            const key = `${item.title}${meta.affix || ''}${item.path}`;\n            if (!sizeRecord[key]) {\n              // title affix path 三个拼接当作key\n              sizeRecord[key] = {\n                offsetWidth: e.$el.offsetWidth + 8\n              };\n            }\n          });\n          this.sizeRecord = sizeRecord;\n        });\n      }\n    },\n    isCollapse(nval) {\n      setTimeout(() => {\n        this.containerWidth = this.$refs.tagsViewContainer.clientWidth;\n      }, 1000);\n    }\n  },\n  mounted() {\n    this.containerWidth = this.$refs.tagsViewContainer.clientWidth;\n    this.initTags();\n    let indexRouter = this.allRoutes.find(v => v.path === '/');\n    // 获取重定向后的首页路由信息\n    if (indexRouter && indexRouter.redirect) {\n      indexRouter = this.getRouter(indexRouter.redirect, this.allRoutes);\n    }\n    // 插入首页tag\n    if (indexRouter) {\n      indexRouter.fullPath = indexRouter.path;\n      this.addVisitedTag(indexRouter);\n    }\n    this.addVisitedTag(this.$route);\n    // actions.onGlobalStateChange(state => {\n    //   console.log('state---', state)\n    //   if (!state.g6_visible) {\n    //     this.closeTags({ path: '/editor/flow' })\n    //   }\n    //   if (state.deleteCurrent) {\n    //     console.log('this.$refs.closeTag[0].$attrs', this.$refs.closeTag[0].$attrs['data-tag'])\n    //     this.closeTags(this.$refs.closeTag[0].$attrs['data-tag'])\n    //     actions.setGlobalState({ deleteCurrent: false })\n    //     this.rePage = state.rePage\n    //   }\n    // })\n  },\n\n  methods: {\n    getRouter(path, routers) {\n      if (!routers) return null;\n      let reuslt = null;\n      var rootList = [...routers];\n      // 广度遍历 获取\n      while (rootList.length && reuslt === null) {\n        const childrenList = [];\n        while (rootList.length && reuslt === null) {\n          const nroot = rootList.shift();\n          if (nroot.path === path) {\n            reuslt = nroot;\n          }\n          nroot.children && childrenList.push(...nroot.children);\n        }\n        if (childrenList.length) {\n          rootList.push(...childrenList);\n        }\n      }\n      // 获取到的值若还存在重定向则继续查找\n      const redirect = reuslt && reuslt.redirect;\n      if (redirect) {\n        return this.getRouter(redirect, this.allRoutes);\n      }\n      return reuslt;\n    },\n    // 点击右键菜单\n    handleRightMenu(type, item) {\n      this.closeMenu();\n      switch (type) {\n        case 'refresh':\n          this.refreshTags(item);\n          break;\n        case 'close':\n          this.closeTags(item);\n          break;\n        case 'others':\n          this.closeOthersTags(item);\n          break;\n        case 'all':\n          this.closeAllTags();\n          break;\n        case 'left':\n          this.closeLeftTags(item);\n          break;\n        case 'right':\n          this.closeRightTags(item);\n          break;\n      }\n    },\n    // 刷新页签\n    refreshTags(item) {\n      this.deleteCachedTag(item).then(() => {\n        const {\n          fullPath\n        } = item;\n        this.$nextTick(() => {\n          this.$router.replace({\n            path: '/redirect' + fullPath\n          }).then(() => {\n            if ('/redirect' + fullPath === this.$route.fullPath) {\n              this.$emit('refreshTagsActions');\n              // actions.setGlobalState({ refreshTags: true })\n            }\n          }).catch(err => {\n            console.log('err--', err);\n          });\n        });\n      });\n    },\n    // 关闭页签\n    closeTags(item) {\n      item && this.deleteVisitedTag(item).then(visitedViews => {\n        if (this.isActive(item)) {\n          this.toLastTag(visitedViews);\n        }\n      });\n      // 触发resize事件\n      // this.$nextTick(() => {\n      //   const myEvent = new CustomEvent('menuResize', {\n      //     detail: {\n      //       isOpened: this.sidebar.opened,\n      //       visitedViews: this.visitedViews\n      //     },\n      //     bubbles: true,\n      //     cancelable: false\n      //   })\n      //   window.dispatchEvent(myEvent)\n      // })\n    },\n\n    // 关闭其他页签\n    closeOthersTags(tag) {\n      this.$router.push(tag);\n      this.deleteOthersVisitedTags(tag).then(() => {\n        // this.moveToCurrentTag()\n      });\n    },\n    // 关闭全部页签\n    closeAllTags() {\n      this.deleteAllVisitedTags().then(visitedViews => {\n        this.toLastTag(visitedViews);\n      });\n    },\n    // 关闭左边页签\n    closeLeftTags(item) {\n      this.deleteLeftVisitedTags(item);\n    },\n    // 关闭右边页签\n    closeRightTags(item) {\n      this.deleteRightVisitedTags(item).then(visitedViews => {\n        this.toLastTag(visitedViews);\n      });\n    },\n    // 是否是当前页\n    isActive(item) {\n      return item.fullPath === this.$route.fullPath;\n    },\n    filterAffixTags(routes, basePath = '/') {\n      let tags = [];\n      routes.forEach(route => {\n        if (route.meta && route.meta.affix) {\n          const tagPath = path.resolve(basePath, route.path);\n          tags.push({\n            fullPath: tagPath,\n            path: tagPath,\n            // name: route.name,\n            meta: {\n              ...route.meta\n            }\n          });\n        }\n        if (route.children) {\n          const tempTags = this.filterAffixTags(route.children, route.path);\n          if (tempTags.length >= 1) {\n            tags = [...tags, ...tempTags];\n          }\n        }\n      });\n      return tags;\n    },\n    // 更新页签\n    moveToCurrentTag() {\n      const tags = this.$refs.tag;\n      this.$nextTick(() => {\n        for (const tag of tags) {\n          if (tag.to.path === this.$route.path) {\n            // this.$refs.scrollPane.moveToTarget(tag)\n            if (tag.to.fullPath !== this.$route.fullPath) {\n              // this.$store.dispatch('tagsView/updateVisitedView', this.$route)\n            }\n            break;\n          }\n        }\n      });\n    },\n    // 跳转到最后一个页签\n    toLastTag(visitedViews) {\n      const latestView = visitedViews.slice(-1)[0];\n      if (this.prevFullPath) {\n        const prevView = visitedViews.find(item => item.fullPath === this.prevFullPath);\n        if (prevView) {\n          this.$router.push(prevView);\n          return;\n        }\n      }\n      if (this.rePage) {\n        this.$router.push(this.rePage);\n        this.rePage = '';\n      } else if (latestView) {\n        this.$router.push(latestView);\n      } else {\n        this.$router.push('/');\n      }\n    },\n    // 打开右键菜单\n    openMenu(tag, e, index) {\n      const left = e.clientX;\n      this.rightMenuLeft = left;\n      this.rightMenuTop = e.clientY;\n      this.selectedTag = tag;\n      const visible = [false, false];\n      visible[index] = true;\n      this.visible = visible;\n    },\n    // 关闭右键菜单\n    closeMenu() {\n      this.visible = [false, false];\n    },\n    // 拖拽\n    allowDrop(e) {\n      e.preventDefault();\n    },\n    dragStart(e, index) {\n      this.visible = [false, false];\n      index !== 0 && e.dataTransfer.setData('index', index);\n    },\n    drop(e, index, data) {\n      this.allowDrop(e);\n      const dragIndex = Number(e.dataTransfer.getData('index'));\n      if (index !== 0 && dragIndex !== 0) {\n        const temp = data.splice(dragIndex, 1);\n        data.splice(index, 0, temp[0]);\n      }\n      this.setVisitedView(data);\n      // this.$store.dispatch('tagsView/setVisitedView', data)\n    },\n\n    initTags() {\n      const affixTags = this.affixTags = this.filterAffixTags(this.allMenu);\n      for (const tag of affixTags) {\n        if (tag.path) {\n          // this.$store.dispatch('tagsView/addVisitedView', tag)\n          this.addVisitedTag(tag);\n        }\n      }\n    },\n    resizeWidth() {\n      this.containerWidth = this.$refs.tagsViewContainer.clientWidth;\n    },\n    // 关闭当前标签页(外部调用不要删)\n    closeCurrentTag() {\n      const item = this.visitedViews.find(v => v.fullPath === this.$route.fullPath);\n      this.closeTags(item);\n    }\n  }\n};","map":{"version":3,"names":["path","LinkTag","TagsMenu","tagsMixins","name","components","mixins","props","allMenu","type","Array","default","allRoutes","visitedViews","cachedViews","isCollapse","Boolean","tagsCut","data","visible","rightMenuTop","rightMenuLeft","selectedTag","affixTags","rePage","showPopover","containerWidth","timeout","sizeRecord","maxOtherWidth","otherWidth","prevFullPath","computed","endIndex_","index","length","some","v","i","meta","recodeItem","title","affix","width","offsetWidth","otherDropIndex_","hadAddEnd_","otherVisitedViews_","slice","tagStyle_","marginRight","watch","$route","now","old","fullPath","addVisitedTag","value","document","body","addEventListener","closeMenu","removeEventListener","immediate","handler","nval","$nextTick","$refs","forEach","e","$el","getAttribute","item","key","setTimeout","tagsViewContainer","clientWidth","mounted","initTags","indexRouter","find","redirect","getRouter","methods","routers","reuslt","rootList","childrenList","nroot","shift","children","push","handleRightMenu","refreshTags","closeTags","closeOthersTags","closeAllTags","closeLeftTags","closeRightTags","deleteCachedTag","then","$router","replace","$emit","catch","err","console","log","deleteVisitedTag","isActive","toLastTag","tag","deleteOthersVisitedTags","deleteAllVisitedTags","deleteLeftVisitedTags","deleteRightVisitedTags","filterAffixTags","routes","basePath","tags","route","tagPath","resolve","tempTags","moveToCurrentTag","to","latestView","prevView","openMenu","left","clientX","clientY","allowDrop","preventDefault","dragStart","dataTransfer","setData","drop","dragIndex","Number","getData","temp","splice","setVisitedView","resizeWidth","closeCurrentTag"],"sources":["node_modules/@cndinfo/cube-design-web/src/components/Navbar/src/components/TagsView/index.vue"],"sourcesContent":["<template>\n  <div v-resize=\"resizeWidth\" class=\"tags-view-container flexCB\">\n    <div ref=\"tagsViewContainer\" class=\"tags-view-show flexC\">\n      <!-- isLast属性是给css属性选择器用的不要删除 -->\n      <link-tag\n        v-for=\"(item, index) in visitedViews\"\n        ref=\"tag\"\n        :key=\"item.path\"\n        :index=\"index\"\n        :info=\"item\"\n        :style=\"tagStyle_(index)\"\n        :is-last=\"tagsCut? hadAddEnd_ && index === endIndex_ : false\"\n        :is-hidden=\"tagsCut? index > endIndex_ : false\"\n        :tags-cut=\"tagsCut\"\n        @closeTags=\"closeTags(item)\"\n        @dragStart=\"dragStart($event, index)\"\n        @drop=\"drop($event, index, visitedViews)\"\n        @openMenu=\"openMenu(item, $event, 0)\"\n      />\n    </div>\n    <el-popover\n      v-if=\"tagsCut\"\n      v-model=\"showPopover\"\n      width=\"140\"\n      class=\"tags-view-other\"\n      :class=\"{'hidden': !otherVisitedViews_.length}\"\n      popper-class=\"tags-view-el-popover\"\n      trigger=\"click\"\n    >\n      <div class=\"tags-view-container flex-v\">\n        <TagsMenu\n          v-show=\"visible[1]\"\n          :right-menu-left=\"rightMenuLeft\"\n          :right-menu-top=\"rightMenuTop\"\n          :selected-tag=\"selectedTag\"\n          @onMenu=\"handleRightMenu\"\n        />\n        <link-tag\n          v-for=\"(item, index) in otherVisitedViews_\"\n          :key=\"item.path\"\n          :index=\"index\"\n          :info=\"item\"\n          :is-fixed=\"index === 0\"\n          :tags-cut=\"true\"\n          @dragStart=\"dragStart($event, otherDropIndex_(index))\"\n          @drop=\"drop($event, otherDropIndex_(index), visitedViews)\"\n          @closeTags=\"closeTags(item)\"\n          @openMenu=\"openMenu(item, $event, 1)\"\n        />\n      </div>\n      <template slot=\"reference\">\n        <div class=\"tags-popover-btn\" :class=\"{'active': showPopover}\"><i class=\"el-icon-more\" /></div>\n      </template>\n    </el-popover>\n    <TagsMenu\n      v-show=\"visible[0]\"\n      :right-menu-left=\"rightMenuLeft\"\n      :right-menu-top=\"rightMenuTop\"\n      :selected-tag=\"selectedTag\"\n      @onMenu=\"handleRightMenu\"\n    />\n  </div>\n</template>\n\n<script>\nimport path from 'path'\nimport LinkTag from './LinkTag'\nimport TagsMenu from './TagsMenu'\nimport { tagsMixins } from './tagsMixins.js'\n\nexport default {\n  name: 'TagsView',\n  components: { LinkTag, TagsMenu },\n  // components: { ScrollPane },\n  mixins: [tagsMixins],\n  props: {\n    allMenu: {\n      type: Array,\n      default: () => []\n    },\n    // 所有菜单\n    allRoutes: {\n      type: Array,\n      default: () => []\n    },\n    visitedViews: {\n      type: Array,\n      default: () => []\n    },\n    cachedViews: {\n      type: Array,\n      default: () => []\n    },\n    isCollapse: {\n      type: Boolean,\n      default: false\n    },\n    tagsCut: { // 多余菜单 额外显示\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      visible: [false, false],\n      rightMenuTop: 0,\n      rightMenuLeft: 0,\n      selectedTag: {},\n      affixTags: [],\n      rePage: '',\n      showPopover: false,\n      containerWidth: 0,\n      timeout: null,\n      sizeRecord: {}, // 记录所有item项的信息，\n      maxOtherWidth: 60,\n      otherWidth: 0, // 剩下的宽度\n      prevFullPath: ''\n    }\n  },\n  computed: {\n    endIndex_() {\n      let containerWidth = this.containerWidth\n      let index = this.visitedViews.length - 1\n      let otherWidth = 0\n      this.visitedViews.some((v, i) => {\n        const meta = v.meta || {}\n        const recodeItem = this.sizeRecord[`${v.title}${meta.affix || ''}${v.path}`] || {}\n        const width = recodeItem.offsetWidth || 0\n        otherWidth = containerWidth\n        containerWidth -= width\n        if (containerWidth > 0) {\n          index = i\n          return false\n        }\n        this.otherWidth = otherWidth\n        return true\n      })\n      if (otherWidth >= this.maxOtherWidth) {\n        return index + 1\n      }\n      return index\n    },\n    otherDropIndex_() {\n      return (index) => {\n        return index + this.endIndex_ + 1\n      }\n    },\n    hadAddEnd_() {\n      return this.otherWidth >= this.maxOtherWidth\n    },\n    otherVisitedViews_() {\n      return this.visitedViews.slice(this.endIndex_ + 1)\n    },\n    tagStyle_() {\n      return (index) => {\n        if (this.hadAddEnd_ && index === this.endIndex_ && this.tagsCut) {\n          return {\n            width: `${this.otherWidth}px`,\n            marginRight: '0'\n          }\n        } else {\n          return {}\n        }\n      }\n    }\n  },\n  // computed: {\n  //   ...mapGetters(['sidebar', 'visitedViews']),\n  //   visitedViews () {\n  //     return this.$store.state.tagsView.visitedViews\n  //   },\n  //   cachedViews () {\n  //     return this.$store.state.tagsView.cachedViews\n  //   },\n  //   routes () {\n  //     return this.$store.state.permission.routes\n  //   }\n  // },\n  watch: {\n    $route(now, old) {\n      this.prevFullPath = old.fullPath\n      this.addVisitedTag(this.$route)\n      // this.moveToCurrentTag()\n    },\n    visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    },\n    visitedViews: {\n      immediate: true,\n      handler(nval) {\n        this.$nextTick(() => {\n          const sizeRecord = { ...this.sizeRecord }\n          this.$refs['tag'].forEach((e, i) => {\n            const index = e.$el.getAttribute('index')\n            const item = this.visitedViews[index]\n            const meta = item.meta || {}\n            const key = `${item.title}${meta.affix || ''}${item.path}`\n            if (!sizeRecord[key]) {\n              // title affix path 三个拼接当作key\n              sizeRecord[key] = { offsetWidth: e.$el.offsetWidth + 8 }\n            }\n          })\n          this.sizeRecord = sizeRecord\n        })\n      }\n    },\n    isCollapse(nval) {\n      setTimeout(() => {\n        this.containerWidth = this.$refs.tagsViewContainer.clientWidth\n      }, 1000)\n    }\n  },\n  mounted() {\n    this.containerWidth = this.$refs.tagsViewContainer.clientWidth\n    this.initTags()\n    let indexRouter = this.allRoutes.find(v => v.path === '/')\n    // 获取重定向后的首页路由信息\n    if (indexRouter && indexRouter.redirect) {\n      indexRouter = this.getRouter(indexRouter.redirect, this.allRoutes)\n    }\n    // 插入首页tag\n    if (indexRouter) {\n      indexRouter.fullPath = indexRouter.path\n      this.addVisitedTag(indexRouter)\n    }\n    this.addVisitedTag(this.$route)\n    // actions.onGlobalStateChange(state => {\n    //   console.log('state---', state)\n    //   if (!state.g6_visible) {\n    //     this.closeTags({ path: '/editor/flow' })\n    //   }\n    //   if (state.deleteCurrent) {\n    //     console.log('this.$refs.closeTag[0].$attrs', this.$refs.closeTag[0].$attrs['data-tag'])\n    //     this.closeTags(this.$refs.closeTag[0].$attrs['data-tag'])\n    //     actions.setGlobalState({ deleteCurrent: false })\n    //     this.rePage = state.rePage\n    //   }\n    // })\n  },\n  methods: {\n    getRouter(path, routers) {\n      if (!routers) return null\n      let reuslt = null\n      var rootList = [...routers]\n      // 广度遍历 获取\n      while (rootList.length && reuslt === null) {\n        const childrenList = []\n        while (rootList.length && reuslt === null) {\n          const nroot = rootList.shift()\n          if (nroot.path === path) {\n            reuslt = nroot\n          }\n          nroot.children && childrenList.push(...nroot.children)\n        }\n        if (childrenList.length) {\n          rootList.push(...childrenList)\n        }\n      }\n      // 获取到的值若还存在重定向则继续查找\n      const redirect = reuslt && reuslt.redirect\n      if (redirect) {\n        return this.getRouter(redirect, this.allRoutes)\n      }\n      return reuslt\n    },\n    // 点击右键菜单\n    handleRightMenu(type, item) {\n      this.closeMenu()\n      switch (type) {\n        case 'refresh':\n          this.refreshTags(item)\n          break\n        case 'close':\n          this.closeTags(item)\n          break\n        case 'others':\n          this.closeOthersTags(item)\n          break\n        case 'all':\n          this.closeAllTags()\n          break\n        case 'left':\n          this.closeLeftTags(item)\n          break\n        case 'right':\n          this.closeRightTags(item)\n          break\n      }\n    },\n    // 刷新页签\n    refreshTags(item) {\n      this.deleteCachedTag(item).then(() => {\n        const { fullPath } = item\n        this.$nextTick(() => {\n          this.$router\n            .replace({ path: '/redirect' + fullPath })\n            .then(() => {\n              if ('/redirect' + fullPath === this.$route.fullPath) {\n                this.$emit('refreshTagsActions')\n                // actions.setGlobalState({ refreshTags: true })\n              }\n            })\n            .catch((err) => {\n              console.log('err--', err)\n            })\n        })\n      })\n    },\n    // 关闭页签\n    closeTags(item) {\n      item && this.deleteVisitedTag(item).then((visitedViews) => {\n        if (this.isActive(item)) {\n          this.toLastTag(visitedViews)\n        }\n      })\n      // 触发resize事件\n      // this.$nextTick(() => {\n      //   const myEvent = new CustomEvent('menuResize', {\n      //     detail: {\n      //       isOpened: this.sidebar.opened,\n      //       visitedViews: this.visitedViews\n      //     },\n      //     bubbles: true,\n      //     cancelable: false\n      //   })\n      //   window.dispatchEvent(myEvent)\n      // })\n    },\n    // 关闭其他页签\n    closeOthersTags(tag) {\n      this.$router.push(tag)\n      this.deleteOthersVisitedTags(tag).then(() => {\n        // this.moveToCurrentTag()\n      })\n    },\n    // 关闭全部页签\n    closeAllTags() {\n      this.deleteAllVisitedTags().then(visitedViews => {\n        this.toLastTag(visitedViews)\n      })\n    },\n    // 关闭左边页签\n    closeLeftTags(item) {\n      this.deleteLeftVisitedTags(item)\n    },\n    // 关闭右边页签\n    closeRightTags(item) {\n      this.deleteRightVisitedTags(item).then((visitedViews) => {\n        this.toLastTag(visitedViews)\n      })\n    },\n    // 是否是当前页\n    isActive(item) {\n      return item.fullPath === this.$route.fullPath\n    },\n    filterAffixTags(routes, basePath = '/') {\n      let tags = []\n      routes.forEach(route => {\n        if (route.meta && route.meta.affix) {\n          const tagPath = path.resolve(basePath, route.path)\n          tags.push({\n            fullPath: tagPath,\n            path: tagPath,\n            // name: route.name,\n            meta: { ...route.meta }\n          })\n        }\n        if (route.children) {\n          const tempTags = this.filterAffixTags(route.children, route.path)\n          if (tempTags.length >= 1) {\n            tags = [...tags, ...tempTags]\n          }\n        }\n      })\n      return tags\n    },\n    // 更新页签\n    moveToCurrentTag() {\n      const tags = this.$refs.tag\n      this.$nextTick(() => {\n        for (const tag of tags) {\n          if (tag.to.path === this.$route.path) {\n            // this.$refs.scrollPane.moveToTarget(tag)\n            if (tag.to.fullPath !== this.$route.fullPath) {\n              // this.$store.dispatch('tagsView/updateVisitedView', this.$route)\n            }\n            break\n          }\n        }\n      })\n    },\n    // 跳转到最后一个页签\n    toLastTag(visitedViews) {\n      const latestView = visitedViews.slice(-1)[0]\n\n      if (this.prevFullPath) {\n        const prevView = visitedViews.find(item => item.fullPath === this.prevFullPath)\n\n        if (prevView) {\n          this.$router.push(prevView)\n          return\n        }\n      }\n\n      if (this.rePage) {\n        this.$router.push(this.rePage)\n        this.rePage = ''\n      } else if (latestView) {\n        this.$router.push(latestView)\n      } else {\n        this.$router.push('/')\n      }\n    },\n    // 打开右键菜单\n    openMenu(tag, e, index) {\n      const left = e.clientX\n      this.rightMenuLeft = left\n      this.rightMenuTop = e.clientY\n      this.selectedTag = tag\n      const visible = [false, false]\n      visible[index] = true\n      this.visible = visible\n    },\n    // 关闭右键菜单\n    closeMenu() {\n      this.visible = [false, false]\n    },\n    // 拖拽\n    allowDrop(e) {\n      e.preventDefault()\n    },\n    dragStart(e, index) {\n      this.visible = [false, false]\n      index !== 0 && e.dataTransfer.setData('index', index)\n    },\n    drop(e, index, data) {\n      this.allowDrop(e)\n      const dragIndex = Number(e.dataTransfer.getData('index'))\n      if (index !== 0 && dragIndex !== 0) {\n        const temp = data.splice(dragIndex, 1)\n        data.splice(index, 0, temp[0])\n      }\n      this.setVisitedView(data)\n      // this.$store.dispatch('tagsView/setVisitedView', data)\n    },\n    initTags() {\n      const affixTags = (this.affixTags = this.filterAffixTags(this.allMenu))\n      for (const tag of affixTags) {\n        if (tag.path) {\n          // this.$store.dispatch('tagsView/addVisitedView', tag)\n          this.addVisitedTag(tag)\n        }\n      }\n    },\n    resizeWidth() {\n      this.containerWidth = this.$refs.tagsViewContainer.clientWidth\n    },\n    // 关闭当前标签页(外部调用不要删)\n    closeCurrentTag() {\n      const item = this.visitedViews.find(v => v.fullPath === this.$route.fullPath)\n      this.closeTags(item)\n    }\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}