{"ast":null,"code":"import _ from \"lodash\";\nimport packageConfig from \"../package.json\";\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\";\n    this.plusCommonAnalysisKey = \"plusAnalyticCache\";\n    this.initParam = params;\n    this.resetDefaultParams();\n    this.setSystemPlateformType(params.type);\n    this.isInit = Boolean(this.getCacheTime());\n    this.getVolcegineProps();\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers uni-app pages.json 里的pages数组\n   * @param {*} tabBar uni-app pages.json 里的tarBar配置里的list数组\n   */\n  init(rouers, tabBar) {\n    try {\n      if (!this.getIsLaunch() && this.systemPlateformType === 2) {\n        const nowTime = new Date().getTime();\n        this.setCacheTime(nowTime);\n      }\n      this.updateRouter(rouers, tabBar);\n      if (this.systemPlateformType === 1) {\n        this.setCacheVisitWebUrl(window.location.href);\n      }\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0]);\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers);\n          this.setCacheVisitUrl(currentUrl);\n        }\n      }\n    } catch (e) {\n      console.warn(\"火山引擎SDK 初始化错误: \");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    let volcengineProps;\n    if (this.systemPlateformType === 1) {\n      // PC 和 H5 走 localStorage\n      volcengineProps = localStorage.getItem(this.cacheRoutersKey);\n    } else {\n      // 小程序 和 App 走 getStorageSync\n      volcengineProps = uni.getStorageSync(this.cacheRoutersKey);\n    }\n    if (!volcengineProps) {\n      volcengineProps = {};\n    } else {\n      volcengineProps = JSON.parse(volcengineProps);\n    }\n    try {\n      const routeInfo = rouers;\n      const routeInfoRouter = this.forEachArr(routeInfo, 0);\n      const tabbarInfo = tabBar;\n      const tabRouter = this.forEachArr(tabbarInfo, 1);\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      };\n      this.setVolcenginePropsCache();\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\");\n      console.warn(e);\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    const commonAttr = this.commonAttr;\n    const emptyObject = {};\n    commonAttr.forEach(item => {\n      emptyObject[item] = this.nullProp;\n      if (!this.volcengineProps[path]) {\n        this.volcengineProps[path] = {};\n      }\n      const pathItem = this.volcengineProps[path];\n      this.volcengineProps[path][item] = pathItem[item] || this.nullProp;\n    });\n    if (!this.initParam.routerObject) {\n      const sourceNameObject = this.getFromQueryNameContent(path);\n      this.volcengineProps[path] = {\n        ...this.volcengineProps[path],\n        ...sourceNameObject\n      };\n    }\n    return this.volcengineProps[path] || emptyObject;\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    const volcengineProps = {};\n    if (Array.isArray(arr)) {\n      if (arr.length > 0) {\n        arr.forEach(item => {\n          const path = type === 0 ? item.path : item.pagePath;\n          volcengineProps[\"/\" + path] = {};\n          volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path;\n          volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp;\n          // 先默认为空，等对应的子类那边触发路由变化的时候再改\n          const meta = item.meta || item.style;\n          const metaKeys = meta ? Object.keys(meta) : [];\n          if (metaKeys.length > 0) {\n            metaKeys.forEach(keyName => {\n              if (this.commonAttrRealation[keyName]) {\n                const volcengineKeyName = this.commonAttrRealation[keyName];\n                volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName];\n              }\n            });\n          }\n          const versionInfo = this.getVersionInfo();\n          if (versionInfo) {\n            volcengineProps[\"/\" + path] = {\n              ...volcengineProps[\"/\" + path],\n              ...versionInfo\n            };\n          }\n          // 存入meta 字段\n          const itemMeta = item.meta;\n          const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : [];\n          if (itemMetaKeys.length > 0) {\n            itemMetaKeys.forEach(itemInfo => {\n              if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                const volcengineFinalKey = itemInfo.replace(/[A-Z]/g, key => `_${key.toLowerCase()}`);\n                volcengineProps[\"/\" + path][volcengineFinalKey] = itemMeta[itemInfo];\n              }\n            });\n          }\n        });\n      }\n    }\n    return volcengineProps;\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\";\n    // 默认的空值\n    this.commonAttr = [\"custom_page_title\", \"custom_page_url_path\",\n    // /pages/xxx\n    \"custom_page_url\",\n    // https\n    \"sub_app_name\", \"custom_app_version_name\" // 应用当前版本\n    ];\n    // 公共属性\n    this.isVolcengine = true;\n    // 是否是火山引擎环境\n    this.isError = false;\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\";\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\";\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\";\n    this.catcheVisitWebUrlKey = \"volcengineLastWebUrl\";\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\";\n    this.cacheOldRouterTitleKey = \"volcengineOldRouterTitle\";\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\";\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    };\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = [];\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\";\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams) ? this.initParam.eventQueryParams : [];\n    this.plusEventParamCacheKey = \"volcenginePlusEventParamCache\";\n    this.scrollEventCacheKey = \"volcengineScrollEventCache\";\n    this.isLaunchCacheKey = \"volcengineIsLaunchCache\";\n    this.isHideCacheKey = \"volcengineIsHideCache\";\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web 2-小程序\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0; // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    if (this.systemPlateformType === 1) {\n      localStorage.removeItem(this.commonAnalysisKey);\n    } else {\n      uni.removeStorageSync(this.commonAnalysisKey);\n    }\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n    const cacheResult = this.getStorageByPath(path, 0);\n    return cacheResult;\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey;\n    this.setStorageByPath(path, time);\n  }\n\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n\n  getCacheVisitUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n    const cacheResult = this.getStorageByPath(path, \"\");\n    return cacheResult;\n  }\n\n  /**\n   * 获取上一次的Web路由完整的地址\n   * @returns\n   */\n  getCacheVisitWebUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey;\n    const cacheResult = this.getStorageByPath(path, \"\");\n    return cacheResult;\n  }\n  getCacheOldRouterTitle() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey;\n    const cacheResult = this.getStorageByPath(path, \"\");\n    return cacheResult;\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n\n  setCacheVisitUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey;\n    this.setStorageByPath(path, url);\n  }\n  setCacheOldRouterTitle(title) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey;\n    this.setStorageByPath(path, title);\n  }\n  /**\n   * 设置上一次的完整的Web路由访问地址\n   * @returns\n   */\n\n  setCacheVisitWebUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey;\n    this.setStorageByPath(path, url);\n  }\n  /**\n   * 获取上一次H5的请求参数\n   */\n  getWebviewCache() {\n    const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey;\n    const cacheResult = this.getStorageByPath(path, {}, true);\n    return cacheResult;\n  }\n  /**\n   *\n   * @param {*} path\n   * @returns\n   */\n  setWebviewCache(param) {\n    const time = this.getCacheTime();\n    let finalParam = {};\n    finalParam[this.cacheTimeKey] = time;\n    finalParam = {\n      ...finalParam,\n      ...param\n    };\n    const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey;\n    this.setStorageByPath(path, finalParam, true);\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    const currentOptions = this.getCurrentOptions(path);\n    let sourceNameObject = {};\n    const cacheSourceNameObject = this.getFromQueryNameCache();\n    const fromQueryNameArr = this.fromQueryNameArr;\n    let isNeedChangeCache = false;\n    if (fromQueryNameArr.length) {\n      fromQueryNameArr.forEach(item => {\n        const itemResult = currentOptions[item] || cacheSourceNameObject[item];\n        const changeCondition = currentOptions[item] && cacheSourceNameObject[item] && currentOptions[item] !== cacheSourceNameObject[item];\n        const emptyChangeCondition = currentOptions[item] && !cacheSourceNameObject[item];\n        // 当缓存和链接有不一致的时候更新缓存\n        if (changeCondition || emptyChangeCondition) {\n          isNeedChangeCache = true;\n        }\n        sourceNameObject[item] = itemResult || this.nullProp;\n      });\n      // 当有传入queryName 但无缓存的时候\n      if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n        this.setFromQueryNameCache(sourceNameObject);\n      }\n    } else {\n      sourceNameObject = cacheSourceNameObject;\n    }\n    return sourceNameObject;\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n    const cacheResult = this.getStorageByPath(path, {});\n    return cacheResult;\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey;\n    this.setStorageByPath(path, source);\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n    let volcengineProps = this.getStorageByPath(path, null);\n    if (!volcengineProps) {\n      volcengineProps = {};\n    } else {\n      volcengineProps = JSON.parse(volcengineProps);\n    }\n    this.volcengineProps = volcengineProps;\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    const volcenginePropsCache = JSON.stringify(this.volcengineProps);\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey;\n    this.setStorageByPath(path, volcenginePropsCache);\n  }\n  getScrollEventCache() {\n    const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey;\n    let scrollEventCache = this.getStorageByPath(path, null);\n    if (!scrollEventCache) {\n      scrollEventCache = {};\n    } else {\n      scrollEventCache = JSON.parse(scrollEventCache);\n    }\n    return scrollEventCache;\n  }\n  /**\n   * 设置滚动列表的相关参数缓存\n   * 缓存结构如下： {\n   *  anchorName: [], //锚点名称\n   *  scrollTime:0 // 滚动开始的时间,\n   *  anchorWrapper:'', // 锚点的选取范围\n   *  scrollThreshold:'', // 停留时间上报的最小值，默认只要发生停留就上报\n   *  scrollDistance:'', // 滚动的锚点上报范围\n   *  scrollTop: '', // 滚动条的位置\n   * }\n   */\n  setScrollEventCache(scrollEventCache) {\n    const scrollEventCacheStr = JSON.stringify(scrollEventCache);\n    const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey;\n    this.setStorageByPath(path, scrollEventCacheStr);\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n  setCurrentRouterInfo(routerParam) {\n    const volcengineRouterInfoCache = JSON.stringify(routerParam);\n    this.setStorageByPath(this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey, volcengineRouterInfoCache);\n  }\n  getCurrentRouterInfo() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey;\n    let routerInfo = this.getStorageByPath(path, null);\n    if (!routerInfo) {\n      routerInfo = {};\n    } else {\n      routerInfo = JSON.parse(routerInfo);\n    }\n    return routerInfo;\n  }\n  getIsLaunch() {\n    const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey;\n    return this.getStorageByPath(path, false);\n  }\n  setIsLaunch(isLaunch) {\n    const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey;\n    this.setStorageByPath(path, isLaunch);\n  }\n  setIsHide(isHide) {\n    const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey;\n    return this.setStorageByPath(path, isHide);\n  }\n  getIsHide() {\n    const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey;\n    return this.getStorageByPath(path, false);\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages;\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    const page = getCurrentPages().map(e => `/${e.route}`).reverse(); // 获取页面栈\n    return page;\n  }\n  getCurrentOptions(path) {\n    let options = {};\n    if (!this.initParam.uniPluginObject) {\n      // uni-app\n      try {\n        const currentUrl = window.location.href;\n        options = this.getUrlParams(currentUrl);\n      } catch (e) {}\n    } else {\n      const currentArr = getCurrentPages().filter(el => {\n        return \"/\" + el.route === path;\n      });\n      const current = currentArr.length ? currentArr[0] : [];\n      options = current.options || {};\n    }\n    return options;\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    const urlStr = url.split(\"?\")[1];\n    // 创建空对象存储参数\n    const obj = {};\n    // 再通过 & 将每一个参数单独分割出来\n    const paramsArr = urlStr.split(\"&\");\n    for (let i = 0, len = paramsArr.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      const arr = paramsArr[i].split(\"=\");\n      obj[arr[0]] = arr[1];\n    }\n    return obj;\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined, isPlus = false) {\n    path = typeof path === \"string\" ? path.split(\".\") : path;\n    path = path.filter(x => x);\n    // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n    let lsValue;\n    if (this.systemPlateformType === 1) {\n      // PC 和 H5 走 localStorage\n      lsValue = localStorage.getItem(path[0]) || undefined;\n      if (lsValue) {\n        try {\n          lsValue = JSON.parse(lsValue);\n        } catch (e) {\n          lsValue = {};\n        }\n      }\n    } else {\n      if (isPlus) {\n        lsValue = plus.storage.getItem(path[0]) || undefined;\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue);\n          } catch (e) {\n            lsValue = {};\n          }\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || undefined;\n      }\n    }\n    // 若 path 只有一级，直接读取\n    const valueByPath = lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue;\n    const result =\n    // eslint-disable-next-line valid-typeof\n    !valueByPath && typeof nullType !== undefined ? nullType : valueByPath;\n    return result;\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value, isPlus = false) {\n    path = typeof path === \"string\" ? path.split(\".\") : path;\n    path = path.filter(x => x);\n    let result = \"\";\n    if (path.length > 1) {\n      // 若 path 不只一级，需要取出按 key 路径重新赋值\n      let lsValue;\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走localStorage\n        lsValue = localStorage.getItem(path[0]);\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue);\n          } catch (e) {\n            lsValue = {};\n          }\n        } else {\n          lsValue = {};\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || {};\n      }\n      result = _.set(lsValue, path.slice(1), value);\n    } else if (path.length === 1) {\n      // 若 path 只有一级，直接存入\n      result = value;\n    }\n    if (this.systemPlateformType === 1) {\n      if (isPlus) {\n        plus.storage.setItem(path[0], JSON.stringify(result));\n      } else {\n        localStorage.setItem(path[0], JSON.stringify(result));\n      }\n    } else {\n      uni.setStorageSync(path[0], result);\n    }\n    return !!result;\n  }\n  getNowPath(routeInfo) {\n    let currentUrl;\n    try {\n      const routerArr = routeInfo;\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href;\n        routerArr.forEach(item => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path;\n          }\n        });\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path;\n      }\n    } catch (e) {\n      currentUrl = \"/\";\n    }\n    return currentUrl;\n  }\n  getAppVersion() {\n    try {\n      const versionInfo = this.getVersionInfo();\n      return {\n        user_custom_app_version_name: versionInfo[\"custom_app_version_name\"]\n      };\n    } catch (e) {\n      return {\n        user_custom_app_version_name: \"\"\n      };\n    }\n  }\n  /**\n   * 获取sdk 版本信息\n   * @returns\n   */\n\n  getSdkVersion() {\n    try {\n      const versionInfo = this.getVersionInfo();\n      return {\n        user_analytics_sdk_version_name: versionInfo[\"analytics_sdk_version_name\"]\n      };\n    } catch (e) {\n      return {\n        user_analytics_sdk_version_name: \"\"\n      };\n    }\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      const versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      };\n      const initParam = this.initParam;\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion;\n        versionInfo.custom_app_version_name = appWgtVersion;\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\";\n        versionInfo.custom_app_version_name = packageVersion;\n      } else {\n        // H5\n\n        const version = uni.getSystemInfoSync().appWgtVersion || uni.getSystemInfoSync().appVersion;\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version;\n        if (!version) {\n          versionInfo.custom_app_version_name = UNI_VERSION.versionName || UNI_VERSION.version;\n        }\n      }\n      return versionInfo;\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      };\n    }\n  }\n  checkUrlValid(url) {\n    const reg = /http[s]?:\\/\\/[\\w.]+[\\w\\/]*[\\w.]*\\??[\\w=&\\+\\%]*/;\n    return reg.test(url);\n  }\n}","map":{"version":3,"names":["_","packageConfig","Volcengine","constructor","params","commonAnalysisKey","plusCommonAnalysisKey","initParam","resetDefaultParams","setSystemPlateformType","type","isInit","Boolean","getCacheTime","getVolcegineProps","init","rouers","tabBar","getIsLaunch","systemPlateformType","nowTime","Date","getTime","setCacheTime","updateRouter","setCacheVisitWebUrl","window","location","href","pages","setCacheVisitUrl","getCacheVisitUrl","currentUrl","getNowPath","e","console","warn","volcengineProps","localStorage","getItem","cacheRoutersKey","uni","getStorageSync","JSON","parse","routeInfo","routeInfoRouter","forEachArr","tabbarInfo","tabRouter","setVolcenginePropsCache","getCommonAttr","path","commonAttr","emptyObject","forEach","item","nullProp","pathItem","routerObject","sourceNameObject","getFromQueryNameContent","arr","Array","isArray","length","pagePath","meta","style","metaKeys","Object","keys","keyName","commonAttrRealation","volcengineKeyName","versionInfo","getVersionInfo","itemMeta","itemMetaKeys","itemInfo","includes","volcengineFinalKey","replace","key","toLowerCase","isVolcengine","isError","cacheTimeKey","catcheVisitUrlKey","catcheVisitWebUrlKey","catcheVersionKey","cacheOldRouterTitleKey","cacheRouterInfoKey","pageName","subAppName","navigationBarTitleText","fromQueryNameCacheKey","fromQueryNameArr","eventQueryParams","plusEventParamCacheKey","scrollEventCacheKey","isLaunchCacheKey","isHideCacheKey","removeCache","removeItem","removeStorageSync","cacheResult","getStorageByPath","time","setStorageByPath","getCacheVisitWebUrl","getCacheOldRouterTitle","url","setCacheOldRouterTitle","title","getWebviewCache","setWebviewCache","param","finalParam","currentOptions","getCurrentOptions","cacheSourceNameObject","getFromQueryNameCache","isNeedChangeCache","itemResult","changeCondition","emptyChangeCondition","setFromQueryNameCache","source","volcenginePropsCache","stringify","getScrollEventCache","scrollEventCache","setScrollEventCache","scrollEventCacheStr","setCurrentRouterInfo","routerParam","volcengineRouterInfoCache","getCurrentRouterInfo","routerInfo","setIsLaunch","isLaunch","setIsHide","isHide","getIsHide","changeCurrentPage","getCurrentPagesArr","page","getCurrentPages","map","route","reverse","options","uniPluginObject","getUrlParams","currentArr","filter","el","current","urlStr","split","obj","paramsArr","i","len","nullType","undefined","isPlus","x","lsValue","plus","storage","valueByPath","get","slice","result","value","set","setItem","setStorageSync","routerArr","nowFullPath","indexOf","getAppVersion","user_custom_app_version_name","getSdkVersion","user_analytics_sdk_version_name","analytics_sdk_version_name","version","appWgtVersion","getSystemInfoSync","custom_app_version_name","packageVersion","WEB_VERSION","appVersion","UNI_VERSION","versionName","checkUrlValid","reg","test"],"sources":["/Users/myproject/vuedemo/node_modules/@cndinfo/cube-design-web/node_modules/@cndinfo/cube-analytics-sdk/common/index.js"],"sourcesContent":["import _ from \"lodash\"\nimport packageConfig from \"../package.json\"\n\nexport class Volcengine {\n  constructor(params) {\n    this.commonAnalysisKey = \"analyticCache\"\n    this.plusCommonAnalysisKey = \"plusAnalyticCache\"\n    this.initParam = params\n    this.resetDefaultParams()\n    this.setSystemPlateformType(params.type)\n    this.isInit = Boolean(this.getCacheTime())\n    this.getVolcegineProps()\n  }\n  /**\n   * 初始化火山引擎： 1、记录第一次进入App 访问时间 2、读取路由并写入缓存\n   * @param {*} rouers uni-app pages.json 里的pages数组\n   * @param {*} tabBar uni-app pages.json 里的tarBar配置里的list数组\n   */\n  init(rouers, tabBar) {\n    try {\n      if(!this.getIsLaunch() && this.systemPlateformType === 2){\n        const nowTime = new Date().getTime()\n        this.setCacheTime(nowTime)\n      }\n      this.updateRouter(rouers, tabBar)\n      if (this.systemPlateformType === 1) {\n        this.setCacheVisitWebUrl(window.location.href)\n      }\n      // 是否存在pages[0]\n      if (this.pages[0]) {\n        this.setCacheVisitUrl(this.pages[0])\n      } else {\n        if (!this.getCacheVisitUrl()) {\n          const currentUrl = this.getNowPath(rouers)\n          this.setCacheVisitUrl(currentUrl)\n        }\n      }\n    } catch (e) {\n      console.warn(\"火山引擎SDK 初始化错误: \")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 读取路由信息并写入缓存\n   * @param {*} rouers pages.json里面的 pages 参数\n   * @param {*} tabBar pages.json里面的 tabBar.list 参数\n   */\n  updateRouter(rouers, tabBar) {\n    let volcengineProps\n    if (this.systemPlateformType === 1) {\n      // PC 和 H5 走 localStorage\n      volcengineProps = localStorage.getItem(this.cacheRoutersKey)\n    } else {\n      // 小程序 和 App 走 getStorageSync\n      volcengineProps = uni.getStorageSync(this.cacheRoutersKey)\n    }\n    if (!volcengineProps) {\n      volcengineProps = {}\n    } else {\n      volcengineProps = JSON.parse(volcengineProps)\n    }\n    try {\n      const routeInfo = rouers\n      const routeInfoRouter = this.forEachArr(routeInfo, 0)\n      const tabbarInfo = tabBar\n      const tabRouter = this.forEachArr(tabbarInfo, 1)\n      this.volcengineProps = {\n        ...routeInfoRouter,\n        ...tabRouter\n      }\n      this.setVolcenginePropsCache()\n    } catch (e) {\n      console.warn(\"火山引擎SDK 更新路由信息 发生错误:\")\n      console.warn(e)\n    }\n  }\n\n  /**\n   * 获取公共属性\n   * @param {*} path 当前的路由\n   * @returns Object\n   */\n  getCommonAttr(path) {\n    const commonAttr = this.commonAttr\n    const emptyObject = {}\n    commonAttr.forEach((item) => {\n      emptyObject[item] = this.nullProp\n      if (!this.volcengineProps[path]) {\n        this.volcengineProps[path] = {}\n      }\n      const pathItem = this.volcengineProps[path]\n      this.volcengineProps[path][item] = pathItem[item] || this.nullProp\n    })\n    if (!this.initParam.routerObject) {\n      const sourceNameObject = this.getFromQueryNameContent(path)\n      this.volcengineProps[path] = {\n        ...this.volcengineProps[path],\n        ...sourceNameObject\n      }\n    }\n    return this.volcengineProps[path] || emptyObject\n  }\n  /**\n   * 遍历数组\n   * @param {Array} arr pages.json 对应的数组\n   * @param {int} type 0-普通的路由 1-tabar\n   */\n  forEachArr(arr, type) {\n    const volcengineProps = {}\n    if (Array.isArray(arr)) {\n      if (arr.length > 0) {\n        arr.forEach((item) => {\n          const path = type === 0 ? item.path : item.pagePath\n          volcengineProps[\"/\" + path] = {}\n          volcengineProps[\"/\" + path][\"custom_page_url_path\"] = \"/\" + path\n          volcengineProps[\"/\" + path][\"custom_page_url\"] = this.nullProp\n          // 先默认为空，等对应的子类那边触发路由变化的时候再改\n          const meta = item.meta || item.style\n          const metaKeys = meta ? Object.keys(meta) : []\n          if (metaKeys.length > 0) {\n            metaKeys.forEach((keyName) => {\n              if (this.commonAttrRealation[keyName]) {\n                const volcengineKeyName = this.commonAttrRealation[keyName]\n                volcengineProps[\"/\" + path][volcengineKeyName] = meta[keyName]\n              }\n            })\n          }\n          const versionInfo = this.getVersionInfo()\n          if (versionInfo) {\n            volcengineProps[\"/\" + path] = {\n              ...volcengineProps[\"/\" + path],\n              ...versionInfo\n            }\n          }\n          // 存入meta 字段\n          const itemMeta = item.meta\n          const itemMetaKeys = itemMeta ? Object.keys(itemMeta) : []\n          if (itemMetaKeys.length > 0) {\n            itemMetaKeys.forEach((itemInfo) => {\n              if (![\"subAppName\", \"pageName\"].includes(itemInfo)) {\n                const volcengineFinalKey = itemInfo.replace(\n                  /[A-Z]/g,\n                  (key) => `_${key.toLowerCase()}`\n                )\n                volcengineProps[\"/\" + path][volcengineFinalKey] =\n                  itemMeta[itemInfo]\n              }\n            })\n          }\n        })\n      }\n    }\n    return volcengineProps\n  }\n\n  /**\n   * 初始化默认参数\n   */\n  resetDefaultParams() {\n    this.nullProp = \"\"\n    // 默认的空值\n    this.commonAttr = [\n      \"custom_page_title\",\n      \"custom_page_url_path\", // /pages/xxx\n      \"custom_page_url\", // https\n      \"sub_app_name\",\n      \"custom_app_version_name\" // 应用当前版本\n    ]\n    // 公共属性\n    this.isVolcengine = true\n    // 是否是火山引擎环境\n    this.isError = false\n    this.cacheTimeKey = \"volcengineLastPageVisitTime\"\n    // 页面访问时间的缓存key\n    this.cacheRoutersKey = \"volcengineProps\"\n    // 路由信息的缓存key\n    this.catcheVisitUrlKey = \"volcengineLastUrl\"\n    this.catcheVisitWebUrlKey = \"volcengineLastWebUrl\"\n    // 版本信息的缓存key\n    this.catcheVersionKey = \"volcengineVersionInfo\"\n    this.cacheOldRouterTitleKey = \"volcengineOldRouterTitle\"\n    // pc端vue-router 对应的 缓存（通过afterEach 才可以获得正确的数据）\n    this.cacheRouterInfoKey = \"volcengineRouterObjectInfo\"\n    this.commonAttrRealation = {\n      pageName: \"custom_page_title\",\n      path: \"custom_page_url_path\",\n      subAppName: \"sub_app_name\",\n      navigationBarTitleText: \"custom_page_title\"\n    }\n    // commonAttr 和 pages.json 里面对应关系\n    // custom_page_url 不用写进去\n    this.pages = []\n    // 来源的key\n    this.fromQueryNameCacheKey = \"fromQueryNameCache\"\n    this.fromQueryNameArr = Array.isArray(this.initParam.eventQueryParams)\n      ? this.initParam.eventQueryParams\n      : []\n    this.plusEventParamCacheKey = \"volcenginePlusEventParamCache\"\n    this.scrollEventCacheKey = \"volcengineScrollEventCache\"\n    this.isLaunchCacheKey = \"volcengineIsLaunchCache\"\n    this.isHideCacheKey = \"volcengineIsHideCache\"\n  }\n\n  /**\n   * 设置当前项目所在用的平台\n   * @param {number} type  0 uni-app 1 web 2-小程序\n   */\n  setSystemPlateformType(type) {\n    this.systemPlateformType = type || 0 // 默认为uni-app\n  }\n  /**\n   * 移除火山的全部缓存\n   */\n  removeCache() {\n    if (this.systemPlateformType === 1) {\n      localStorage.removeItem(this.commonAnalysisKey)\n    } else {\n      uni.removeStorageSync(this.commonAnalysisKey)\n    }\n  }\n  /**\n   * 获取最后一次访问页面的时间\n   */\n  getCacheTime() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n    const cacheResult = this.getStorageByPath(path, 0)\n    return cacheResult\n  }\n  /**\n   * 设置页面访问的时间（写入缓存）\n   * @param {*} time 页面访问时间\n   */\n  setCacheTime(time) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheTimeKey\n    this.setStorageByPath(path, time)\n  }\n\n  /**\n   * 获取上一次的路由访问地址\n   * @returns\n   */\n\n  getCacheVisitUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n    const cacheResult = this.getStorageByPath(path, \"\")\n    return cacheResult\n  }\n\n  /**\n   * 获取上一次的Web路由完整的地址\n   * @returns\n   */\n  getCacheVisitWebUrl() {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey\n    const cacheResult = this.getStorageByPath(path, \"\")\n    return cacheResult\n  }\n  getCacheOldRouterTitle() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey\n    const cacheResult = this.getStorageByPath(path, \"\")\n    return cacheResult\n  }\n  /**\n   * 设置上一次的路由访问地址\n   * @returns\n   */\n\n  setCacheVisitUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitUrlKey\n    this.setStorageByPath(path, url)\n  }\n\n  setCacheOldRouterTitle(title) {\n    const path = this.commonAnalysisKey + \".\" + this.cacheOldRouterTitleKey\n    this.setStorageByPath(path, title)\n  }\n  /**\n   * 设置上一次的完整的Web路由访问地址\n   * @returns\n   */\n\n  setCacheVisitWebUrl(url) {\n    const path = this.commonAnalysisKey + \".\" + this.catcheVisitWebUrlKey\n    this.setStorageByPath(path, url)\n  }\n  /**\n   * 获取上一次H5的请求参数\n   */\n  getWebviewCache() {\n    const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey\n    const cacheResult = this.getStorageByPath(path, {}, true)\n    return cacheResult\n  }\n  /**\n   *\n   * @param {*} path\n   * @returns\n   */\n  setWebviewCache(param) {\n    const time = this.getCacheTime()\n    let finalParam = {}\n    finalParam[this.cacheTimeKey] = time\n    finalParam = {\n      ...finalParam,\n      ...param\n    }\n    const path = this.plusCommonAnalysisKey + \".\" + this.plusEventParamCacheKey\n    this.setStorageByPath(path, finalParam, true)\n  }\n  /**\n   * 依据路由获取平台来源名称\n   * 路由没有则从缓存中取\n   * @param { String } path  路由\n   * @returns 平台来源名称\n   */\n  getFromQueryNameContent(path) {\n    const currentOptions = this.getCurrentOptions(path)\n    let sourceNameObject = {}\n    const cacheSourceNameObject = this.getFromQueryNameCache()\n    const fromQueryNameArr = this.fromQueryNameArr\n    let isNeedChangeCache = false\n    if (fromQueryNameArr.length) {\n      fromQueryNameArr.forEach((item) => {\n        const itemResult = currentOptions[item] || cacheSourceNameObject[item]\n        const changeCondition =\n          currentOptions[item] &&\n          cacheSourceNameObject[item] &&\n          currentOptions[item] !== cacheSourceNameObject[item]\n        const emptyChangeCondition =\n          currentOptions[item] && !cacheSourceNameObject[item]\n        // 当缓存和链接有不一致的时候更新缓存\n        if (changeCondition || emptyChangeCondition) {\n          isNeedChangeCache = true\n        }\n        sourceNameObject[item] = itemResult || this.nullProp\n      })\n      // 当有传入queryName 但无缓存的时候\n      if (!Object.keys(cacheSourceNameObject).length || isNeedChangeCache) {\n        this.setFromQueryNameCache(sourceNameObject)\n      }\n    } else {\n      sourceNameObject = cacheSourceNameObject\n    }\n    return sourceNameObject\n  }\n  /**\n   * 获取缓存的来源名称\n   * @returns  { String }\n   */\n  getFromQueryNameCache() {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n    const cacheResult = this.getStorageByPath(path, {})\n    return cacheResult\n  }\n  /**\n   * 设置缓存的来源名称\n   */\n  setFromQueryNameCache(source) {\n    const path = this.commonAnalysisKey + \".\" + this.fromQueryNameCacheKey\n    this.setStorageByPath(path, source)\n  }\n  /**\n   * 获取用户行为分析的缓存\n   */\n  getVolcegineProps() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n    let volcengineProps = this.getStorageByPath(path, null)\n    if (!volcengineProps) {\n      volcengineProps = {}\n    } else {\n      volcengineProps = JSON.parse(volcengineProps)\n    }\n    this.volcengineProps = volcengineProps\n  }\n  /**\n   * 设置用户行为分析的缓存\n   */\n  setVolcenginePropsCache() {\n    const volcenginePropsCache = JSON.stringify(this.volcengineProps)\n    const path = this.commonAnalysisKey + \".\" + this.cacheRoutersKey\n    this.setStorageByPath(path, volcenginePropsCache)\n  }\n  getScrollEventCache() {\n    const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey\n    let scrollEventCache = this.getStorageByPath(path, null)\n    if (!scrollEventCache) {\n      scrollEventCache = {}\n    } else {\n      scrollEventCache = JSON.parse(scrollEventCache)\n    }\n    return scrollEventCache\n  }\n  /**\n   * 设置滚动列表的相关参数缓存\n   * 缓存结构如下： {\n   *  anchorName: [], //锚点名称\n   *  scrollTime:0 // 滚动开始的时间,\n   *  anchorWrapper:'', // 锚点的选取范围\n   *  scrollThreshold:'', // 停留时间上报的最小值，默认只要发生停留就上报\n   *  scrollDistance:'', // 滚动的锚点上报范围\n   *  scrollTop: '', // 滚动条的位置\n   * }\n   */\n  setScrollEventCache(scrollEventCache) {\n    const scrollEventCacheStr = JSON.stringify(scrollEventCache)\n    const path = this.commonAnalysisKey + \".\" + this.scrollEventCacheKey\n    this.setStorageByPath(path, scrollEventCacheStr)\n  }\n  /**\n   * 仅PC端生效 设置最新的路由信息\n   *  @param {*} routerParam\n   */\n  setCurrentRouterInfo(routerParam) {\n    const volcengineRouterInfoCache = JSON.stringify(routerParam)\n    this.setStorageByPath(\n      this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey,\n      volcengineRouterInfoCache\n    )\n  }\n  getCurrentRouterInfo() {\n    const path = this.commonAnalysisKey + \".\" + this.cacheRouterInfoKey\n    let routerInfo = this.getStorageByPath(path, null)\n    if (!routerInfo) {\n      routerInfo = {}\n    } else {\n      routerInfo = JSON.parse(routerInfo)\n    }\n    return routerInfo\n  }\n  getIsLaunch() {\n    const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey\n    return this.getStorageByPath(path, false)\n  }\n  setIsLaunch(isLaunch) {\n    const path = this.commonAnalysisKey + \".\" + this.isLaunchCacheKey\n    this.setStorageByPath(path, isLaunch)\n  }\n  setIsHide(isHide) {\n    const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey\n    return this.setStorageByPath(path, isHide)\n  }\n  getIsHide() {\n    const path = this.commonAnalysisKey + \".\" + this.isHideCacheKey\n    return this.getStorageByPath(path, false)\n  }\n  /**\n   * 改变当前的页面栈\n   * @param { Array } pages (由url 路径组成)\n   */\n  changeCurrentPage(pages) {\n    this.pages = pages\n  }\n  /**\n   * 获取页面栈\n   * @param\n   * @returns  Array(由url 路径组成)\n   */\n  getCurrentPagesArr() {\n    const page = getCurrentPages()\n      .map((e) => `/${e.route}`)\n      .reverse() // 获取页面栈\n    return page\n  }\n  getCurrentOptions(path) {\n    let options = {}\n    if (!this.initParam.uniPluginObject) {\n      // uni-app\n      try {\n        const currentUrl = window.location.href\n        options = this.getUrlParams(currentUrl)\n      } catch (e) {}\n    } else {\n      const currentArr = getCurrentPages().filter((el) => {\n        return \"/\" + el.route === path\n      })\n      const current = currentArr.length ? currentArr[0] : []\n      options = current.options || {}\n    }\n    return options\n  }\n  /**\n   * * @param {String} url\n   *  获取url 后面的参数\n   */\n  getUrlParams(url) {\n    const urlStr = url.split(\"?\")[1]\n    // 创建空对象存储参数\n    const obj = {}\n    // 再通过 & 将每一个参数单独分割出来\n    const paramsArr = urlStr.split(\"&\")\n    for (let i = 0, len = paramsArr.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      const arr = paramsArr[i].split(\"=\")\n      obj[arr[0]] = arr[1]\n    }\n    return obj\n  }\n  /**\n   * 通过路径来获得存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  getStorageByPath(path, nullType = undefined, isPlus = false) {\n    path = typeof path === \"string\" ? path.split(\".\") : path\n    path = path.filter((x) => x)\n    // 1st 是 localStorage 的 key，2nd 开始才是对象 key path\n    let lsValue\n    if (this.systemPlateformType === 1) {\n      // PC 和 H5 走 localStorage\n      lsValue = localStorage.getItem(path[0]) || undefined\n      if (lsValue) {\n        try {\n          lsValue = JSON.parse(lsValue)\n        } catch (e) {\n          lsValue = {}\n        }\n      }\n    } else {\n      if (isPlus) {\n        lsValue = plus.storage.getItem(path[0]) || undefined\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue)\n          } catch (e) {\n            lsValue = {}\n          }\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || undefined\n      }\n    }\n    // 若 path 只有一级，直接读取\n    const valueByPath =\n      lsValue && path.length > 1 ? _.get(lsValue, path.slice(1)) : lsValue\n    const result =\n      // eslint-disable-next-line valid-typeof\n      !valueByPath && typeof nullType !== undefined ? nullType : valueByPath\n    return result\n  }\n\n  /**\n   * 通过路径来存储数据\n   * @param {*} path\n   * @param {*} nullType\n   * @returns\n   */\n  setStorageByPath(path, value, isPlus = false) {\n    path = typeof path === \"string\" ? path.split(\".\") : path\n    path = path.filter((x) => x)\n    let result = \"\"\n    if (path.length > 1) {\n      // 若 path 不只一级，需要取出按 key 路径重新赋值\n      let lsValue\n      if (this.systemPlateformType === 1) {\n        // PC 和 H5 走localStorage\n        lsValue = localStorage.getItem(path[0])\n        if (lsValue) {\n          try {\n            lsValue = JSON.parse(lsValue)\n          } catch (e) {\n            lsValue = {}\n          }\n        } else {\n          lsValue = {}\n        }\n      } else {\n        lsValue = uni.getStorageSync(path[0]) || {}\n      }\n      result = _.set(lsValue, path.slice(1), value)\n    } else if (path.length === 1) {\n      // 若 path 只有一级，直接存入\n      result = value\n    }\n    if (this.systemPlateformType === 1) {\n      if (isPlus) {\n        plus.storage.setItem(path[0], JSON.stringify(result))\n      } else {\n        localStorage.setItem(path[0], JSON.stringify(result))\n      }\n    } else {\n      uni.setStorageSync(path[0], result)\n    }\n    return !!result\n  }\n  getNowPath(routeInfo) {\n    let currentUrl\n    try {\n      const routerArr = routeInfo\n      if (this.systemPlateformType === 1) {\n        const nowFullPath = window.location.href\n        routerArr.forEach((item) => {\n          if (nowFullPath.indexOf(item.path) > -1) {\n            currentUrl = \"/\" + item.path\n          }\n        })\n      }\n      // 如果没有任何匹配的，那就是首页\n      if (!currentUrl) {\n        currentUrl = \"/\" + routeInfo[0].path\n      }\n    } catch (e) {\n      currentUrl = \"/\"\n    }\n    return currentUrl\n  }\n  getAppVersion() {\n    try {\n      const versionInfo = this.getVersionInfo()\n      return {\n        user_custom_app_version_name: versionInfo[\"custom_app_version_name\"]\n      }\n    } catch (e) {\n      return {\n        user_custom_app_version_name: \"\"\n      }\n    }\n  }\n  /**\n   * 获取sdk 版本信息\n   * @returns\n   */\n\n  getSdkVersion() {\n    try {\n      const versionInfo = this.getVersionInfo()\n      return {\n        user_analytics_sdk_version_name:\n          versionInfo[\"analytics_sdk_version_name\"]\n      }\n    } catch (e) {\n      return {\n        user_analytics_sdk_version_name: \"\"\n      }\n    }\n  }\n  // 获得版本信息\n  getVersionInfo() {\n    try {\n      const versionInfo = {\n        analytics_sdk_version_name: packageConfig.version\n      }\n      const initParam = this.initParam\n\n      // uni-app\n      if (initParam.uniPluginObject) {\n        const appWgtVersion = uni.getSystemInfoSync().appWgtVersion\n        versionInfo.custom_app_version_name = appWgtVersion\n      } else if (initParam.routerObject) {\n        // web\n        const packageVersion = WEB_VERSION.version || \"\"\n\n        versionInfo.custom_app_version_name = packageVersion\n      } else {\n        // H5\n\n        const version =\n          uni.getSystemInfoSync().appWgtVersion ||\n          uni.getSystemInfoSync().appVersion\n        // 是否可以执行uni 对应的方法 > mainfestVersion > packageVersion\n        versionInfo.custom_app_version_name = version\n        if (!version) {\n          versionInfo.custom_app_version_name =\n            UNI_VERSION.versionName || UNI_VERSION.version\n        }\n      }\n      return versionInfo\n    } catch (e) {\n      return {\n        analytics_sdk_version_name: packageConfig.version,\n        custom_app_version_name: \"\"\n      }\n    }\n  }\n  checkUrlValid(url) {\n    const reg = /http[s]?:\\/\\/[\\w.]+[\\w\\/]*[\\w.]*\\??[\\w=&\\+\\%]*/\n    return reg.test(url)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}